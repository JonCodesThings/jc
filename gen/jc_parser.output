Terminals unused in grammar

   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   UNKNOWN


Rules useless in parser due to conflicts

  172 type_list: type
  173          | type_list COMMA type


State 261 conflicts: 2 reduce/reduce
State 294 conflicts: 2 reduce/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | import
   21          | include_or_link
   22          | func_ptr
   23          | enum_def
   24          | union_def
   25          | flow_control
   26          | function_def
   27          | struct_decl

   28 alias_statement: ALIAS TYPE TYPE

   29 typedef_statement: TYPEDEF TYPE TYPE

   30 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE
   31           | EXPORT struct_def

   32 struct_decl: STRUCT type

   33 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE
   34          | EXPORT union_def

   35 defer_statement: DEFER assignable_statement

   36 assignable_statement: function_call
   37                     | unary_op
   38                     | binary_op
   39                     | member_op
   40                     | id_or_constant

   41 flow_control: if_statement
   42             | loop

   43 loop: while_loop
   44     | for_loop

   45 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   46      | LEFT_BRACE RIGHT_BRACE

   47 import: IMPORT id

   48 unary_op: cast
   49         | increment
   50         | decrement
   51         | address_of
   52         | dereference
   53         | array_index

   54 binary_op: add
   55          | subtract
   56          | multiply
   57          | divide
   58          | equality
   59          | inequality
   60          | lesser
   61          | greater
   62          | lesser_or_equal
   63          | greater_or_equal
   64          | bitwise_and
   65          | bitwise_or
   66          | bitwise_left_shift
   67          | bitwise_right_shift

   68 assign_op: variable_assign

   69 member_op: id FSTOP id
   70          | id ARROW id

   71 variable_assign: id EQUAL assignable_statement
   72                | array_index EQUAL assignable_statement
   73                | member_op EQUAL assignable_statement

   74 cast: LEFT_BRACKET type RIGHT_BRACKET id_or_constant

   75 increment: id_or_constant PLUS PLUS

   76 decrement: id_or_constant MINUS MINUS

   77 address_of: AND id

   78 dereference: ASTERISK id

   79 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   81 add: id_or_constant PLUS id_or_constant
   82    | id_or_constant PLUS unary_op

   83 subtract: id_or_constant MINUS id_or_constant
   84         | id_or_constant MINUS unary_op

   85 multiply: id_or_constant ASTERISK id_or_constant
   86         | id_or_constant ASTERISK unary_op

   87 divide: id_or_constant FORWARD_SLASH id_or_constant
   88       | id_or_constant FORWARD_SLASH unary_op

   89 equality: id_or_constant EQUAL_EQUAL id_or_constant
   90         | id_or_constant EQUAL_EQUAL unary_op

   91 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant
   92           | id_or_constant EXCLAMATION_EQUAL unary_op

   93 lesser: id_or_constant LESSER id_or_constant
   94       | id_or_constant LESSER unary_op

   95 greater: id_or_constant GREATER id_or_constant
   96        | id_or_constant GREATER unary_op

   97 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant
   98                | id_or_constant LESSER_EQUAL unary_op

   99 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant
  100                 | id_or_constant GREATER_EQUAL unary_op

  101 bitwise_and: id_or_constant AND id_or_constant
  102            | id_or_constant AND unary_op

  103 bitwise_or: id_or_constant OR id_or_constant
  104           | id_or_constant OR unary_op

  105 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant
  106                   | id_or_constant LEFT_SHIFT unary_op

  107 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant
  108                    | id_or_constant RIGHT_SHIFT unary_op

  109 function_def: type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | type id LEFT_BRACKET RIGHT_BRACKET scope
  111             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id LEFT_BRACKET RIGHT_BRACKET scope
  113             | EXPORT function_def

  114 function_decl: type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  116              | EXPORT function_decl

  117 function_call: id LEFT_BRACKET RIGHT_BRACKET
  118              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  119 variable_decl: type id
  120              | id COLON EQUAL assignable_statement
  121              | type id EQUAL assignable_statement
  122              | array_decl
  123              | EXPORT variable_decl

  124 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  126 init_list: id_or_constant
  127          | init_list COMMA id_or_constant

  128 return_statement: RETURN assignable_statement

  129 if_statement: cond_block
  130             | cond_block ELSE scope

  131 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  132           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  133 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  135 struct_list: struct_list struct_pair
  136            | struct_pair

  137 struct_pair: type id SEMICOLON
  138            | type id EQUAL assignable_statement SEMICOLON

  139 arg_list: arg_list COMMA arg_pair
  140         | arg_pair

  141 statement_list: statement_list COMMA assignable_statement
  142               | assignable_statement

  143 type_list: type
  144          | type_list COMMA type

  145 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET
  146         | EXPORT func_ptr

  147 arg_pair: type id
  148         | FSTOP FSTOP FSTOP

  149 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE
  150         | EXPORT enum_def

  151 enum_parts: enum_part
  152           | enum_parts COMMA enum_part

  153 enum_part: id
  154          | id EQUAL constant_int

  155 id_or_constant: id
  156               | constant

  157 include_or_link: INCLUDE STRING
  158                | LINK STRING

  159 constant: constant_int
  160         | constant_enum_value
  161         | constant_bool
  162         | FLOAT
  163         | STRING
  164         | NULLPTR

  165 constant_int: INTEGER

  166 constant_bool: TRUE
  167              | FALSE

  168 constant_enum_value: type COLON COLON id

  169 id: IDENTIFIER

  170 type: TYPE
  171     | type ASTERISK

  172 type_list: type
  173          | type_list COMMA type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 169
STRING (259) 157 158 163
INTEGER (260) 165
FLOAT (261) 162
TYPE (262) 28 29 170
LEFT_BRACKET (263) 74 109 110 111 112 114 115 117 118 131 132 133 134
    145
RIGHT_BRACKET (264) 74 109 110 111 112 114 115 117 118 131 132 133
    134 145
LEFT_BRACE (265) 30 33 45 46 125 149
RIGHT_BRACE (266) 30 33 45 46 125 149
LEFT_SQUARE_BRACKET (267) 79 80 124 125
RIGHT_SQUARE_BRACKET (268) 79 80 124 125
COMMA (269) 127 139 141 144 152 173
FSTOP (270) 69 148
SEMICOLON (271) 5 8 9 11 114 115 134 137 138
COLON (272) 120 168
PLUS (273) 75 81 82
MINUS (274) 76 83 84
ASTERISK (275) 78 85 86 171
FORWARD_SLASH (276) 87 88
EQUAL (277) 71 72 73 120 121 125 138 154
EQUAL_EQUAL (278) 89 90
EXCLAMATION (279)
EXCLAMATION_EQUAL (280) 91 92
GREATER (281) 95 96
GREATER_EQUAL (282) 99 100
LESSER (283) 93 94
LESSER_EQUAL (284) 97 98
AND (285) 77 101 102
AND_AND (286)
OR (287) 103 104
OR_OR (288)
LEFT_SHIFT (289) 105 106
RIGHT_SHIFT (290) 107 108
RETURN (291) 128
DEFER (292) 35
IF (293) 131 132
ELSE (294) 130 132
FOR (295) 134
WHILE (296) 133
TYPEDEF (297) 29
ALIAS (298) 28
AUTO (299)
ENUM (300) 149
UNION (301) 33
TRUE (302) 166
FALSE (303) 167
EXTERN (304)
IMPORT (305) 47
EXPORT (306) 31 34 113 116 123 146 150
INCLUDE (307) 157
LINK (308) 158
FUNC_PTR (309) 145
NULLPTR (310) 164
STRUCT (311) 30 32
ARROW (312) 70
UNKNOWN (313)


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
module (60)
    on left: 1, on right: 0
statements (61)
    on left: 2 3, on right: 1 3
node_setup (62)
    on left: 4 5, on right: 2 3
semicoloned_statements (63)
    on left: 6 7, on right: 7 45
semicoloned_statement (64)
    on left: 8 9 10 11 12, on right: 6 7
statement (65)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    4 5 8 134
alias_statement (66)
    on left: 28, on right: 17
typedef_statement (67)
    on left: 29, on right: 18
struct_def (68)
    on left: 30 31, on right: 19 31
struct_decl (69)
    on left: 32, on right: 27
union_def (70)
    on left: 33 34, on right: 24 34
defer_statement (71)
    on left: 35, on right: 11
assignable_statement (72)
    on left: 36 37 38 39 40, on right: 9 35 71 72 73 120 121 128 131
    132 133 134 138 141 142
flow_control (73)
    on left: 41 42, on right: 10 25
loop (74)
    on left: 43 44, on right: 42
scope (75)
    on left: 45 46, on right: 109 110 111 112 130 131 132 133 134
import (76)
    on left: 47, on right: 20
unary_op (77)
    on left: 48 49 50 51 52 53, on right: 37 82 84 86 88 90 92 94 96
    98 100 102 104 106 108
binary_op (78)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67, on right: 38
assign_op (79)
    on left: 68, on right: 16
member_op (80)
    on left: 69 70, on right: 39 73
variable_assign (81)
    on left: 71 72 73, on right: 68
cast (82)
    on left: 74, on right: 48
increment (83)
    on left: 75, on right: 49
decrement (84)
    on left: 76, on right: 50
address_of (85)
    on left: 77, on right: 51
dereference (86)
    on left: 78, on right: 52
array_index (87)
    on left: 79 80, on right: 53 72
add (88)
    on left: 81 82, on right: 54
subtract (89)
    on left: 83 84, on right: 55
multiply (90)
    on left: 85 86, on right: 56
divide (91)
    on left: 87 88, on right: 57
equality (92)
    on left: 89 90, on right: 58
inequality (93)
    on left: 91 92, on right: 59
lesser (94)
    on left: 93 94, on right: 60
greater (95)
    on left: 95 96, on right: 61
lesser_or_equal (96)
    on left: 97 98, on right: 62
greater_or_equal (97)
    on left: 99 100, on right: 63
bitwise_and (98)
    on left: 101 102, on right: 64
bitwise_or (99)
    on left: 103 104, on right: 65
bitwise_left_shift (100)
    on left: 105 106, on right: 66
bitwise_right_shift (101)
    on left: 107 108, on right: 67
function_def (102)
    on left: 109 110 111 112 113, on right: 12 26 113
function_decl (103)
    on left: 114 115 116, on right: 14 116
function_call (104)
    on left: 117 118, on right: 36
variable_decl (105)
    on left: 119 120 121 122 123, on right: 15 123
array_decl (106)
    on left: 124 125, on right: 122
init_list (107)
    on left: 126 127, on right: 125 127
return_statement (108)
    on left: 128, on right: 13
if_statement (109)
    on left: 129 130, on right: 41
cond_block (110)
    on left: 131 132, on right: 129 130 132
while_loop (111)
    on left: 133, on right: 43
for_loop (112)
    on left: 134, on right: 44
struct_list (113)
    on left: 135 136, on right: 30 33 135
struct_pair (114)
    on left: 137 138, on right: 135 136
arg_list (115)
    on left: 139 140, on right: 109 111 115 139
statement_list (116)
    on left: 141 142, on right: 118 141
type_list (117)
    on left: 143 144 172 173, on right: 144 145 173
func_ptr (118)
    on left: 145 146, on right: 22 146
arg_pair (119)
    on left: 147 148, on right: 139 140
enum_def (120)
    on left: 149 150, on right: 23 150
enum_parts (121)
    on left: 151 152, on right: 149 152
enum_part (122)
    on left: 153 154, on right: 151 152
id_or_constant (123)
    on left: 155 156, on right: 40 74 75 76 81 82 83 84 85 86 87 88
    89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
    108 126 127
include_or_link (124)
    on left: 157 158, on right: 21
constant (125)
    on left: 159 160 161 162 163 164, on right: 156
constant_int (126)
    on left: 165, on right: 79 124 125 154 159
constant_bool (127)
    on left: 166 167, on right: 161
constant_enum_value (128)
    on left: 168, on right: 160
id (129)
    on left: 169, on right: 47 69 70 71 77 78 79 80 109 110 111 112
    114 115 117 118 119 120 121 124 125 137 138 147 153 154 155 168
type (130)
    on left: 170 171, on right: 30 32 33 74 109 110 114 115 119 121
    124 125 137 138 143 144 145 147 149 168 171 172 173


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    IMPORT      shift, and go to state 11
    EXPORT      shift, and go to state 12
    INCLUDE     shift, and go to state 13
    LINK        shift, and go to state 14
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 16

    module             go to state 17
    statements         go to state 18
    node_setup         go to state 19
    statement          go to state 20
    alias_statement    go to state 21
    typedef_statement  go to state 22
    struct_def         go to state 23
    struct_decl        go to state 24
    union_def          go to state 25
    flow_control       go to state 26
    loop               go to state 27
    import             go to state 28
    assign_op          go to state 29
    member_op          go to state 30
    variable_assign    go to state 31
    array_index        go to state 32
    function_def       go to state 33
    function_decl      go to state 34
    variable_decl      go to state 35
    array_decl         go to state 36
    return_statement   go to state 37
    if_statement       go to state 38
    cond_block         go to state 39
    while_loop         go to state 40
    for_loop           go to state 41
    func_ptr           go to state 42
    enum_def           go to state 43
    include_or_link    go to state 44
    id                 go to state 45
    type               go to state 46


State 1

  169 id: IDENTIFIER .

    $default  reduce using rule 169 (id)


State 2

  170 type: TYPE .

    $default  reduce using rule 170 (type)


State 3

  128 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 56
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 4

  131 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 88


State 5

  134 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 89


State 6

  133 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 90


State 7

   29 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 91


State 8

   28 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 92


State 9

  149 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 93


State 10

   33 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 94


State 11

   47 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 95


State 12

   31 struct_def: EXPORT . struct_def
   34 union_def: EXPORT . union_def
  113 function_def: EXPORT . function_def
  116 function_decl: EXPORT . function_decl
  123 variable_decl: EXPORT . variable_decl
  146 func_ptr: EXPORT . func_ptr
  150 enum_def: EXPORT . enum_def

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    EXPORT      shift, and go to state 12
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 96

    struct_def     go to state 97
    union_def      go to state 98
    function_def   go to state 99
    function_decl  go to state 100
    variable_decl  go to state 101
    array_decl     go to state 36
    func_ptr       go to state 102
    enum_def       go to state 103
    id             go to state 104
    type           go to state 46


State 13

  157 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 105


State 14

  158 include_or_link: LINK . STRING

    STRING  shift, and go to state 106


State 15

  145 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 107


State 16

   30 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   32 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 108


State 17

    0 $accept: module . $end

    $end  shift, and go to state 109


State 18

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    IMPORT      shift, and go to state 11
    EXPORT      shift, and go to state 12
    INCLUDE     shift, and go to state 13
    LINK        shift, and go to state 14
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 16

    $default  reduce using rule 1 (module)

    node_setup         go to state 110
    statement          go to state 20
    alias_statement    go to state 21
    typedef_statement  go to state 22
    struct_def         go to state 23
    struct_decl        go to state 24
    union_def          go to state 25
    flow_control       go to state 26
    loop               go to state 27
    import             go to state 28
    assign_op          go to state 29
    member_op          go to state 30
    variable_assign    go to state 31
    array_index        go to state 32
    function_def       go to state 33
    function_decl      go to state 34
    variable_decl      go to state 35
    array_decl         go to state 36
    return_statement   go to state 37
    if_statement       go to state 38
    cond_block         go to state 39
    while_loop         go to state 40
    for_loop           go to state 41
    func_ptr           go to state 42
    enum_def           go to state 43
    include_or_link    go to state 44
    id                 go to state 45
    type               go to state 46


State 19

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 20

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 111

    $default  reduce using rule 4 (node_setup)


State 21

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 22

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 23

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 24

   27 statement: struct_decl .

    $default  reduce using rule 27 (statement)


State 25

   24 statement: union_def .

    $default  reduce using rule 24 (statement)


State 26

   25 statement: flow_control .

    $default  reduce using rule 25 (statement)


State 27

   42 flow_control: loop .

    $default  reduce using rule 42 (flow_control)


State 28

   20 statement: import .

    $default  reduce using rule 20 (statement)


State 29

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 30

   73 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 112


State 31

   68 assign_op: variable_assign .

    $default  reduce using rule 68 (assign_op)


State 32

   72 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 113


State 33

   26 statement: function_def .

    $default  reduce using rule 26 (statement)


State 34

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 35

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 36

  122 variable_decl: array_decl .

    $default  reduce using rule 122 (variable_decl)


State 37

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 38

   41 flow_control: if_statement .

    $default  reduce using rule 41 (flow_control)


State 39

  129 if_statement: cond_block .
  130             | cond_block . ELSE scope
  132 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 114

    $default  reduce using rule 129 (if_statement)


State 40

   43 loop: while_loop .

    $default  reduce using rule 43 (loop)


State 41

   44 loop: for_loop .

    $default  reduce using rule 44 (loop)


State 42

   22 statement: func_ptr .

    $default  reduce using rule 22 (statement)


State 43

   23 statement: enum_def .

    $default  reduce using rule 23 (statement)


State 44

   21 statement: include_or_link .

    $default  reduce using rule 21 (statement)


State 45

   69 member_op: id . FSTOP id
   70          | id . ARROW id
   71 variable_assign: id . EQUAL assignable_statement
   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  111 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id . LEFT_BRACKET RIGHT_BRACKET scope
  120 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 115
    LEFT_SQUARE_BRACKET  shift, and go to state 116
    FSTOP                shift, and go to state 117
    COLON                shift, and go to state 118
    EQUAL                shift, and go to state 119
    ARROW                shift, and go to state 120


State 46

  109 function_def: type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | type . id LEFT_BRACKET RIGHT_BRACKET scope
  114 function_decl: type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  119 variable_decl: type . id
  121              | type . id EQUAL assignable_statement
  124 array_decl: type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  171 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 121

    id  go to state 122


State 47

  163 constant: STRING .

    $default  reduce using rule 163 (constant)


State 48

  165 constant_int: INTEGER .

    $default  reduce using rule 165 (constant_int)


State 49

  162 constant: FLOAT .

    $default  reduce using rule 162 (constant)


State 50

   74 cast: LEFT_BRACKET . type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2

    type  go to state 123


State 51

   78 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 124


State 52

   77 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 125


State 53

  166 constant_bool: TRUE .

    $default  reduce using rule 166 (constant_bool)


State 54

  167 constant_bool: FALSE .

    $default  reduce using rule 167 (constant_bool)


State 55

  164 constant: NULLPTR .

    $default  reduce using rule 164 (constant)


State 56

  128 return_statement: RETURN assignable_statement .

    $default  reduce using rule 128 (return_statement)


State 57

   37 assignable_statement: unary_op .

    $default  reduce using rule 37 (assignable_statement)


State 58

   38 assignable_statement: binary_op .

    $default  reduce using rule 38 (assignable_statement)


State 59

   39 assignable_statement: member_op .

    $default  reduce using rule 39 (assignable_statement)


State 60

   48 unary_op: cast .

    $default  reduce using rule 48 (unary_op)


State 61

   49 unary_op: increment .

    $default  reduce using rule 49 (unary_op)


State 62

   50 unary_op: decrement .

    $default  reduce using rule 50 (unary_op)


State 63

   51 unary_op: address_of .

    $default  reduce using rule 51 (unary_op)


State 64

   52 unary_op: dereference .

    $default  reduce using rule 52 (unary_op)


State 65

   53 unary_op: array_index .

    $default  reduce using rule 53 (unary_op)


State 66

   54 binary_op: add .

    $default  reduce using rule 54 (binary_op)


State 67

   55 binary_op: subtract .

    $default  reduce using rule 55 (binary_op)


State 68

   56 binary_op: multiply .

    $default  reduce using rule 56 (binary_op)


State 69

   57 binary_op: divide .

    $default  reduce using rule 57 (binary_op)


State 70

   58 binary_op: equality .

    $default  reduce using rule 58 (binary_op)


State 71

   59 binary_op: inequality .

    $default  reduce using rule 59 (binary_op)


State 72

   60 binary_op: lesser .

    $default  reduce using rule 60 (binary_op)


State 73

   61 binary_op: greater .

    $default  reduce using rule 61 (binary_op)


State 74

   62 binary_op: lesser_or_equal .

    $default  reduce using rule 62 (binary_op)


State 75

   63 binary_op: greater_or_equal .

    $default  reduce using rule 63 (binary_op)


State 76

   64 binary_op: bitwise_and .

    $default  reduce using rule 64 (binary_op)


State 77

   65 binary_op: bitwise_or .

    $default  reduce using rule 65 (binary_op)


State 78

   66 binary_op: bitwise_left_shift .

    $default  reduce using rule 66 (binary_op)


State 79

   67 binary_op: bitwise_right_shift .

    $default  reduce using rule 67 (binary_op)


State 80

   36 assignable_statement: function_call .

    $default  reduce using rule 36 (assignable_statement)


State 81

   40 assignable_statement: id_or_constant .
   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   81 add: id_or_constant . PLUS id_or_constant
   82    | id_or_constant . PLUS unary_op
   83 subtract: id_or_constant . MINUS id_or_constant
   84         | id_or_constant . MINUS unary_op
   85 multiply: id_or_constant . ASTERISK id_or_constant
   86         | id_or_constant . ASTERISK unary_op
   87 divide: id_or_constant . FORWARD_SLASH id_or_constant
   88       | id_or_constant . FORWARD_SLASH unary_op
   89 equality: id_or_constant . EQUAL_EQUAL id_or_constant
   90         | id_or_constant . EQUAL_EQUAL unary_op
   91 inequality: id_or_constant . EXCLAMATION_EQUAL id_or_constant
   92           | id_or_constant . EXCLAMATION_EQUAL unary_op
   93 lesser: id_or_constant . LESSER id_or_constant
   94       | id_or_constant . LESSER unary_op
   95 greater: id_or_constant . GREATER id_or_constant
   96        | id_or_constant . GREATER unary_op
   97 lesser_or_equal: id_or_constant . LESSER_EQUAL id_or_constant
   98                | id_or_constant . LESSER_EQUAL unary_op
   99 greater_or_equal: id_or_constant . GREATER_EQUAL id_or_constant
  100                 | id_or_constant . GREATER_EQUAL unary_op
  101 bitwise_and: id_or_constant . AND id_or_constant
  102            | id_or_constant . AND unary_op
  103 bitwise_or: id_or_constant . OR id_or_constant
  104           | id_or_constant . OR unary_op
  105 bitwise_left_shift: id_or_constant . LEFT_SHIFT id_or_constant
  106                   | id_or_constant . LEFT_SHIFT unary_op
  107 bitwise_right_shift: id_or_constant . RIGHT_SHIFT id_or_constant
  108                    | id_or_constant . RIGHT_SHIFT unary_op

    PLUS               shift, and go to state 126
    MINUS              shift, and go to state 127
    ASTERISK           shift, and go to state 128
    FORWARD_SLASH      shift, and go to state 129
    EQUAL_EQUAL        shift, and go to state 130
    EXCLAMATION_EQUAL  shift, and go to state 131
    GREATER            shift, and go to state 132
    GREATER_EQUAL      shift, and go to state 133
    LESSER             shift, and go to state 134
    LESSER_EQUAL       shift, and go to state 135
    AND                shift, and go to state 136
    OR                 shift, and go to state 137
    LEFT_SHIFT         shift, and go to state 138
    RIGHT_SHIFT        shift, and go to state 139

    $default  reduce using rule 40 (assignable_statement)


State 82

  156 id_or_constant: constant .

    $default  reduce using rule 156 (id_or_constant)


State 83

  159 constant: constant_int .

    $default  reduce using rule 159 (constant)


State 84

  161 constant: constant_bool .

    $default  reduce using rule 161 (constant)


State 85

  160 constant: constant_enum_value .

    $default  reduce using rule 160 (constant)


State 86

   69 member_op: id . FSTOP id
   70          | id . ARROW id
   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  117 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  118              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  155 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 140
    LEFT_SQUARE_BRACKET  shift, and go to state 116
    FSTOP                shift, and go to state 117
    ARROW                shift, and go to state 120

    $default  reduce using rule 155 (id_or_constant)


State 87

  168 constant_enum_value: type . COLON COLON id
  171 type: type . ASTERISK

    COLON     shift, and go to state 141
    ASTERISK  shift, and go to state 121


State 88

  131 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 142
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 89

  134 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    IMPORT      shift, and go to state 11
    EXPORT      shift, and go to state 12
    INCLUDE     shift, and go to state 13
    LINK        shift, and go to state 14
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 16

    statement          go to state 143
    alias_statement    go to state 21
    typedef_statement  go to state 22
    struct_def         go to state 23
    struct_decl        go to state 24
    union_def          go to state 25
    flow_control       go to state 26
    loop               go to state 27
    import             go to state 28
    assign_op          go to state 29
    member_op          go to state 30
    variable_assign    go to state 31
    array_index        go to state 32
    function_def       go to state 33
    function_decl      go to state 34
    variable_decl      go to state 35
    array_decl         go to state 36
    return_statement   go to state 37
    if_statement       go to state 38
    cond_block         go to state 39
    while_loop         go to state 40
    for_loop           go to state 41
    func_ptr           go to state 42
    enum_def           go to state 43
    include_or_link    go to state 44
    id                 go to state 45
    type               go to state 46


State 90

  133 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 144
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 91

   29 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 145


State 92

   28 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 146


State 93

  149 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE
  171 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 147
    ASTERISK    shift, and go to state 121


State 94

   33 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE
  171 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 148
    ASTERISK    shift, and go to state 121


State 95

   47 import: IMPORT id .

    $default  reduce using rule 47 (import)


State 96

   30 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 149


State 97

   31 struct_def: EXPORT struct_def .

    $default  reduce using rule 31 (struct_def)


State 98

   34 union_def: EXPORT union_def .

    $default  reduce using rule 34 (union_def)


State 99

  113 function_def: EXPORT function_def .

    $default  reduce using rule 113 (function_def)


State 100

  116 function_decl: EXPORT function_decl .

    $default  reduce using rule 116 (function_decl)


State 101

  123 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 123 (variable_decl)


State 102

  146 func_ptr: EXPORT func_ptr .

    $default  reduce using rule 146 (func_ptr)


State 103

  150 enum_def: EXPORT enum_def .

    $default  reduce using rule 150 (enum_def)


State 104

  111 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id . LEFT_BRACKET RIGHT_BRACKET scope
  120 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 115
    COLON         shift, and go to state 118


State 105

  157 include_or_link: INCLUDE STRING .

    $default  reduce using rule 157 (include_or_link)


State 106

  158 include_or_link: LINK STRING .

    $default  reduce using rule 158 (include_or_link)


State 107

  145 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET
  171 type: type . ASTERISK

    TYPE      shift, and go to state 2
    ASTERISK  shift, and go to state 121

    type  go to state 150


State 108

   30 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   32 struct_decl: STRUCT type .
  171 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 151
    ASTERISK    shift, and go to state 121

    $default  reduce using rule 32 (struct_decl)


State 109

    0 $accept: module $end .

    $default  accept


State 110

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 111

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 112

   73 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 152
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 113

   72 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 153
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 114

  130 if_statement: cond_block ELSE . scope
  132 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 154
    IF          shift, and go to state 155

    scope  go to state 156


State 115

  111 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  112             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 157
    FSTOP          shift, and go to state 158

    arg_list  go to state 159
    arg_pair  go to state 160
    type      go to state 161


State 116

   79 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   80            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 48

    constant_int  go to state 162
    id            go to state 163


State 117

   69 member_op: id FSTOP . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 164


State 118

  120 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 165


State 119

   71 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 166
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 120

   70 member_op: id ARROW . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 167


State 121

  171 type: type ASTERISK .

    $default  reduce using rule 171 (type)


State 122

  109 function_def: type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | type id . LEFT_BRACKET RIGHT_BRACKET scope
  114 function_decl: type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  119 variable_decl: type id .
  121              | type id . EQUAL assignable_statement
  124 array_decl: type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 168
    LEFT_SQUARE_BRACKET  shift, and go to state 169
    EQUAL                shift, and go to state 170

    $default  reduce using rule 119 (variable_decl)


State 123

   74 cast: LEFT_BRACKET type . RIGHT_BRACKET id_or_constant
  171 type: type . ASTERISK

    RIGHT_BRACKET  shift, and go to state 171
    ASTERISK       shift, and go to state 121


State 124

   78 dereference: ASTERISK id .

    $default  reduce using rule 78 (dereference)


State 125

   77 address_of: AND id .

    $default  reduce using rule 77 (address_of)


State 126

   75 increment: id_or_constant PLUS . PLUS
   81 add: id_or_constant PLUS . id_or_constant
   82    | id_or_constant PLUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    PLUS          shift, and go to state 172
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 173
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 174
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 127

   76 decrement: id_or_constant MINUS . MINUS
   83 subtract: id_or_constant MINUS . id_or_constant
   84         | id_or_constant MINUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    MINUS         shift, and go to state 176
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 177
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 178
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 128

   85 multiply: id_or_constant ASTERISK . id_or_constant
   86         | id_or_constant ASTERISK . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 179
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 180
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 129

   87 divide: id_or_constant FORWARD_SLASH . id_or_constant
   88       | id_or_constant FORWARD_SLASH . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 181
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 182
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 130

   89 equality: id_or_constant EQUAL_EQUAL . id_or_constant
   90         | id_or_constant EQUAL_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 183
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 184
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 131

   91 inequality: id_or_constant EXCLAMATION_EQUAL . id_or_constant
   92           | id_or_constant EXCLAMATION_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 185
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 186
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 132

   95 greater: id_or_constant GREATER . id_or_constant
   96        | id_or_constant GREATER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 187
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 188
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 133

   99 greater_or_equal: id_or_constant GREATER_EQUAL . id_or_constant
  100                 | id_or_constant GREATER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 189
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 190
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 134

   93 lesser: id_or_constant LESSER . id_or_constant
   94       | id_or_constant LESSER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 191
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 192
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 135

   97 lesser_or_equal: id_or_constant LESSER_EQUAL . id_or_constant
   98                | id_or_constant LESSER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 193
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 194
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 136

  101 bitwise_and: id_or_constant AND . id_or_constant
  102            | id_or_constant AND . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 195
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 196
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 137

  103 bitwise_or: id_or_constant OR . id_or_constant
  104           | id_or_constant OR . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 197
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 198
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 138

  105 bitwise_left_shift: id_or_constant LEFT_SHIFT . id_or_constant
  106                   | id_or_constant LEFT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 199
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 200
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 139

  107 bitwise_right_shift: id_or_constant RIGHT_SHIFT . id_or_constant
  108                    | id_or_constant RIGHT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 201
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 202
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 175
    type                 go to state 87


State 140

  117 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  118              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 47
    INTEGER        shift, and go to state 48
    FLOAT          shift, and go to state 49
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 50
    RIGHT_BRACKET  shift, and go to state 203
    ASTERISK       shift, and go to state 51
    AND            shift, and go to state 52
    TRUE           shift, and go to state 53
    FALSE          shift, and go to state 54
    NULLPTR        shift, and go to state 55

    assignable_statement  go to state 204
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    statement_list        go to state 205
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 141

  168 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 206


State 142

  131 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 207


State 143

  134 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 208


State 144

  133 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 209


State 145

   29 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 29 (typedef_statement)


State 146

   28 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 28 (alias_statement)


State 147

  149 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 210
    enum_part   go to state 211
    id          go to state 212


State 148

   33 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    struct_list  go to state 213
    struct_pair  go to state 214
    type         go to state 215


State 149

   30 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
  171 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 151
    ASTERISK    shift, and go to state 121


State 150

  145 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET
  171 type: type . ASTERISK

    LEFT_BRACKET  shift, and go to state 216
    ASTERISK      shift, and go to state 121


State 151

   30 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    struct_list  go to state 217
    struct_pair  go to state 214
    type         go to state 215


State 152

   73 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 73 (variable_assign)


State 153

   72 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 72 (variable_assign)


State 154

   45 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   46      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    RIGHT_BRACE   shift, and go to state 218
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 219
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    IMPORT        shift, and go to state 11
    EXPORT        shift, and go to state 12
    INCLUDE       shift, and go to state 13
    LINK          shift, and go to state 14
    FUNC_PTR      shift, and go to state 15
    NULLPTR       shift, and go to state 55
    STRUCT        shift, and go to state 16

    semicoloned_statements  go to state 220
    semicoloned_statement   go to state 221
    statement               go to state 222
    alias_statement         go to state 21
    typedef_statement       go to state 22
    struct_def              go to state 23
    struct_decl             go to state 24
    union_def               go to state 25
    defer_statement         go to state 223
    assignable_statement    go to state 224
    flow_control            go to state 225
    loop                    go to state 27
    import                  go to state 28
    unary_op                go to state 57
    binary_op               go to state 58
    assign_op               go to state 29
    member_op               go to state 226
    variable_assign         go to state 31
    cast                    go to state 60
    increment               go to state 61
    decrement               go to state 62
    address_of              go to state 63
    dereference             go to state 64
    array_index             go to state 227
    add                     go to state 66
    subtract                go to state 67
    multiply                go to state 68
    divide                  go to state 69
    equality                go to state 70
    inequality              go to state 71
    lesser                  go to state 72
    greater                 go to state 73
    lesser_or_equal         go to state 74
    greater_or_equal        go to state 75
    bitwise_and             go to state 76
    bitwise_or              go to state 77
    bitwise_left_shift      go to state 78
    bitwise_right_shift     go to state 79
    function_def            go to state 228
    function_decl           go to state 34
    function_call           go to state 80
    variable_decl           go to state 35
    array_decl              go to state 36
    return_statement        go to state 37
    if_statement            go to state 38
    cond_block              go to state 39
    while_loop              go to state 40
    for_loop                go to state 41
    func_ptr                go to state 42
    enum_def                go to state 43
    id_or_constant          go to state 81
    include_or_link         go to state 44
    constant                go to state 82
    constant_int            go to state 83
    constant_bool           go to state 84
    constant_enum_value     go to state 85
    id                      go to state 229
    type                    go to state 230


State 155

  132 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 231


State 156

  130 if_statement: cond_block ELSE scope .

    $default  reduce using rule 130 (if_statement)


State 157

  112 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 154

    scope  go to state 232


State 158

  148 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 233


State 159

  111 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  139 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 234
    COMMA          shift, and go to state 235


State 160

  140 arg_list: arg_pair .

    $default  reduce using rule 140 (arg_list)


State 161

  147 arg_pair: type . id
  171 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 121

    id  go to state 236


State 162

   79 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 237


State 163

   80 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 238


State 164

   69 member_op: id FSTOP id .

    $default  reduce using rule 69 (member_op)


State 165

  120 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 239
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 166

   71 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 71 (variable_assign)


State 167

   70 member_op: id ARROW id .

    $default  reduce using rule 70 (member_op)


State 168

  109 function_def: type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  110             | type id LEFT_BRACKET . RIGHT_BRACKET scope
  114 function_decl: type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
  115              | type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 240
    FSTOP          shift, and go to state 158

    arg_list  go to state 241
    arg_pair  go to state 160
    type      go to state 161


State 169

  124 array_decl: type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  125           | type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 48

    constant_int  go to state 242


State 170

  121 variable_decl: type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 243
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 171

   74 cast: LEFT_BRACKET type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 47
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLPTR     shift, and go to state 55

    id_or_constant       go to state 244
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 245
    type                 go to state 87


State 172

   75 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 75 (increment)


State 173

   82 add: id_or_constant PLUS unary_op .

    $default  reduce using rule 82 (add)


State 174

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   81 add: id_or_constant PLUS id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 81 (add)


State 175

   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  155 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 116

    $default  reduce using rule 155 (id_or_constant)


State 176

   76 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 76 (decrement)


State 177

   84 subtract: id_or_constant MINUS unary_op .

    $default  reduce using rule 84 (subtract)


State 178

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   83 subtract: id_or_constant MINUS id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 83 (subtract)


State 179

   86 multiply: id_or_constant ASTERISK unary_op .

    $default  reduce using rule 86 (multiply)


State 180

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   85 multiply: id_or_constant ASTERISK id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 85 (multiply)


State 181

   88 divide: id_or_constant FORWARD_SLASH unary_op .

    $default  reduce using rule 88 (divide)


State 182

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   87 divide: id_or_constant FORWARD_SLASH id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 87 (divide)


State 183

   90 equality: id_or_constant EQUAL_EQUAL unary_op .

    $default  reduce using rule 90 (equality)


State 184

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   89 equality: id_or_constant EQUAL_EQUAL id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 89 (equality)


State 185

   92 inequality: id_or_constant EXCLAMATION_EQUAL unary_op .

    $default  reduce using rule 92 (inequality)


State 186

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   91 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 91 (inequality)


State 187

   96 greater: id_or_constant GREATER unary_op .

    $default  reduce using rule 96 (greater)


State 188

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   95 greater: id_or_constant GREATER id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 95 (greater)


State 189

  100 greater_or_equal: id_or_constant GREATER_EQUAL unary_op .

    $default  reduce using rule 100 (greater_or_equal)


State 190

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   99 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 99 (greater_or_equal)


State 191

   94 lesser: id_or_constant LESSER unary_op .

    $default  reduce using rule 94 (lesser)


State 192

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   93 lesser: id_or_constant LESSER id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 93 (lesser)


State 193

   98 lesser_or_equal: id_or_constant LESSER_EQUAL unary_op .

    $default  reduce using rule 98 (lesser_or_equal)


State 194

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   97 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 97 (lesser_or_equal)


State 195

  102 bitwise_and: id_or_constant AND unary_op .

    $default  reduce using rule 102 (bitwise_and)


State 196

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  101 bitwise_and: id_or_constant AND id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 101 (bitwise_and)


State 197

  104 bitwise_or: id_or_constant OR unary_op .

    $default  reduce using rule 104 (bitwise_or)


State 198

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  103 bitwise_or: id_or_constant OR id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 103 (bitwise_or)


State 199

  106 bitwise_left_shift: id_or_constant LEFT_SHIFT unary_op .

    $default  reduce using rule 106 (bitwise_left_shift)


State 200

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  105 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 105 (bitwise_left_shift)


State 201

  108 bitwise_right_shift: id_or_constant RIGHT_SHIFT unary_op .

    $default  reduce using rule 108 (bitwise_right_shift)


State 202

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  107 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant .

    PLUS   shift, and go to state 246
    MINUS  shift, and go to state 247

    $default  reduce using rule 107 (bitwise_right_shift)


State 203

  117 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 117 (function_call)


State 204

  142 statement_list: assignable_statement .

    $default  reduce using rule 142 (statement_list)


State 205

  118 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  141 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 248
    COMMA          shift, and go to state 249


State 206

  168 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 250


State 207

  131 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 154

    scope  go to state 251


State 208

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 252
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 209

  133 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 154

    scope  go to state 253


State 210

  149 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  152 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 254
    COMMA        shift, and go to state 255


State 211

  151 enum_parts: enum_part .

    $default  reduce using rule 151 (enum_parts)


State 212

  153 enum_part: id .
  154          | id . EQUAL constant_int

    EQUAL  shift, and go to state 256

    $default  reduce using rule 153 (enum_part)


State 213

   33 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  135 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 257

    struct_pair  go to state 258
    type         go to state 215


State 214

  136 struct_list: struct_pair .

    $default  reduce using rule 136 (struct_list)


State 215

  137 struct_pair: type . id SEMICOLON
  138            | type . id EQUAL assignable_statement SEMICOLON
  171 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 121

    id  go to state 259


State 216

  145 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type_list  go to state 260
    type       go to state 261


State 217

   30 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  135 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 262

    struct_pair  go to state 258
    type         go to state 215


State 218

   46 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 46 (scope)


State 219

   35 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 263
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 220

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   45 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    RIGHT_BRACE   shift, and go to state 264
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 219
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    IMPORT        shift, and go to state 11
    EXPORT        shift, and go to state 12
    INCLUDE       shift, and go to state 13
    LINK          shift, and go to state 14
    FUNC_PTR      shift, and go to state 15
    NULLPTR       shift, and go to state 55
    STRUCT        shift, and go to state 16

    semicoloned_statement  go to state 265
    statement              go to state 222
    alias_statement        go to state 21
    typedef_statement      go to state 22
    struct_def             go to state 23
    struct_decl            go to state 24
    union_def              go to state 25
    defer_statement        go to state 223
    assignable_statement   go to state 224
    flow_control           go to state 225
    loop                   go to state 27
    import                 go to state 28
    unary_op               go to state 57
    binary_op              go to state 58
    assign_op              go to state 29
    member_op              go to state 226
    variable_assign        go to state 31
    cast                   go to state 60
    increment              go to state 61
    decrement              go to state 62
    address_of             go to state 63
    dereference            go to state 64
    array_index            go to state 227
    add                    go to state 66
    subtract               go to state 67
    multiply               go to state 68
    divide                 go to state 69
    equality               go to state 70
    inequality             go to state 71
    lesser                 go to state 72
    greater                go to state 73
    lesser_or_equal        go to state 74
    greater_or_equal       go to state 75
    bitwise_and            go to state 76
    bitwise_or             go to state 77
    bitwise_left_shift     go to state 78
    bitwise_right_shift    go to state 79
    function_def           go to state 228
    function_decl          go to state 34
    function_call          go to state 80
    variable_decl          go to state 35
    array_decl             go to state 36
    return_statement       go to state 37
    if_statement           go to state 38
    cond_block             go to state 39
    while_loop             go to state 40
    for_loop               go to state 41
    func_ptr               go to state 42
    enum_def               go to state 43
    id_or_constant         go to state 81
    include_or_link        go to state 44
    constant               go to state 82
    constant_int           go to state 83
    constant_bool          go to state 84
    constant_enum_value    go to state 85
    id                     go to state 229
    type                   go to state 230


State 221

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 222

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 266


State 223

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 267


State 224

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 268


State 225

   10 semicoloned_statement: flow_control .
   25 statement: flow_control .

    SEMICOLON  reduce using rule 25 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 226

   39 assignable_statement: member_op .
   73 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 112

    $default  reduce using rule 39 (assignable_statement)


State 227

   53 unary_op: array_index .
   72 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 113

    $default  reduce using rule 53 (unary_op)


State 228

   12 semicoloned_statement: function_def .
   26 statement: function_def .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 229

   69 member_op: id . FSTOP id
   70          | id . ARROW id
   71 variable_assign: id . EQUAL assignable_statement
   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  111 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id . LEFT_BRACKET RIGHT_BRACKET scope
  117 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  118              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  120 variable_decl: id . COLON EQUAL assignable_statement
  155 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 269
    LEFT_SQUARE_BRACKET  shift, and go to state 116
    FSTOP                shift, and go to state 117
    COLON                shift, and go to state 118
    EQUAL                shift, and go to state 119
    ARROW                shift, and go to state 120

    $default  reduce using rule 155 (id_or_constant)


State 230

  109 function_def: type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | type . id LEFT_BRACKET RIGHT_BRACKET scope
  114 function_decl: type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  119 variable_decl: type . id
  121              | type . id EQUAL assignable_statement
  124 array_decl: type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  168 constant_enum_value: type . COLON COLON id
  171 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    COLON       shift, and go to state 141
    ASTERISK    shift, and go to state 121

    id  go to state 122


State 231

  132 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 270
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 232

  112 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 112 (function_def)


State 233

  148 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 271


State 234

  111 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 154

    scope  go to state 272


State 235

  139 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 158

    arg_pair  go to state 273
    type      go to state 161


State 236

  147 arg_pair: type id .

    $default  reduce using rule 147 (arg_pair)


State 237

   79 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 79 (array_index)


State 238

   80 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 80 (array_index)


State 239

  120 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 120 (variable_decl)


State 240

  110 function_def: type id LEFT_BRACKET RIGHT_BRACKET . scope
  114 function_decl: type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 154
    SEMICOLON   shift, and go to state 274

    scope  go to state 275


State 241

  109 function_def: type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  115 function_decl: type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  139 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 276
    COMMA          shift, and go to state 235


State 242

  124 array_decl: type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  125           | type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 277


State 243

  121 variable_decl: type id EQUAL assignable_statement .

    $default  reduce using rule 121 (variable_decl)


State 244

   74 cast: LEFT_BRACKET type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 74 (cast)


State 245

  155 id_or_constant: id .

    $default  reduce using rule 155 (id_or_constant)


State 246

   75 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 172


State 247

   76 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 176


State 248

  118 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 118 (function_call)


State 249

  141 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 278
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 250

  168 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 168 (constant_enum_value)


State 251

  131 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 131 (cond_block)


State 252

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 279


State 253

  133 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 133 (while_loop)


State 254

  149 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 149 (enum_def)


State 255

  152 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 280
    id         go to state 212


State 256

  154 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 48

    constant_int  go to state 281


State 257

   33 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 33 (union_def)


State 258

  135 struct_list: struct_list struct_pair .

    $default  reduce using rule 135 (struct_list)


State 259

  137 struct_pair: type id . SEMICOLON
  138            | type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 282
    EQUAL      shift, and go to state 283


State 260

  144 type_list: type_list . COMMA type
  145 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  173 type_list: type_list . COMMA type

    RIGHT_BRACKET  shift, and go to state 284
    COMMA          shift, and go to state 285


State 261

  143 type_list: type .
  171 type: type . ASTERISK
  172 type_list: type .

    ASTERISK  shift, and go to state 121

    RIGHT_BRACKET  reduce using rule 143 (type_list)
    RIGHT_BRACKET  [reduce using rule 172 (type_list)]
    COMMA          reduce using rule 143 (type_list)
    COMMA          [reduce using rule 172 (type_list)]
    $default       reduce using rule 143 (type_list)


State 262

   30 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 30 (struct_def)


State 263

   35 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 35 (defer_statement)


State 264

   45 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 45 (scope)


State 265

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 266

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 267

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 268

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 269

  111 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  112             | id LEFT_BRACKET . RIGHT_BRACKET scope
  117 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  118              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 47
    INTEGER        shift, and go to state 48
    FLOAT          shift, and go to state 49
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 50
    RIGHT_BRACKET  shift, and go to state 286
    FSTOP          shift, and go to state 158
    ASTERISK       shift, and go to state 51
    AND            shift, and go to state 52
    TRUE           shift, and go to state 53
    FALSE          shift, and go to state 54
    NULLPTR        shift, and go to state 55

    assignable_statement  go to state 204
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    arg_list              go to state 159
    statement_list        go to state 205
    arg_pair              go to state 160
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 287


State 270

  132 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 288


State 271

  148 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 148 (arg_pair)


State 272

  111 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 111 (function_def)


State 273

  139 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 139 (arg_list)


State 274

  114 function_decl: type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 114 (function_decl)


State 275

  110 function_def: type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 110 (function_def)


State 276

  109 function_def: type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
  115 function_decl: type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 154
    SEMICOLON   shift, and go to state 289

    scope  go to state 290


State 277

  124 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  125           | type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 291

    $default  reduce using rule 124 (array_decl)


State 278

  141 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 141 (statement_list)


State 279

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 292
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 280

  152 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 152 (enum_parts)


State 281

  154 enum_part: id EQUAL constant_int .

    $default  reduce using rule 154 (enum_part)


State 282

  137 struct_pair: type id SEMICOLON .

    $default  reduce using rule 137 (struct_pair)


State 283

  138 struct_pair: type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 293
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 284

  145 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 145 (func_ptr)


State 285

  144 type_list: type_list COMMA . type
  173          | type_list COMMA . type

    TYPE  shift, and go to state 2

    type  go to state 294


State 286

  112 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
  117 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 154

    $default  reduce using rule 117 (function_call)

    scope  go to state 232


State 287

  147 arg_pair: type . id
  168 constant_enum_value: type . COLON COLON id
  171 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    COLON       shift, and go to state 141
    ASTERISK    shift, and go to state 121

    id  go to state 236


State 288

  132 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 154

    scope  go to state 295


State 289

  115 function_decl: type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 115 (function_decl)


State 290

  109 function_def: type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 109 (function_def)


State 291

  125 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 296


State 292

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 297


State 293

  138 struct_pair: type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 298


State 294

  144 type_list: type_list COMMA type .
  171 type: type . ASTERISK
  173 type_list: type_list COMMA type .

    ASTERISK  shift, and go to state 121

    RIGHT_BRACKET  reduce using rule 144 (type_list)
    RIGHT_BRACKET  [reduce using rule 173 (type_list)]
    COMMA          reduce using rule 144 (type_list)
    COMMA          [reduce using rule 173 (type_list)]
    $default       reduce using rule 144 (type_list)


State 295

  132 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 132 (cond_block)


State 296

  125 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 47
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLPTR     shift, and go to state 55

    init_list            go to state 299
    id_or_constant       go to state 300
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 245
    type                 go to state 87


State 297

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 154

    scope  go to state 301


State 298

  138 struct_pair: type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 138 (struct_pair)


State 299

  125 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  127 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 302
    COMMA        shift, and go to state 303


State 300

  126 init_list: id_or_constant .

    $default  reduce using rule 126 (init_list)


State 301

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 134 (for_loop)


State 302

  125 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 125 (array_decl)


State 303

  127 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 47
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLPTR     shift, and go to state 55

    id_or_constant       go to state 304
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 245
    type                 go to state 87


State 304

  127 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 127 (init_list)
