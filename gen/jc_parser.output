Nonterminals useless in grammar

   modulo


Terminals unused in grammar

   PERCENT
   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   UNKNOWN


Rules useless in grammar

  182 modulo: id_or_constant PERCENT id_or_constant


Rules useless in parser due to conflicts

   28 statement: struct_decl


State 25 conflicts: 19 reduce/reduce
State 101 conflicts: 2 shift/reduce
State 130 conflicts: 1 shift/reduce
State 184 conflicts: 2 shift/reduce
State 188 conflicts: 2 shift/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | struct_decl
   21          | import
   22          | include_or_link
   23          | func_ptr
   24          | enum_def
   25          | union_def
   26          | flow_control
   27          | function_def
   28          | struct_decl

   29 alias_statement: ALIAS TYPE TYPE

   30 typedef_statement: TYPEDEF TYPE TYPE

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE
   32           | EXPORT struct_def

   33 struct_decl: STRUCT type

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE
   35          | EXPORT union_def

   36 defer_statement: DEFER assignable_statement

   37 assignable_statement: function_call
   38                     | unary_op
   39                     | binary_op
   40                     | member_op
   41                     | id_or_constant

   42 flow_control: if_statement
   43             | loop

   44 loop: while_loop
   45     | for_loop

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE RIGHT_BRACE

   48 import: IMPORT id

   49 unary_op: cast
   50         | increment
   51         | decrement
   52         | address_of
   53         | dereference
   54         | array_index
   55         | unary_minus
   56         | unary_plus

   57 unary_minus: MINUS id_or_constant

   58 unary_plus: PLUS id_or_constant

   59 binary_op: add
   60          | subtract
   61          | multiply
   62          | divide
   63          | equality
   64          | inequality
   65          | lesser
   66          | greater
   67          | lesser_or_equal
   68          | greater_or_equal
   69          | bitwise_and
   70          | bitwise_or
   71          | bitwise_left_shift
   72          | bitwise_right_shift

   73 assign_op: variable_assign

   74 member_op: id FSTOP id
   75          | id ARROW id

   76 variable_assign: id EQUAL assignable_statement
   77                | array_index EQUAL assignable_statement
   78                | member_op EQUAL assignable_statement

   79 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant

   80 increment: id_or_constant PLUS PLUS

   81 decrement: id_or_constant MINUS MINUS

   82 address_of: AND id

   83 dereference: ASTERISK id

   84 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   85            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   86 add: id_or_constant PLUS id_or_constant
   87    | id_or_constant PLUS unary_op

   88 subtract: id_or_constant MINUS id_or_constant
   89         | id_or_constant MINUS unary_op

   90 multiply: id_or_constant ASTERISK id_or_constant
   91         | id_or_constant ASTERISK unary_op

   92 divide: id_or_constant FORWARD_SLASH id_or_constant
   93       | id_or_constant FORWARD_SLASH unary_op

   94 equality: id_or_constant EQUAL_EQUAL id_or_constant
   95         | id_or_constant EQUAL_EQUAL unary_op

   96 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant
   97           | id_or_constant EXCLAMATION_EQUAL unary_op

   98 lesser: id_or_constant LESSER id_or_constant
   99       | id_or_constant LESSER unary_op

  100 greater: id_or_constant GREATER id_or_constant
  101        | id_or_constant GREATER unary_op

  102 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant
  103                | id_or_constant LESSER_EQUAL unary_op

  104 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant
  105                 | id_or_constant GREATER_EQUAL unary_op

  106 bitwise_and: id_or_constant AND id_or_constant
  107            | id_or_constant AND unary_op

  108 bitwise_or: id_or_constant OR id_or_constant
  109           | id_or_constant OR unary_op

  110 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant
  111                   | id_or_constant LEFT_SHIFT unary_op

  112 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant
  113                    | id_or_constant RIGHT_SHIFT unary_op

  114 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  115             | composited_type id LEFT_BRACKET RIGHT_BRACKET scope
  116             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  117             | id LEFT_BRACKET RIGHT_BRACKET scope
  118             | EXPORT function_def

  119 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  120              | composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  121              | EXPORT function_decl

  122 function_call: id LEFT_BRACKET RIGHT_BRACKET
  123              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  124 variable_decl: composited_type id
  125              | id COLON EQUAL assignable_statement
  126              | composited_type id EQUAL assignable_statement
  127              | array_decl
  128              | EXPORT variable_decl

  129 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  130           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  131           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  132           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  133 init_list: id_or_constant
  134          | init_list COMMA id_or_constant

  135 return_statement: RETURN assignable_statement

  136 if_statement: cond_block
  137             | cond_block ELSE scope

  138 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  139           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  140 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  142 struct_list: struct_list struct_pair
  143            | struct_pair

  144 struct_pair: composited_type id SEMICOLON
  145            | composited_type id EQUAL assignable_statement SEMICOLON

  146 arg_list: arg_list COMMA arg_pair
  147         | arg_pair

  148 statement_list: statement_list COMMA assignable_statement
  149               | assignable_statement

  150 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET
  151         | EXPORT func_ptr

  152 arg_pair: composited_type id
  153         | FSTOP FSTOP FSTOP

  154 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE
  155         | EXPORT enum_def

  156 enum_parts: enum_part
  157           | enum_parts COMMA enum_part

  158 enum_part: id
  159          | id EQUAL constant_int

  160 id_or_constant: id
  161               | constant

  162 include_or_link: INCLUDE STRING
  163                | LINK STRING

  164 constant: constant_int
  165         | constant_enum_value
  166         | constant_bool
  167         | FLOAT
  168         | STRING
  169         | NULLPTR

  170 constant_int: INTEGER

  171 constant_bool: TRUE
  172              | FALSE

  173 constant_enum_value: type COLON COLON id

  174 id: IDENTIFIER

  175 type: TYPE

  176 composited_type: type
  177                | MUT composited_type
  178                | composited_type ASTERISK
  179                | composited_type MUT

  180 type_list: composited_type
  181          | type_list COMMA composited_type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 174
STRING (259) 162 163 168
INTEGER (260) 170
FLOAT (261) 167
TYPE (262) 29 30 175
LEFT_BRACKET (263) 79 114 115 116 117 119 120 122 123 138 139 140 141
    150
RIGHT_BRACKET (264) 79 114 115 116 117 119 120 122 123 138 139 140
    141 150
LEFT_BRACE (265) 31 34 46 47 130 132 154
RIGHT_BRACE (266) 31 34 46 47 130 132 154
LEFT_SQUARE_BRACKET (267) 84 85 129 130 131 132
RIGHT_SQUARE_BRACKET (268) 84 85 129 130 131 132
COMMA (269) 134 146 148 157 181
FSTOP (270) 74 153
SEMICOLON (271) 5 8 9 11 119 120 141 144 145
COLON (272) 125 173
PLUS (273) 58 80 86 87
MINUS (274) 57 81 88 89
ASTERISK (275) 83 90 91 178
FORWARD_SLASH (276) 92 93
PERCENT (277)
EQUAL (278) 76 77 78 125 126 130 132 145 159
EQUAL_EQUAL (279) 94 95
EXCLAMATION (280)
EXCLAMATION_EQUAL (281) 96 97
GREATER (282) 100 101
GREATER_EQUAL (283) 104 105
LESSER (284) 98 99
LESSER_EQUAL (285) 102 103
AND (286) 82 106 107
AND_AND (287)
OR (288) 108 109
OR_OR (289)
LEFT_SHIFT (290) 110 111
RIGHT_SHIFT (291) 112 113
RETURN (292) 135
DEFER (293) 36
IF (294) 138 139
ELSE (295) 137 139
FOR (296) 141
WHILE (297) 140
TYPEDEF (298) 30
ALIAS (299) 29
AUTO (300)
ENUM (301) 154
UNION (302) 34
TRUE (303) 171
FALSE (304) 172
MUT (305) 131 132 177 179
EXTERN (306)
IMPORT (307) 48
EXPORT (308) 32 35 118 121 128 151 155
INCLUDE (309) 162
LINK (310) 163
FUNC_PTR (311) 150
NULLPTR (312) 169
STRUCT (313) 31 33
ARROW (314) 75
UNKNOWN (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
module (62)
    on left: 1, on right: 0
statements (63)
    on left: 2 3, on right: 1 3
node_setup (64)
    on left: 4 5, on right: 2 3
semicoloned_statements (65)
    on left: 6 7, on right: 7 46
semicoloned_statement (66)
    on left: 8 9 10 11 12, on right: 6 7
statement (67)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    4 5 8 141
alias_statement (68)
    on left: 29, on right: 17
typedef_statement (69)
    on left: 30, on right: 18
struct_def (70)
    on left: 31 32, on right: 19 32
struct_decl (71)
    on left: 33, on right: 20 28
union_def (72)
    on left: 34 35, on right: 25 35
defer_statement (73)
    on left: 36, on right: 11
assignable_statement (74)
    on left: 37 38 39 40 41, on right: 9 36 76 77 78 125 126 135 138
    139 140 141 145 148 149
flow_control (75)
    on left: 42 43, on right: 10 26
loop (76)
    on left: 44 45, on right: 43
scope (77)
    on left: 46 47, on right: 114 115 116 117 137 138 139 140 141
import (78)
    on left: 48, on right: 21
unary_op (79)
    on left: 49 50 51 52 53 54 55 56, on right: 38 87 89 91 93 95 97
    99 101 103 105 107 109 111 113
unary_minus (80)
    on left: 57, on right: 55
unary_plus (81)
    on left: 58, on right: 56
binary_op (82)
    on left: 59 60 61 62 63 64 65 66 67 68 69 70 71 72, on right: 39
assign_op (83)
    on left: 73, on right: 16
member_op (84)
    on left: 74 75, on right: 40 78
variable_assign (85)
    on left: 76 77 78, on right: 73
cast (86)
    on left: 79, on right: 49
increment (87)
    on left: 80, on right: 50
decrement (88)
    on left: 81, on right: 51
address_of (89)
    on left: 82, on right: 52
dereference (90)
    on left: 83, on right: 53
array_index (91)
    on left: 84 85, on right: 54 77
add (92)
    on left: 86 87, on right: 59
subtract (93)
    on left: 88 89, on right: 60
multiply (94)
    on left: 90 91, on right: 61
divide (95)
    on left: 92 93, on right: 62
equality (96)
    on left: 94 95, on right: 63
inequality (97)
    on left: 96 97, on right: 64
lesser (98)
    on left: 98 99, on right: 65
greater (99)
    on left: 100 101, on right: 66
lesser_or_equal (100)
    on left: 102 103, on right: 67
greater_or_equal (101)
    on left: 104 105, on right: 68
bitwise_and (102)
    on left: 106 107, on right: 69
bitwise_or (103)
    on left: 108 109, on right: 70
bitwise_left_shift (104)
    on left: 110 111, on right: 71
bitwise_right_shift (105)
    on left: 112 113, on right: 72
function_def (106)
    on left: 114 115 116 117 118, on right: 12 27 118
function_decl (107)
    on left: 119 120 121, on right: 14 121
function_call (108)
    on left: 122 123, on right: 37
variable_decl (109)
    on left: 124 125 126 127 128, on right: 15 128
array_decl (110)
    on left: 129 130 131 132, on right: 127
init_list (111)
    on left: 133 134, on right: 130 132 134
return_statement (112)
    on left: 135, on right: 13
if_statement (113)
    on left: 136 137, on right: 42
cond_block (114)
    on left: 138 139, on right: 136 137 139
while_loop (115)
    on left: 140, on right: 44
for_loop (116)
    on left: 141, on right: 45
struct_list (117)
    on left: 142 143, on right: 31 34 142
struct_pair (118)
    on left: 144 145, on right: 142 143
arg_list (119)
    on left: 146 147, on right: 114 116 120 146
statement_list (120)
    on left: 148 149, on right: 123 148
func_ptr (121)
    on left: 150 151, on right: 23 151
arg_pair (122)
    on left: 152 153, on right: 146 147
enum_def (123)
    on left: 154 155, on right: 24 155
enum_parts (124)
    on left: 156 157, on right: 154 157
enum_part (125)
    on left: 158 159, on right: 156 157
id_or_constant (126)
    on left: 160 161, on right: 41 57 58 79 80 81 86 87 88 89 90 91
    92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109
    110 111 112 113 133 134
include_or_link (127)
    on left: 162 163, on right: 22
constant (128)
    on left: 164 165 166 167 168 169, on right: 161
constant_int (129)
    on left: 170, on right: 84 129 130 131 132 159 164
constant_bool (130)
    on left: 171 172, on right: 166
constant_enum_value (131)
    on left: 173, on right: 165
id (132)
    on left: 174, on right: 48 74 75 76 82 83 84 85 114 115 116 117
    119 120 122 123 124 125 126 129 130 131 132 144 145 152 158 159
    160 173
type (133)
    on left: 175, on right: 31 33 34 150 154 173 176
composited_type (134)
    on left: 176 177 178 179, on right: 79 114 115 119 120 124 126
    129 130 131 132 144 145 152 177 178 179 180 181
type_list (135)
    on left: 180 181, on right: 150 181


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    module             go to state 18
    statements         go to state 19
    node_setup         go to state 20
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 1

  174 id: IDENTIFIER .

    $default  reduce using rule 174 (id)


State 2

  175 type: TYPE .

    $default  reduce using rule 175 (type)


State 3

  135 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 60
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 4

  138 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 94


State 5

  141 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 95


State 6

  140 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 96


State 7

   30 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 97


State 8

   29 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 98


State 9

  154 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 99


State 10

   34 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 100


State 11

  177 composited_type: MUT . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 101


State 12

   48 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 102


State 13

   32 struct_def: EXPORT . struct_def
   35 union_def: EXPORT . union_def
  118 function_def: EXPORT . function_def
  121 function_decl: EXPORT . function_decl
  128 variable_decl: EXPORT . variable_decl
  151 func_ptr: EXPORT . func_ptr
  155 enum_def: EXPORT . enum_def

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    EXPORT      shift, and go to state 13
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 103

    struct_def       go to state 104
    union_def        go to state 105
    function_def     go to state 106
    function_decl    go to state 107
    variable_decl    go to state 108
    array_decl       go to state 37
    func_ptr         go to state 109
    enum_def         go to state 110
    id               go to state 111
    type             go to state 47
    composited_type  go to state 48


State 14

  162 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 112


State 15

  163 include_or_link: LINK . STRING

    STRING  shift, and go to state 113


State 16

  150 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 114


State 17

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 115


State 18

    0 $accept: module . $end

    $end  shift, and go to state 116


State 19

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    $default  reduce using rule 1 (module)

    node_setup         go to state 117
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 20

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 21

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 118

    $default  reduce using rule 4 (node_setup)


State 22

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 23

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 24

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 25

   20 statement: struct_decl .
   28          | struct_decl .

    $end        reduce using rule 20 (statement)
    $end        [reduce using rule 28 (statement)]
    IDENTIFIER  reduce using rule 20 (statement)
    IDENTIFIER  [reduce using rule 28 (statement)]
    TYPE        reduce using rule 20 (statement)
    TYPE        [reduce using rule 28 (statement)]
    SEMICOLON   reduce using rule 20 (statement)
    SEMICOLON   [reduce using rule 28 (statement)]
    RETURN      reduce using rule 20 (statement)
    RETURN      [reduce using rule 28 (statement)]
    IF          reduce using rule 20 (statement)
    IF          [reduce using rule 28 (statement)]
    FOR         reduce using rule 20 (statement)
    FOR         [reduce using rule 28 (statement)]
    WHILE       reduce using rule 20 (statement)
    WHILE       [reduce using rule 28 (statement)]
    TYPEDEF     reduce using rule 20 (statement)
    TYPEDEF     [reduce using rule 28 (statement)]
    ALIAS       reduce using rule 20 (statement)
    ALIAS       [reduce using rule 28 (statement)]
    ENUM        reduce using rule 20 (statement)
    ENUM        [reduce using rule 28 (statement)]
    UNION       reduce using rule 20 (statement)
    UNION       [reduce using rule 28 (statement)]
    MUT         reduce using rule 20 (statement)
    MUT         [reduce using rule 28 (statement)]
    IMPORT      reduce using rule 20 (statement)
    IMPORT      [reduce using rule 28 (statement)]
    EXPORT      reduce using rule 20 (statement)
    EXPORT      [reduce using rule 28 (statement)]
    INCLUDE     reduce using rule 20 (statement)
    INCLUDE     [reduce using rule 28 (statement)]
    LINK        reduce using rule 20 (statement)
    LINK        [reduce using rule 28 (statement)]
    FUNC_PTR    reduce using rule 20 (statement)
    FUNC_PTR    [reduce using rule 28 (statement)]
    STRUCT      reduce using rule 20 (statement)
    STRUCT      [reduce using rule 28 (statement)]
    $default    reduce using rule 20 (statement)


State 26

   25 statement: union_def .

    $default  reduce using rule 25 (statement)


State 27

   26 statement: flow_control .

    $default  reduce using rule 26 (statement)


State 28

   43 flow_control: loop .

    $default  reduce using rule 43 (flow_control)


State 29

   21 statement: import .

    $default  reduce using rule 21 (statement)


State 30

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 31

   78 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 119


State 32

   73 assign_op: variable_assign .

    $default  reduce using rule 73 (assign_op)


State 33

   77 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 120


State 34

   27 statement: function_def .

    $default  reduce using rule 27 (statement)


State 35

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 36

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 37

  127 variable_decl: array_decl .

    $default  reduce using rule 127 (variable_decl)


State 38

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 39

   42 flow_control: if_statement .

    $default  reduce using rule 42 (flow_control)


State 40

  136 if_statement: cond_block .
  137             | cond_block . ELSE scope
  139 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 121

    $default  reduce using rule 136 (if_statement)


State 41

   44 loop: while_loop .

    $default  reduce using rule 44 (loop)


State 42

   45 loop: for_loop .

    $default  reduce using rule 45 (loop)


State 43

   23 statement: func_ptr .

    $default  reduce using rule 23 (statement)


State 44

   24 statement: enum_def .

    $default  reduce using rule 24 (statement)


State 45

   22 statement: include_or_link .

    $default  reduce using rule 22 (statement)


State 46

   74 member_op: id . FSTOP id
   75          | id . ARROW id
   76 variable_assign: id . EQUAL assignable_statement
   84 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   85            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  116 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  117             | id . LEFT_BRACKET RIGHT_BRACKET scope
  125 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 122
    LEFT_SQUARE_BRACKET  shift, and go to state 123
    FSTOP                shift, and go to state 124
    COLON                shift, and go to state 125
    EQUAL                shift, and go to state 126
    ARROW                shift, and go to state 127


State 47

  176 composited_type: type .

    $default  reduce using rule 176 (composited_type)


State 48

  114 function_def: composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  115             | composited_type . id LEFT_BRACKET RIGHT_BRACKET scope
  119 function_decl: composited_type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  120              | composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  124 variable_decl: composited_type . id
  126              | composited_type . id EQUAL assignable_statement
  129 array_decl: composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  130           | composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  131           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  132           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  178 composited_type: composited_type . ASTERISK
  179                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 128
    MUT         shift, and go to state 129

    id  go to state 130


State 49

  168 constant: STRING .

    $default  reduce using rule 168 (constant)


State 50

  170 constant_int: INTEGER .

    $default  reduce using rule 170 (constant_int)


State 51

  167 constant: FLOAT .

    $default  reduce using rule 167 (constant)


State 52

   79 cast: LEFT_BRACKET . composited_type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 131


State 53

   58 unary_plus: PLUS . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 132
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 54

   57 unary_minus: MINUS . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 134
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 55

   83 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 135


State 56

   82 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 136


State 57

  171 constant_bool: TRUE .

    $default  reduce using rule 171 (constant_bool)


State 58

  172 constant_bool: FALSE .

    $default  reduce using rule 172 (constant_bool)


State 59

  169 constant: NULLPTR .

    $default  reduce using rule 169 (constant)


State 60

  135 return_statement: RETURN assignable_statement .

    $default  reduce using rule 135 (return_statement)


State 61

   38 assignable_statement: unary_op .

    $default  reduce using rule 38 (assignable_statement)


State 62

   55 unary_op: unary_minus .

    $default  reduce using rule 55 (unary_op)


State 63

   56 unary_op: unary_plus .

    $default  reduce using rule 56 (unary_op)


State 64

   39 assignable_statement: binary_op .

    $default  reduce using rule 39 (assignable_statement)


State 65

   40 assignable_statement: member_op .

    $default  reduce using rule 40 (assignable_statement)


State 66

   49 unary_op: cast .

    $default  reduce using rule 49 (unary_op)


State 67

   50 unary_op: increment .

    $default  reduce using rule 50 (unary_op)


State 68

   51 unary_op: decrement .

    $default  reduce using rule 51 (unary_op)


State 69

   52 unary_op: address_of .

    $default  reduce using rule 52 (unary_op)


State 70

   53 unary_op: dereference .

    $default  reduce using rule 53 (unary_op)


State 71

   54 unary_op: array_index .

    $default  reduce using rule 54 (unary_op)


State 72

   59 binary_op: add .

    $default  reduce using rule 59 (binary_op)


State 73

   60 binary_op: subtract .

    $default  reduce using rule 60 (binary_op)


State 74

   61 binary_op: multiply .

    $default  reduce using rule 61 (binary_op)


State 75

   62 binary_op: divide .

    $default  reduce using rule 62 (binary_op)


State 76

   63 binary_op: equality .

    $default  reduce using rule 63 (binary_op)


State 77

   64 binary_op: inequality .

    $default  reduce using rule 64 (binary_op)


State 78

   65 binary_op: lesser .

    $default  reduce using rule 65 (binary_op)


State 79

   66 binary_op: greater .

    $default  reduce using rule 66 (binary_op)


State 80

   67 binary_op: lesser_or_equal .

    $default  reduce using rule 67 (binary_op)


State 81

   68 binary_op: greater_or_equal .

    $default  reduce using rule 68 (binary_op)


State 82

   69 binary_op: bitwise_and .

    $default  reduce using rule 69 (binary_op)


State 83

   70 binary_op: bitwise_or .

    $default  reduce using rule 70 (binary_op)


State 84

   71 binary_op: bitwise_left_shift .

    $default  reduce using rule 71 (binary_op)


State 85

   72 binary_op: bitwise_right_shift .

    $default  reduce using rule 72 (binary_op)


State 86

   37 assignable_statement: function_call .

    $default  reduce using rule 37 (assignable_statement)


State 87

   41 assignable_statement: id_or_constant .
   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   86 add: id_or_constant . PLUS id_or_constant
   87    | id_or_constant . PLUS unary_op
   88 subtract: id_or_constant . MINUS id_or_constant
   89         | id_or_constant . MINUS unary_op
   90 multiply: id_or_constant . ASTERISK id_or_constant
   91         | id_or_constant . ASTERISK unary_op
   92 divide: id_or_constant . FORWARD_SLASH id_or_constant
   93       | id_or_constant . FORWARD_SLASH unary_op
   94 equality: id_or_constant . EQUAL_EQUAL id_or_constant
   95         | id_or_constant . EQUAL_EQUAL unary_op
   96 inequality: id_or_constant . EXCLAMATION_EQUAL id_or_constant
   97           | id_or_constant . EXCLAMATION_EQUAL unary_op
   98 lesser: id_or_constant . LESSER id_or_constant
   99       | id_or_constant . LESSER unary_op
  100 greater: id_or_constant . GREATER id_or_constant
  101        | id_or_constant . GREATER unary_op
  102 lesser_or_equal: id_or_constant . LESSER_EQUAL id_or_constant
  103                | id_or_constant . LESSER_EQUAL unary_op
  104 greater_or_equal: id_or_constant . GREATER_EQUAL id_or_constant
  105                 | id_or_constant . GREATER_EQUAL unary_op
  106 bitwise_and: id_or_constant . AND id_or_constant
  107            | id_or_constant . AND unary_op
  108 bitwise_or: id_or_constant . OR id_or_constant
  109           | id_or_constant . OR unary_op
  110 bitwise_left_shift: id_or_constant . LEFT_SHIFT id_or_constant
  111                   | id_or_constant . LEFT_SHIFT unary_op
  112 bitwise_right_shift: id_or_constant . RIGHT_SHIFT id_or_constant
  113                    | id_or_constant . RIGHT_SHIFT unary_op

    PLUS               shift, and go to state 137
    MINUS              shift, and go to state 138
    ASTERISK           shift, and go to state 139
    FORWARD_SLASH      shift, and go to state 140
    EQUAL_EQUAL        shift, and go to state 141
    EXCLAMATION_EQUAL  shift, and go to state 142
    GREATER            shift, and go to state 143
    GREATER_EQUAL      shift, and go to state 144
    LESSER             shift, and go to state 145
    LESSER_EQUAL       shift, and go to state 146
    AND                shift, and go to state 147
    OR                 shift, and go to state 148
    LEFT_SHIFT         shift, and go to state 149
    RIGHT_SHIFT        shift, and go to state 150

    $default  reduce using rule 41 (assignable_statement)


State 88

  161 id_or_constant: constant .

    $default  reduce using rule 161 (id_or_constant)


State 89

  164 constant: constant_int .

    $default  reduce using rule 164 (constant)


State 90

  166 constant: constant_bool .

    $default  reduce using rule 166 (constant)


State 91

  165 constant: constant_enum_value .

    $default  reduce using rule 165 (constant)


State 92

   74 member_op: id . FSTOP id
   75          | id . ARROW id
   84 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   85            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  122 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  123              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  160 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 151
    LEFT_SQUARE_BRACKET  shift, and go to state 123
    FSTOP                shift, and go to state 124
    ARROW                shift, and go to state 127

    $default  reduce using rule 160 (id_or_constant)


State 93

  173 constant_enum_value: type . COLON COLON id

    COLON  shift, and go to state 152


State 94

  138 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 153
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 95

  141 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    statement          go to state 154
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 96

  140 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 155
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 97

   30 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 156


State 98

   29 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 157


State 99

  154 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 158


State 100

   34 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 159


State 101

  177 composited_type: MUT composited_type .
  178                | composited_type . ASTERISK
  179                | composited_type . MUT

    ASTERISK  shift, and go to state 128
    MUT       shift, and go to state 129

    ASTERISK  [reduce using rule 177 (composited_type)]
    MUT       [reduce using rule 177 (composited_type)]
    $default  reduce using rule 177 (composited_type)


State 102

   48 import: IMPORT id .

    $default  reduce using rule 48 (import)


State 103

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 160


State 104

   32 struct_def: EXPORT struct_def .

    $default  reduce using rule 32 (struct_def)


State 105

   35 union_def: EXPORT union_def .

    $default  reduce using rule 35 (union_def)


State 106

  118 function_def: EXPORT function_def .

    $default  reduce using rule 118 (function_def)


State 107

  121 function_decl: EXPORT function_decl .

    $default  reduce using rule 121 (function_decl)


State 108

  128 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 128 (variable_decl)


State 109

  151 func_ptr: EXPORT func_ptr .

    $default  reduce using rule 151 (func_ptr)


State 110

  155 enum_def: EXPORT enum_def .

    $default  reduce using rule 155 (enum_def)


State 111

  116 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  117             | id . LEFT_BRACKET RIGHT_BRACKET scope
  125 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 122
    COLON         shift, and go to state 125


State 112

  162 include_or_link: INCLUDE STRING .

    $default  reduce using rule 162 (include_or_link)


State 113

  163 include_or_link: LINK STRING .

    $default  reduce using rule 163 (include_or_link)


State 114

  150 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 161


State 115

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT type .

    LEFT_BRACE  shift, and go to state 162

    $default  reduce using rule 33 (struct_decl)


State 116

    0 $accept: module $end .

    $default  accept


State 117

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 118

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 119

   78 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 163
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 120

   77 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 164
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 121

  137 if_statement: cond_block ELSE . scope
  139 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 165
    IF          shift, and go to state 166

    scope  go to state 167


State 122

  116 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  117             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 168
    FSTOP          shift, and go to state 169
    MUT            shift, and go to state 11

    arg_list         go to state 170
    arg_pair         go to state 171
    type             go to state 47
    composited_type  go to state 172


State 123

   84 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   85            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 50

    constant_int  go to state 173
    id            go to state 174


State 124

   74 member_op: id FSTOP . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 175


State 125

  125 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 176


State 126

   76 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 177
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 127

   75 member_op: id ARROW . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 178


State 128

  178 composited_type: composited_type ASTERISK .

    $default  reduce using rule 178 (composited_type)


State 129

  179 composited_type: composited_type MUT .

    $default  reduce using rule 179 (composited_type)


State 130

  114 function_def: composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  115             | composited_type id . LEFT_BRACKET RIGHT_BRACKET scope
  119 function_decl: composited_type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  120              | composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  124 variable_decl: composited_type id .
  126              | composited_type id . EQUAL assignable_statement
  129 array_decl: composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  130           | composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  131           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  132           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 179
    LEFT_SQUARE_BRACKET  shift, and go to state 180
    EQUAL                shift, and go to state 181
    MUT                  shift, and go to state 182

    MUT       [reduce using rule 124 (variable_decl)]
    $default  reduce using rule 124 (variable_decl)


State 131

   79 cast: LEFT_BRACKET composited_type . RIGHT_BRACKET id_or_constant
  178 composited_type: composited_type . ASTERISK
  179                | composited_type . MUT

    RIGHT_BRACKET  shift, and go to state 183
    ASTERISK       shift, and go to state 128
    MUT            shift, and go to state 129


State 132

   58 unary_plus: PLUS id_or_constant .

    $default  reduce using rule 58 (unary_plus)


State 133

  160 id_or_constant: id .

    $default  reduce using rule 160 (id_or_constant)


State 134

   57 unary_minus: MINUS id_or_constant .

    $default  reduce using rule 57 (unary_minus)


State 135

   83 dereference: ASTERISK id .

    $default  reduce using rule 83 (dereference)


State 136

   82 address_of: AND id .

    $default  reduce using rule 82 (address_of)


State 137

   80 increment: id_or_constant PLUS . PLUS
   86 add: id_or_constant PLUS . id_or_constant
   87    | id_or_constant PLUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 184
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 185
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 186
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 138

   81 decrement: id_or_constant MINUS . MINUS
   88 subtract: id_or_constant MINUS . id_or_constant
   89         | id_or_constant MINUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 188
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 189
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 190
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 139

   90 multiply: id_or_constant ASTERISK . id_or_constant
   91         | id_or_constant ASTERISK . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 191
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 192
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 140

   92 divide: id_or_constant FORWARD_SLASH . id_or_constant
   93       | id_or_constant FORWARD_SLASH . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 193
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 194
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 141

   94 equality: id_or_constant EQUAL_EQUAL . id_or_constant
   95         | id_or_constant EQUAL_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 195
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 196
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 142

   96 inequality: id_or_constant EXCLAMATION_EQUAL . id_or_constant
   97           | id_or_constant EXCLAMATION_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 197
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 198
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 143

  100 greater: id_or_constant GREATER . id_or_constant
  101        | id_or_constant GREATER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 199
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 200
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 144

  104 greater_or_equal: id_or_constant GREATER_EQUAL . id_or_constant
  105                 | id_or_constant GREATER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 201
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 202
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 145

   98 lesser: id_or_constant LESSER . id_or_constant
   99       | id_or_constant LESSER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 203
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 204
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 146

  102 lesser_or_equal: id_or_constant LESSER_EQUAL . id_or_constant
  103                | id_or_constant LESSER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 205
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 206
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 147

  106 bitwise_and: id_or_constant AND . id_or_constant
  107            | id_or_constant AND . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 207
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 208
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 148

  108 bitwise_or: id_or_constant OR . id_or_constant
  109           | id_or_constant OR . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 209
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 210
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 149

  110 bitwise_left_shift: id_or_constant LEFT_SHIFT . id_or_constant
  111                   | id_or_constant LEFT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 211
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 212
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 150

  112 bitwise_right_shift: id_or_constant RIGHT_SHIFT . id_or_constant
  113                    | id_or_constant RIGHT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 213
    unary_minus          go to state 62
    unary_plus           go to state 63
    cast                 go to state 66
    increment            go to state 67
    decrement            go to state 68
    address_of           go to state 69
    dereference          go to state 70
    array_index          go to state 71
    id_or_constant       go to state 214
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 187
    type                 go to state 93


State 151

  122 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  123              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 215
    PLUS           shift, and go to state 53
    MINUS          shift, and go to state 54
    ASTERISK       shift, and go to state 55
    AND            shift, and go to state 56
    TRUE           shift, and go to state 57
    FALSE          shift, and go to state 58
    NULLPTR        shift, and go to state 59

    assignable_statement  go to state 216
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    statement_list        go to state 217
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 152

  173 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 218


State 153

  138 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 219


State 154

  141 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 220


State 155

  140 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 221


State 156

   30 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 30 (typedef_statement)


State 157

   29 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 29 (alias_statement)


State 158

  154 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 222
    enum_part   go to state 223
    id          go to state 224


State 159

   34 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 225
    struct_pair      go to state 226
    type             go to state 47
    composited_type  go to state 227


State 160

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 162


State 161

  150 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 228


State 162

   31 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 229
    struct_pair      go to state 226
    type             go to state 47
    composited_type  go to state 227


State 163

   78 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 78 (variable_assign)


State 164

   77 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 77 (variable_assign)


State 165

   46 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 230
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 231
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 59
    STRUCT        shift, and go to state 17

    semicoloned_statements  go to state 232
    semicoloned_statement   go to state 233
    statement               go to state 234
    alias_statement         go to state 22
    typedef_statement       go to state 23
    struct_def              go to state 24
    struct_decl             go to state 25
    union_def               go to state 26
    defer_statement         go to state 235
    assignable_statement    go to state 236
    flow_control            go to state 237
    loop                    go to state 28
    import                  go to state 29
    unary_op                go to state 61
    unary_minus             go to state 62
    unary_plus              go to state 63
    binary_op               go to state 64
    assign_op               go to state 30
    member_op               go to state 238
    variable_assign         go to state 32
    cast                    go to state 66
    increment               go to state 67
    decrement               go to state 68
    address_of              go to state 69
    dereference             go to state 70
    array_index             go to state 239
    add                     go to state 72
    subtract                go to state 73
    multiply                go to state 74
    divide                  go to state 75
    equality                go to state 76
    inequality              go to state 77
    lesser                  go to state 78
    greater                 go to state 79
    lesser_or_equal         go to state 80
    greater_or_equal        go to state 81
    bitwise_and             go to state 82
    bitwise_or              go to state 83
    bitwise_left_shift      go to state 84
    bitwise_right_shift     go to state 85
    function_def            go to state 240
    function_decl           go to state 35
    function_call           go to state 86
    variable_decl           go to state 36
    array_decl              go to state 37
    return_statement        go to state 38
    if_statement            go to state 39
    cond_block              go to state 40
    while_loop              go to state 41
    for_loop                go to state 42
    func_ptr                go to state 43
    enum_def                go to state 44
    id_or_constant          go to state 87
    include_or_link         go to state 45
    constant                go to state 88
    constant_int            go to state 89
    constant_bool           go to state 90
    constant_enum_value     go to state 91
    id                      go to state 241
    type                    go to state 242
    composited_type         go to state 48


State 166

  139 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 243


State 167

  137 if_statement: cond_block ELSE scope .

    $default  reduce using rule 137 (if_statement)


State 168

  117 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 165

    scope  go to state 244


State 169

  153 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 245


State 170

  116 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  146 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 246
    COMMA          shift, and go to state 247


State 171

  147 arg_list: arg_pair .

    $default  reduce using rule 147 (arg_list)


State 172

  152 arg_pair: composited_type . id
  178 composited_type: composited_type . ASTERISK
  179                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 128
    MUT         shift, and go to state 129

    id  go to state 248


State 173

   84 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 249


State 174

   85 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 250


State 175

   74 member_op: id FSTOP id .

    $default  reduce using rule 74 (member_op)


State 176

  125 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 251
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 177

   76 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 76 (variable_assign)


State 178

   75 member_op: id ARROW id .

    $default  reduce using rule 75 (member_op)


State 179

  114 function_def: composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  115             | composited_type id LEFT_BRACKET . RIGHT_BRACKET scope
  119 function_decl: composited_type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
  120              | composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 252
    FSTOP          shift, and go to state 169
    MUT            shift, and go to state 11

    arg_list         go to state 253
    arg_pair         go to state 171
    type             go to state 47
    composited_type  go to state 172


State 180

  129 array_decl: composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  130           | composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 254


State 181

  126 variable_decl: composited_type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 255
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 182

  131 array_decl: composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  132           | composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_SQUARE_BRACKET  shift, and go to state 256


State 183

   79 cast: LEFT_BRACKET composited_type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 257
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 184

   58 unary_plus: PLUS . id_or_constant
   80 increment: id_or_constant PLUS PLUS .

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    IDENTIFIER  [reduce using rule 80 (increment)]
    TYPE        [reduce using rule 80 (increment)]
    $default    reduce using rule 80 (increment)

    id_or_constant       go to state 132
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 185

   87 add: id_or_constant PLUS unary_op .

    $default  reduce using rule 87 (add)


State 186

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   86 add: id_or_constant PLUS id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 86 (add)


State 187

   84 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   85            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  160 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 123

    $default  reduce using rule 160 (id_or_constant)


State 188

   57 unary_minus: MINUS . id_or_constant
   81 decrement: id_or_constant MINUS MINUS .

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    IDENTIFIER  [reduce using rule 81 (decrement)]
    TYPE        [reduce using rule 81 (decrement)]
    $default    reduce using rule 81 (decrement)

    id_or_constant       go to state 134
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 189

   89 subtract: id_or_constant MINUS unary_op .

    $default  reduce using rule 89 (subtract)


State 190

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   88 subtract: id_or_constant MINUS id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 88 (subtract)


State 191

   91 multiply: id_or_constant ASTERISK unary_op .

    $default  reduce using rule 91 (multiply)


State 192

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   90 multiply: id_or_constant ASTERISK id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 90 (multiply)


State 193

   93 divide: id_or_constant FORWARD_SLASH unary_op .

    $default  reduce using rule 93 (divide)


State 194

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   92 divide: id_or_constant FORWARD_SLASH id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 92 (divide)


State 195

   95 equality: id_or_constant EQUAL_EQUAL unary_op .

    $default  reduce using rule 95 (equality)


State 196

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   94 equality: id_or_constant EQUAL_EQUAL id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 94 (equality)


State 197

   97 inequality: id_or_constant EXCLAMATION_EQUAL unary_op .

    $default  reduce using rule 97 (inequality)


State 198

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   96 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 96 (inequality)


State 199

  101 greater: id_or_constant GREATER unary_op .

    $default  reduce using rule 101 (greater)


State 200

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  100 greater: id_or_constant GREATER id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 100 (greater)


State 201

  105 greater_or_equal: id_or_constant GREATER_EQUAL unary_op .

    $default  reduce using rule 105 (greater_or_equal)


State 202

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  104 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 104 (greater_or_equal)


State 203

   99 lesser: id_or_constant LESSER unary_op .

    $default  reduce using rule 99 (lesser)


State 204

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
   98 lesser: id_or_constant LESSER id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 98 (lesser)


State 205

  103 lesser_or_equal: id_or_constant LESSER_EQUAL unary_op .

    $default  reduce using rule 103 (lesser_or_equal)


State 206

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  102 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 102 (lesser_or_equal)


State 207

  107 bitwise_and: id_or_constant AND unary_op .

    $default  reduce using rule 107 (bitwise_and)


State 208

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  106 bitwise_and: id_or_constant AND id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 106 (bitwise_and)


State 209

  109 bitwise_or: id_or_constant OR unary_op .

    $default  reduce using rule 109 (bitwise_or)


State 210

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  108 bitwise_or: id_or_constant OR id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 108 (bitwise_or)


State 211

  111 bitwise_left_shift: id_or_constant LEFT_SHIFT unary_op .

    $default  reduce using rule 111 (bitwise_left_shift)


State 212

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  110 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 110 (bitwise_left_shift)


State 213

  113 bitwise_right_shift: id_or_constant RIGHT_SHIFT unary_op .

    $default  reduce using rule 113 (bitwise_right_shift)


State 214

   80 increment: id_or_constant . PLUS PLUS
   81 decrement: id_or_constant . MINUS MINUS
  112 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant .

    PLUS   shift, and go to state 258
    MINUS  shift, and go to state 259

    $default  reduce using rule 112 (bitwise_right_shift)


State 215

  122 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 122 (function_call)


State 216

  149 statement_list: assignable_statement .

    $default  reduce using rule 149 (statement_list)


State 217

  123 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  148 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 260
    COMMA          shift, and go to state 261


State 218

  173 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 262


State 219

  138 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 165

    scope  go to state 263


State 220

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 264
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 221

  140 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 165

    scope  go to state 265


State 222

  154 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  157 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 266
    COMMA        shift, and go to state 267


State 223

  156 enum_parts: enum_part .

    $default  reduce using rule 156 (enum_parts)


State 224

  158 enum_part: id .
  159          | id . EQUAL constant_int

    EQUAL  shift, and go to state 268

    $default  reduce using rule 158 (enum_part)


State 225

   34 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  142 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 269
    MUT          shift, and go to state 11

    struct_pair      go to state 270
    type             go to state 47
    composited_type  go to state 227


State 226

  143 struct_list: struct_pair .

    $default  reduce using rule 143 (struct_list)


State 227

  144 struct_pair: composited_type . id SEMICOLON
  145            | composited_type . id EQUAL assignable_statement SEMICOLON
  178 composited_type: composited_type . ASTERISK
  179                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 128
    MUT         shift, and go to state 129

    id  go to state 271


State 228

  150 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 272
    type_list        go to state 273


State 229

   31 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  142 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 274
    MUT          shift, and go to state 11

    struct_pair      go to state 270
    type             go to state 47
    composited_type  go to state 227


State 230

   47 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 47 (scope)


State 231

   36 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 275
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 232

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   46 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 276
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 231
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 59
    STRUCT        shift, and go to state 17

    semicoloned_statement  go to state 277
    statement              go to state 234
    alias_statement        go to state 22
    typedef_statement      go to state 23
    struct_def             go to state 24
    struct_decl            go to state 25
    union_def              go to state 26
    defer_statement        go to state 235
    assignable_statement   go to state 236
    flow_control           go to state 237
    loop                   go to state 28
    import                 go to state 29
    unary_op               go to state 61
    unary_minus            go to state 62
    unary_plus             go to state 63
    binary_op              go to state 64
    assign_op              go to state 30
    member_op              go to state 238
    variable_assign        go to state 32
    cast                   go to state 66
    increment              go to state 67
    decrement              go to state 68
    address_of             go to state 69
    dereference            go to state 70
    array_index            go to state 239
    add                    go to state 72
    subtract               go to state 73
    multiply               go to state 74
    divide                 go to state 75
    equality               go to state 76
    inequality             go to state 77
    lesser                 go to state 78
    greater                go to state 79
    lesser_or_equal        go to state 80
    greater_or_equal       go to state 81
    bitwise_and            go to state 82
    bitwise_or             go to state 83
    bitwise_left_shift     go to state 84
    bitwise_right_shift    go to state 85
    function_def           go to state 240
    function_decl          go to state 35
    function_call          go to state 86
    variable_decl          go to state 36
    array_decl             go to state 37
    return_statement       go to state 38
    if_statement           go to state 39
    cond_block             go to state 40
    while_loop             go to state 41
    for_loop               go to state 42
    func_ptr               go to state 43
    enum_def               go to state 44
    id_or_constant         go to state 87
    include_or_link        go to state 45
    constant               go to state 88
    constant_int           go to state 89
    constant_bool          go to state 90
    constant_enum_value    go to state 91
    id                     go to state 241
    type                   go to state 242
    composited_type        go to state 48


State 233

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 234

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 278


State 235

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 279


State 236

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 280


State 237

   10 semicoloned_statement: flow_control .
   26 statement: flow_control .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 238

   40 assignable_statement: member_op .
   78 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 119

    $default  reduce using rule 40 (assignable_statement)


State 239

   54 unary_op: array_index .
   77 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 120

    $default  reduce using rule 54 (unary_op)


State 240

   12 semicoloned_statement: function_def .
   27 statement: function_def .

    SEMICOLON  reduce using rule 27 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 241

   74 member_op: id . FSTOP id
   75          | id . ARROW id
   76 variable_assign: id . EQUAL assignable_statement
   84 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   85            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  116 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  117             | id . LEFT_BRACKET RIGHT_BRACKET scope
  122 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  123              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  125 variable_decl: id . COLON EQUAL assignable_statement
  160 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 281
    LEFT_SQUARE_BRACKET  shift, and go to state 123
    FSTOP                shift, and go to state 124
    COLON                shift, and go to state 125
    EQUAL                shift, and go to state 126
    ARROW                shift, and go to state 127

    $default  reduce using rule 160 (id_or_constant)


State 242

  173 constant_enum_value: type . COLON COLON id
  176 composited_type: type .

    COLON  shift, and go to state 152

    $default  reduce using rule 176 (composited_type)


State 243

  139 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 282
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 244

  117 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 117 (function_def)


State 245

  153 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 283


State 246

  116 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 165

    scope  go to state 284


State 247

  146 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 169
    MUT    shift, and go to state 11

    arg_pair         go to state 285
    type             go to state 47
    composited_type  go to state 172


State 248

  152 arg_pair: composited_type id .

    $default  reduce using rule 152 (arg_pair)


State 249

   84 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 84 (array_index)


State 250

   85 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 85 (array_index)


State 251

  125 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 125 (variable_decl)


State 252

  115 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET . scope
  119 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 165
    SEMICOLON   shift, and go to state 286

    scope  go to state 287


State 253

  114 function_def: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  120 function_decl: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  146 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 288
    COMMA          shift, and go to state 247


State 254

  129 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  130           | composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 289


State 255

  126 variable_decl: composited_type id EQUAL assignable_statement .

    $default  reduce using rule 126 (variable_decl)


State 256

  131 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  132           | composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 290


State 257

   79 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 79 (cast)


State 258

   80 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 291


State 259

   81 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 292


State 260

  123 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 123 (function_call)


State 261

  148 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 293
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 262

  173 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 173 (constant_enum_value)


State 263

  138 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 138 (cond_block)


State 264

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 294


State 265

  140 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 140 (while_loop)


State 266

  154 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 154 (enum_def)


State 267

  157 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 295
    id         go to state 224


State 268

  159 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 50

    constant_int  go to state 296


State 269

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 34 (union_def)


State 270

  142 struct_list: struct_list struct_pair .

    $default  reduce using rule 142 (struct_list)


State 271

  144 struct_pair: composited_type id . SEMICOLON
  145            | composited_type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 297
    EQUAL      shift, and go to state 298


State 272

  178 composited_type: composited_type . ASTERISK
  179                | composited_type . MUT
  180 type_list: composited_type .

    ASTERISK  shift, and go to state 128
    MUT       shift, and go to state 129

    $default  reduce using rule 180 (type_list)


State 273

  150 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  181 type_list: type_list . COMMA composited_type

    RIGHT_BRACKET  shift, and go to state 299
    COMMA          shift, and go to state 300


State 274

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 31 (struct_def)


State 275

   36 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 36 (defer_statement)


State 276

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 46 (scope)


State 277

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 278

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 279

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 280

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 281

  116 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  117             | id LEFT_BRACKET . RIGHT_BRACKET scope
  122 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  123              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 301
    FSTOP          shift, and go to state 169
    PLUS           shift, and go to state 53
    MINUS          shift, and go to state 54
    ASTERISK       shift, and go to state 55
    AND            shift, and go to state 56
    TRUE           shift, and go to state 57
    FALSE          shift, and go to state 58
    MUT            shift, and go to state 11
    NULLPTR        shift, and go to state 59

    assignable_statement  go to state 216
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    arg_list              go to state 170
    statement_list        go to state 217
    arg_pair              go to state 171
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 242
    composited_type       go to state 172


State 282

  139 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 302


State 283

  153 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 153 (arg_pair)


State 284

  116 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 116 (function_def)


State 285

  146 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 146 (arg_list)


State 286

  119 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 119 (function_decl)


State 287

  115 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 115 (function_def)


State 288

  114 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
  120 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 165
    SEMICOLON   shift, and go to state 303

    scope  go to state 304


State 289

  129 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  130           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 305

    $default  reduce using rule 129 (array_decl)


State 290

  131 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  132           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 306


State 291

   80 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 80 (increment)


State 292

   81 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 81 (decrement)


State 293

  148 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 148 (statement_list)


State 294

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 307
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 295

  157 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 157 (enum_parts)


State 296

  159 enum_part: id EQUAL constant_int .

    $default  reduce using rule 159 (enum_part)


State 297

  144 struct_pair: composited_type id SEMICOLON .

    $default  reduce using rule 144 (struct_pair)


State 298

  145 struct_pair: composited_type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 308
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    member_op             go to state 65
    cast                  go to state 66
    increment             go to state 67
    decrement             go to state 68
    address_of            go to state 69
    dereference           go to state 70
    array_index           go to state 71
    add                   go to state 72
    subtract              go to state 73
    multiply              go to state 74
    divide                go to state 75
    equality              go to state 76
    inequality            go to state 77
    lesser                go to state 78
    greater               go to state 79
    lesser_or_equal       go to state 80
    greater_or_equal      go to state 81
    bitwise_and           go to state 82
    bitwise_or            go to state 83
    bitwise_left_shift    go to state 84
    bitwise_right_shift   go to state 85
    function_call         go to state 86
    id_or_constant        go to state 87
    constant              go to state 88
    constant_int          go to state 89
    constant_bool         go to state 90
    constant_enum_value   go to state 91
    id                    go to state 92
    type                  go to state 93


State 299

  150 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 150 (func_ptr)


State 300

  181 type_list: type_list COMMA . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 309


State 301

  117 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
  122 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 165

    $default  reduce using rule 122 (function_call)

    scope  go to state 244


State 302

  139 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 165

    scope  go to state 310


State 303

  120 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 120 (function_decl)


State 304

  114 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 114 (function_def)


State 305

  130 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 311


State 306

  131 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  132           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 312

    $default  reduce using rule 131 (array_decl)


State 307

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 313


State 308

  145 struct_pair: composited_type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 314


State 309

  178 composited_type: composited_type . ASTERISK
  179                | composited_type . MUT
  181 type_list: type_list COMMA composited_type .

    ASTERISK  shift, and go to state 128
    MUT       shift, and go to state 129

    $default  reduce using rule 181 (type_list)


State 310

  139 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 139 (cond_block)


State 311

  130 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    init_list            go to state 315
    id_or_constant       go to state 316
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 312

  132 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 317


State 313

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 165

    scope  go to state 318


State 314

  145 struct_pair: composited_type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 145 (struct_pair)


State 315

  130 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  134 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 319
    COMMA        shift, and go to state 320


State 316

  133 init_list: id_or_constant .

    $default  reduce using rule 133 (init_list)


State 317

  132 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    init_list            go to state 321
    id_or_constant       go to state 316
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 318

  141 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 141 (for_loop)


State 319

  130 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 130 (array_decl)


State 320

  134 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 322
    constant             go to state 88
    constant_int         go to state 89
    constant_bool        go to state 90
    constant_enum_value  go to state 91
    id                   go to state 133
    type                 go to state 93


State 321

  132 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  134 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 323
    COMMA        shift, and go to state 320


State 322

  134 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 134 (init_list)


State 323

  132 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 132 (array_decl)
