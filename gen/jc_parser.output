Terminals unused in grammar

   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   UNKNOWN


Rules useless in parser due to conflicts

  168 type_list: type
  169          | type_list COMMA type


State 255 conflicts: 2 reduce/reduce
State 288 conflicts: 2 reduce/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | import
   21          | include_or_link
   22          | func_ptr
   23          | enum_def
   24          | union_def
   25          | flow_control
   26          | function_def
   27          | struct_decl

   28 alias_statement: ALIAS TYPE TYPE

   29 typedef_statement: TYPEDEF TYPE TYPE

   30 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE

   31 struct_decl: STRUCT type

   32 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE

   33 defer_statement: DEFER assignable_statement

   34 assignable_statement: function_call
   35                     | unary_op
   36                     | binary_op
   37                     | member_op
   38                     | id_or_constant

   39 flow_control: if_statement
   40             | loop

   41 loop: while_loop
   42     | for_loop

   43 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   44      | LEFT_BRACE RIGHT_BRACE

   45 import: IMPORT id

   46 unary_op: cast
   47         | increment
   48         | decrement
   49         | address_of
   50         | dereference
   51         | array_index

   52 binary_op: add
   53          | subtract
   54          | multiply
   55          | divide
   56          | equality
   57          | inequality
   58          | lesser
   59          | greater
   60          | lesser_or_equal
   61          | greater_or_equal
   62          | bitwise_and
   63          | bitwise_or
   64          | bitwise_left_shift
   65          | bitwise_right_shift

   66 assign_op: variable_assign

   67 member_op: id FSTOP id
   68          | id ARROW id

   69 variable_assign: id EQUAL assignable_statement
   70                | array_index EQUAL assignable_statement
   71                | member_op EQUAL assignable_statement

   72 cast: LEFT_BRACKET type RIGHT_BRACKET id_or_constant

   73 increment: id_or_constant PLUS PLUS

   74 decrement: id_or_constant MINUS MINUS

   75 address_of: AND id

   76 dereference: ASTERISK id

   77 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   78            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   79 add: id_or_constant PLUS id_or_constant
   80    | id_or_constant PLUS unary_op

   81 subtract: id_or_constant MINUS id_or_constant
   82         | id_or_constant MINUS unary_op

   83 multiply: id_or_constant ASTERISK id_or_constant
   84         | id_or_constant ASTERISK unary_op

   85 divide: id_or_constant FORWARD_SLASH id_or_constant
   86       | id_or_constant FORWARD_SLASH unary_op

   87 equality: id_or_constant EQUAL_EQUAL id_or_constant
   88         | id_or_constant EQUAL_EQUAL unary_op

   89 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant
   90           | id_or_constant EXCLAMATION_EQUAL unary_op

   91 lesser: id_or_constant LESSER id_or_constant
   92       | id_or_constant LESSER unary_op

   93 greater: id_or_constant GREATER id_or_constant
   94        | id_or_constant GREATER unary_op

   95 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant
   96                | id_or_constant LESSER_EQUAL unary_op

   97 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant
   98                 | id_or_constant GREATER_EQUAL unary_op

   99 bitwise_and: id_or_constant AND id_or_constant
  100            | id_or_constant AND unary_op

  101 bitwise_or: id_or_constant OR id_or_constant
  102           | id_or_constant OR unary_op

  103 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant
  104                   | id_or_constant LEFT_SHIFT unary_op

  105 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant
  106                    | id_or_constant RIGHT_SHIFT unary_op

  107 function_def: type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  108             | type id LEFT_BRACKET RIGHT_BRACKET scope
  109             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | id LEFT_BRACKET RIGHT_BRACKET scope
  111             | EXPORT function_def

  112 function_decl: type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  113              | type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  114              | EXPORT function_decl

  115 function_call: id LEFT_BRACKET RIGHT_BRACKET
  116              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  117 variable_decl: type id
  118              | id COLON EQUAL assignable_statement
  119              | type id EQUAL assignable_statement
  120              | array_decl
  121              | EXPORT variable_decl

  122 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  123           | type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  124 init_list: id_or_constant
  125          | init_list COMMA id_or_constant

  126 return_statement: RETURN assignable_statement

  127 if_statement: cond_block
  128             | cond_block ELSE scope

  129 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  130           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  131 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  133 struct_list: struct_list struct_pair
  134            | struct_pair

  135 struct_pair: type id SEMICOLON
  136            | type id EQUAL assignable_statement SEMICOLON

  137 arg_list: arg_list COMMA arg_pair
  138         | arg_pair

  139 statement_list: statement_list COMMA assignable_statement
  140               | assignable_statement

  141 type_list: type
  142          | type_list COMMA type

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET

  144 arg_pair: type id
  145         | FSTOP FSTOP FSTOP

  146 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE

  147 enum_parts: enum_part
  148           | enum_parts COMMA enum_part

  149 enum_part: id
  150          | id EQUAL constant_int

  151 id_or_constant: id
  152               | constant

  153 include_or_link: INCLUDE STRING
  154                | LINK STRING

  155 constant: constant_int
  156         | constant_enum_value
  157         | constant_bool
  158         | FLOAT
  159         | STRING
  160         | NULLPTR

  161 constant_int: INTEGER

  162 constant_bool: TRUE
  163              | FALSE

  164 constant_enum_value: type COLON COLON id

  165 id: IDENTIFIER

  166 type: TYPE
  167     | type ASTERISK

  168 type_list: type
  169          | type_list COMMA type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 165
STRING (259) 153 154 159
INTEGER (260) 161
FLOAT (261) 158
TYPE (262) 28 29 166
LEFT_BRACKET (263) 72 107 108 109 110 112 113 115 116 129 130 131 132
    143
RIGHT_BRACKET (264) 72 107 108 109 110 112 113 115 116 129 130 131
    132 143
LEFT_BRACE (265) 30 32 43 44 123 146
RIGHT_BRACE (266) 30 32 43 44 123 146
LEFT_SQUARE_BRACKET (267) 77 78 122 123
RIGHT_SQUARE_BRACKET (268) 77 78 122 123
COMMA (269) 125 137 139 142 148 169
FSTOP (270) 67 145
SEMICOLON (271) 5 8 9 11 112 113 132 135 136
COLON (272) 118 164
PLUS (273) 73 79 80
MINUS (274) 74 81 82
ASTERISK (275) 76 83 84 167
FORWARD_SLASH (276) 85 86
EQUAL (277) 69 70 71 118 119 123 136 150
EQUAL_EQUAL (278) 87 88
EXCLAMATION (279)
EXCLAMATION_EQUAL (280) 89 90
GREATER (281) 93 94
GREATER_EQUAL (282) 97 98
LESSER (283) 91 92
LESSER_EQUAL (284) 95 96
AND (285) 75 99 100
AND_AND (286)
OR (287) 101 102
OR_OR (288)
LEFT_SHIFT (289) 103 104
RIGHT_SHIFT (290) 105 106
RETURN (291) 126
DEFER (292) 33
IF (293) 129 130
ELSE (294) 128 130
FOR (295) 132
WHILE (296) 131
TYPEDEF (297) 29
ALIAS (298) 28
AUTO (299)
ENUM (300) 146
UNION (301) 32
TRUE (302) 162
FALSE (303) 163
EXTERN (304)
IMPORT (305) 45
EXPORT (306) 111 114 121
INCLUDE (307) 153
LINK (308) 154
FUNC_PTR (309) 143
NULLPTR (310) 160
STRUCT (311) 30 31
ARROW (312) 68
UNKNOWN (313)


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
module (60)
    on left: 1, on right: 0
statements (61)
    on left: 2 3, on right: 1 3
node_setup (62)
    on left: 4 5, on right: 2 3
semicoloned_statements (63)
    on left: 6 7, on right: 7 43
semicoloned_statement (64)
    on left: 8 9 10 11 12, on right: 6 7
statement (65)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    4 5 8 132
alias_statement (66)
    on left: 28, on right: 17
typedef_statement (67)
    on left: 29, on right: 18
struct_def (68)
    on left: 30, on right: 19
struct_decl (69)
    on left: 31, on right: 27
union_def (70)
    on left: 32, on right: 24
defer_statement (71)
    on left: 33, on right: 11
assignable_statement (72)
    on left: 34 35 36 37 38, on right: 9 33 69 70 71 118 119 126 129
    130 131 132 136 139 140
flow_control (73)
    on left: 39 40, on right: 10 25
loop (74)
    on left: 41 42, on right: 40
scope (75)
    on left: 43 44, on right: 107 108 109 110 128 129 130 131 132
import (76)
    on left: 45, on right: 20
unary_op (77)
    on left: 46 47 48 49 50 51, on right: 35 80 82 84 86 88 90 92 94
    96 98 100 102 104 106
binary_op (78)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65, on right: 36
assign_op (79)
    on left: 66, on right: 16
member_op (80)
    on left: 67 68, on right: 37 71
variable_assign (81)
    on left: 69 70 71, on right: 66
cast (82)
    on left: 72, on right: 46
increment (83)
    on left: 73, on right: 47
decrement (84)
    on left: 74, on right: 48
address_of (85)
    on left: 75, on right: 49
dereference (86)
    on left: 76, on right: 50
array_index (87)
    on left: 77 78, on right: 51 70
add (88)
    on left: 79 80, on right: 52
subtract (89)
    on left: 81 82, on right: 53
multiply (90)
    on left: 83 84, on right: 54
divide (91)
    on left: 85 86, on right: 55
equality (92)
    on left: 87 88, on right: 56
inequality (93)
    on left: 89 90, on right: 57
lesser (94)
    on left: 91 92, on right: 58
greater (95)
    on left: 93 94, on right: 59
lesser_or_equal (96)
    on left: 95 96, on right: 60
greater_or_equal (97)
    on left: 97 98, on right: 61
bitwise_and (98)
    on left: 99 100, on right: 62
bitwise_or (99)
    on left: 101 102, on right: 63
bitwise_left_shift (100)
    on left: 103 104, on right: 64
bitwise_right_shift (101)
    on left: 105 106, on right: 65
function_def (102)
    on left: 107 108 109 110 111, on right: 12 26 111
function_decl (103)
    on left: 112 113 114, on right: 14 114
function_call (104)
    on left: 115 116, on right: 34
variable_decl (105)
    on left: 117 118 119 120 121, on right: 15 121
array_decl (106)
    on left: 122 123, on right: 120
init_list (107)
    on left: 124 125, on right: 123 125
return_statement (108)
    on left: 126, on right: 13
if_statement (109)
    on left: 127 128, on right: 39
cond_block (110)
    on left: 129 130, on right: 127 128 130
while_loop (111)
    on left: 131, on right: 41
for_loop (112)
    on left: 132, on right: 42
struct_list (113)
    on left: 133 134, on right: 30 32 133
struct_pair (114)
    on left: 135 136, on right: 133 134
arg_list (115)
    on left: 137 138, on right: 107 109 113 137
statement_list (116)
    on left: 139 140, on right: 116 139
type_list (117)
    on left: 141 142 168 169, on right: 142 143 169
func_ptr (118)
    on left: 143, on right: 22
arg_pair (119)
    on left: 144 145, on right: 137 138
enum_def (120)
    on left: 146, on right: 23
enum_parts (121)
    on left: 147 148, on right: 146 148
enum_part (122)
    on left: 149 150, on right: 147 148
id_or_constant (123)
    on left: 151 152, on right: 38 72 73 74 79 80 81 82 83 84 85 86
    87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105
    106 124 125
include_or_link (124)
    on left: 153 154, on right: 21
constant (125)
    on left: 155 156 157 158 159 160, on right: 152
constant_int (126)
    on left: 161, on right: 77 122 123 150 155
constant_bool (127)
    on left: 162 163, on right: 157
constant_enum_value (128)
    on left: 164, on right: 156
id (129)
    on left: 165, on right: 45 67 68 69 75 76 77 78 107 108 109 110
    112 113 115 116 117 118 119 122 123 135 136 144 149 150 151 164
type (130)
    on left: 166 167, on right: 30 31 32 72 107 108 112 113 117 119
    122 123 135 136 141 142 143 144 146 164 167 168 169


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    IMPORT      shift, and go to state 11
    EXPORT      shift, and go to state 12
    INCLUDE     shift, and go to state 13
    LINK        shift, and go to state 14
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 16

    module             go to state 17
    statements         go to state 18
    node_setup         go to state 19
    statement          go to state 20
    alias_statement    go to state 21
    typedef_statement  go to state 22
    struct_def         go to state 23
    struct_decl        go to state 24
    union_def          go to state 25
    flow_control       go to state 26
    loop               go to state 27
    import             go to state 28
    assign_op          go to state 29
    member_op          go to state 30
    variable_assign    go to state 31
    array_index        go to state 32
    function_def       go to state 33
    function_decl      go to state 34
    variable_decl      go to state 35
    array_decl         go to state 36
    return_statement   go to state 37
    if_statement       go to state 38
    cond_block         go to state 39
    while_loop         go to state 40
    for_loop           go to state 41
    func_ptr           go to state 42
    enum_def           go to state 43
    include_or_link    go to state 44
    id                 go to state 45
    type               go to state 46


State 1

  165 id: IDENTIFIER .

    $default  reduce using rule 165 (id)


State 2

  166 type: TYPE .

    $default  reduce using rule 166 (type)


State 3

  126 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 56
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 4

  129 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 88


State 5

  132 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 89


State 6

  131 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 90


State 7

   29 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 91


State 8

   28 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 92


State 9

  146 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 93


State 10

   32 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 94


State 11

   45 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 95


State 12

  111 function_def: EXPORT . function_def
  114 function_decl: EXPORT . function_decl
  121 variable_decl: EXPORT . variable_decl

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    EXPORT      shift, and go to state 12

    function_def   go to state 96
    function_decl  go to state 97
    variable_decl  go to state 98
    array_decl     go to state 36
    id             go to state 99
    type           go to state 46


State 13

  153 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 100


State 14

  154 include_or_link: LINK . STRING

    STRING  shift, and go to state 101


State 15

  143 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 102


State 16

   30 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   31 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 103


State 17

    0 $accept: module . $end

    $end  shift, and go to state 104


State 18

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    IMPORT      shift, and go to state 11
    EXPORT      shift, and go to state 12
    INCLUDE     shift, and go to state 13
    LINK        shift, and go to state 14
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 16

    $default  reduce using rule 1 (module)

    node_setup         go to state 105
    statement          go to state 20
    alias_statement    go to state 21
    typedef_statement  go to state 22
    struct_def         go to state 23
    struct_decl        go to state 24
    union_def          go to state 25
    flow_control       go to state 26
    loop               go to state 27
    import             go to state 28
    assign_op          go to state 29
    member_op          go to state 30
    variable_assign    go to state 31
    array_index        go to state 32
    function_def       go to state 33
    function_decl      go to state 34
    variable_decl      go to state 35
    array_decl         go to state 36
    return_statement   go to state 37
    if_statement       go to state 38
    cond_block         go to state 39
    while_loop         go to state 40
    for_loop           go to state 41
    func_ptr           go to state 42
    enum_def           go to state 43
    include_or_link    go to state 44
    id                 go to state 45
    type               go to state 46


State 19

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 20

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 106

    $default  reduce using rule 4 (node_setup)


State 21

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 22

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 23

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 24

   27 statement: struct_decl .

    $default  reduce using rule 27 (statement)


State 25

   24 statement: union_def .

    $default  reduce using rule 24 (statement)


State 26

   25 statement: flow_control .

    $default  reduce using rule 25 (statement)


State 27

   40 flow_control: loop .

    $default  reduce using rule 40 (flow_control)


State 28

   20 statement: import .

    $default  reduce using rule 20 (statement)


State 29

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 30

   71 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 107


State 31

   66 assign_op: variable_assign .

    $default  reduce using rule 66 (assign_op)


State 32

   70 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 108


State 33

   26 statement: function_def .

    $default  reduce using rule 26 (statement)


State 34

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 35

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 36

  120 variable_decl: array_decl .

    $default  reduce using rule 120 (variable_decl)


State 37

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 38

   39 flow_control: if_statement .

    $default  reduce using rule 39 (flow_control)


State 39

  127 if_statement: cond_block .
  128             | cond_block . ELSE scope
  130 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 109

    $default  reduce using rule 127 (if_statement)


State 40

   41 loop: while_loop .

    $default  reduce using rule 41 (loop)


State 41

   42 loop: for_loop .

    $default  reduce using rule 42 (loop)


State 42

   22 statement: func_ptr .

    $default  reduce using rule 22 (statement)


State 43

   23 statement: enum_def .

    $default  reduce using rule 23 (statement)


State 44

   21 statement: include_or_link .

    $default  reduce using rule 21 (statement)


State 45

   67 member_op: id . FSTOP id
   68          | id . ARROW id
   69 variable_assign: id . EQUAL assignable_statement
   77 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   78            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  109 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | id . LEFT_BRACKET RIGHT_BRACKET scope
  118 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 110
    LEFT_SQUARE_BRACKET  shift, and go to state 111
    FSTOP                shift, and go to state 112
    COLON                shift, and go to state 113
    EQUAL                shift, and go to state 114
    ARROW                shift, and go to state 115


State 46

  107 function_def: type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  108             | type . id LEFT_BRACKET RIGHT_BRACKET scope
  112 function_decl: type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  113              | type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  117 variable_decl: type . id
  119              | type . id EQUAL assignable_statement
  122 array_decl: type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  123           | type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  167 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 116

    id  go to state 117


State 47

  159 constant: STRING .

    $default  reduce using rule 159 (constant)


State 48

  161 constant_int: INTEGER .

    $default  reduce using rule 161 (constant_int)


State 49

  158 constant: FLOAT .

    $default  reduce using rule 158 (constant)


State 50

   72 cast: LEFT_BRACKET . type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2

    type  go to state 118


State 51

   76 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 119


State 52

   75 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 120


State 53

  162 constant_bool: TRUE .

    $default  reduce using rule 162 (constant_bool)


State 54

  163 constant_bool: FALSE .

    $default  reduce using rule 163 (constant_bool)


State 55

  160 constant: NULLPTR .

    $default  reduce using rule 160 (constant)


State 56

  126 return_statement: RETURN assignable_statement .

    $default  reduce using rule 126 (return_statement)


State 57

   35 assignable_statement: unary_op .

    $default  reduce using rule 35 (assignable_statement)


State 58

   36 assignable_statement: binary_op .

    $default  reduce using rule 36 (assignable_statement)


State 59

   37 assignable_statement: member_op .

    $default  reduce using rule 37 (assignable_statement)


State 60

   46 unary_op: cast .

    $default  reduce using rule 46 (unary_op)


State 61

   47 unary_op: increment .

    $default  reduce using rule 47 (unary_op)


State 62

   48 unary_op: decrement .

    $default  reduce using rule 48 (unary_op)


State 63

   49 unary_op: address_of .

    $default  reduce using rule 49 (unary_op)


State 64

   50 unary_op: dereference .

    $default  reduce using rule 50 (unary_op)


State 65

   51 unary_op: array_index .

    $default  reduce using rule 51 (unary_op)


State 66

   52 binary_op: add .

    $default  reduce using rule 52 (binary_op)


State 67

   53 binary_op: subtract .

    $default  reduce using rule 53 (binary_op)


State 68

   54 binary_op: multiply .

    $default  reduce using rule 54 (binary_op)


State 69

   55 binary_op: divide .

    $default  reduce using rule 55 (binary_op)


State 70

   56 binary_op: equality .

    $default  reduce using rule 56 (binary_op)


State 71

   57 binary_op: inequality .

    $default  reduce using rule 57 (binary_op)


State 72

   58 binary_op: lesser .

    $default  reduce using rule 58 (binary_op)


State 73

   59 binary_op: greater .

    $default  reduce using rule 59 (binary_op)


State 74

   60 binary_op: lesser_or_equal .

    $default  reduce using rule 60 (binary_op)


State 75

   61 binary_op: greater_or_equal .

    $default  reduce using rule 61 (binary_op)


State 76

   62 binary_op: bitwise_and .

    $default  reduce using rule 62 (binary_op)


State 77

   63 binary_op: bitwise_or .

    $default  reduce using rule 63 (binary_op)


State 78

   64 binary_op: bitwise_left_shift .

    $default  reduce using rule 64 (binary_op)


State 79

   65 binary_op: bitwise_right_shift .

    $default  reduce using rule 65 (binary_op)


State 80

   34 assignable_statement: function_call .

    $default  reduce using rule 34 (assignable_statement)


State 81

   38 assignable_statement: id_or_constant .
   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   79 add: id_or_constant . PLUS id_or_constant
   80    | id_or_constant . PLUS unary_op
   81 subtract: id_or_constant . MINUS id_or_constant
   82         | id_or_constant . MINUS unary_op
   83 multiply: id_or_constant . ASTERISK id_or_constant
   84         | id_or_constant . ASTERISK unary_op
   85 divide: id_or_constant . FORWARD_SLASH id_or_constant
   86       | id_or_constant . FORWARD_SLASH unary_op
   87 equality: id_or_constant . EQUAL_EQUAL id_or_constant
   88         | id_or_constant . EQUAL_EQUAL unary_op
   89 inequality: id_or_constant . EXCLAMATION_EQUAL id_or_constant
   90           | id_or_constant . EXCLAMATION_EQUAL unary_op
   91 lesser: id_or_constant . LESSER id_or_constant
   92       | id_or_constant . LESSER unary_op
   93 greater: id_or_constant . GREATER id_or_constant
   94        | id_or_constant . GREATER unary_op
   95 lesser_or_equal: id_or_constant . LESSER_EQUAL id_or_constant
   96                | id_or_constant . LESSER_EQUAL unary_op
   97 greater_or_equal: id_or_constant . GREATER_EQUAL id_or_constant
   98                 | id_or_constant . GREATER_EQUAL unary_op
   99 bitwise_and: id_or_constant . AND id_or_constant
  100            | id_or_constant . AND unary_op
  101 bitwise_or: id_or_constant . OR id_or_constant
  102           | id_or_constant . OR unary_op
  103 bitwise_left_shift: id_or_constant . LEFT_SHIFT id_or_constant
  104                   | id_or_constant . LEFT_SHIFT unary_op
  105 bitwise_right_shift: id_or_constant . RIGHT_SHIFT id_or_constant
  106                    | id_or_constant . RIGHT_SHIFT unary_op

    PLUS               shift, and go to state 121
    MINUS              shift, and go to state 122
    ASTERISK           shift, and go to state 123
    FORWARD_SLASH      shift, and go to state 124
    EQUAL_EQUAL        shift, and go to state 125
    EXCLAMATION_EQUAL  shift, and go to state 126
    GREATER            shift, and go to state 127
    GREATER_EQUAL      shift, and go to state 128
    LESSER             shift, and go to state 129
    LESSER_EQUAL       shift, and go to state 130
    AND                shift, and go to state 131
    OR                 shift, and go to state 132
    LEFT_SHIFT         shift, and go to state 133
    RIGHT_SHIFT        shift, and go to state 134

    $default  reduce using rule 38 (assignable_statement)


State 82

  152 id_or_constant: constant .

    $default  reduce using rule 152 (id_or_constant)


State 83

  155 constant: constant_int .

    $default  reduce using rule 155 (constant)


State 84

  157 constant: constant_bool .

    $default  reduce using rule 157 (constant)


State 85

  156 constant: constant_enum_value .

    $default  reduce using rule 156 (constant)


State 86

   67 member_op: id . FSTOP id
   68          | id . ARROW id
   77 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   78            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  115 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  116              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  151 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 135
    LEFT_SQUARE_BRACKET  shift, and go to state 111
    FSTOP                shift, and go to state 112
    ARROW                shift, and go to state 115

    $default  reduce using rule 151 (id_or_constant)


State 87

  164 constant_enum_value: type . COLON COLON id
  167 type: type . ASTERISK

    COLON     shift, and go to state 136
    ASTERISK  shift, and go to state 116


State 88

  129 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 137
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 89

  132 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    IMPORT      shift, and go to state 11
    EXPORT      shift, and go to state 12
    INCLUDE     shift, and go to state 13
    LINK        shift, and go to state 14
    FUNC_PTR    shift, and go to state 15
    STRUCT      shift, and go to state 16

    statement          go to state 138
    alias_statement    go to state 21
    typedef_statement  go to state 22
    struct_def         go to state 23
    struct_decl        go to state 24
    union_def          go to state 25
    flow_control       go to state 26
    loop               go to state 27
    import             go to state 28
    assign_op          go to state 29
    member_op          go to state 30
    variable_assign    go to state 31
    array_index        go to state 32
    function_def       go to state 33
    function_decl      go to state 34
    variable_decl      go to state 35
    array_decl         go to state 36
    return_statement   go to state 37
    if_statement       go to state 38
    cond_block         go to state 39
    while_loop         go to state 40
    for_loop           go to state 41
    func_ptr           go to state 42
    enum_def           go to state 43
    include_or_link    go to state 44
    id                 go to state 45
    type               go to state 46


State 90

  131 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 139
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 91

   29 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 140


State 92

   28 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 141


State 93

  146 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE
  167 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 142
    ASTERISK    shift, and go to state 116


State 94

   32 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE
  167 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 143
    ASTERISK    shift, and go to state 116


State 95

   45 import: IMPORT id .

    $default  reduce using rule 45 (import)


State 96

  111 function_def: EXPORT function_def .

    $default  reduce using rule 111 (function_def)


State 97

  114 function_decl: EXPORT function_decl .

    $default  reduce using rule 114 (function_decl)


State 98

  121 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 121 (variable_decl)


State 99

  109 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | id . LEFT_BRACKET RIGHT_BRACKET scope
  118 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 110
    COLON         shift, and go to state 113


State 100

  153 include_or_link: INCLUDE STRING .

    $default  reduce using rule 153 (include_or_link)


State 101

  154 include_or_link: LINK STRING .

    $default  reduce using rule 154 (include_or_link)


State 102

  143 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET
  167 type: type . ASTERISK

    TYPE      shift, and go to state 2
    ASTERISK  shift, and go to state 116

    type  go to state 144


State 103

   30 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   31 struct_decl: STRUCT type .
  167 type: type . ASTERISK

    LEFT_BRACE  shift, and go to state 145
    ASTERISK    shift, and go to state 116

    $default  reduce using rule 31 (struct_decl)


State 104

    0 $accept: module $end .

    $default  accept


State 105

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 106

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 107

   71 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 146
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 108

   70 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 147
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 109

  128 if_statement: cond_block ELSE . scope
  130 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 148
    IF          shift, and go to state 149

    scope  go to state 150


State 110

  109 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  110             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 151
    FSTOP          shift, and go to state 152

    arg_list  go to state 153
    arg_pair  go to state 154
    type      go to state 155


State 111

   77 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   78            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 48

    constant_int  go to state 156
    id            go to state 157


State 112

   67 member_op: id FSTOP . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 158


State 113

  118 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 159


State 114

   69 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 160
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 115

   68 member_op: id ARROW . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 161


State 116

  167 type: type ASTERISK .

    $default  reduce using rule 167 (type)


State 117

  107 function_def: type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  108             | type id . LEFT_BRACKET RIGHT_BRACKET scope
  112 function_decl: type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  113              | type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  117 variable_decl: type id .
  119              | type id . EQUAL assignable_statement
  122 array_decl: type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  123           | type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 162
    LEFT_SQUARE_BRACKET  shift, and go to state 163
    EQUAL                shift, and go to state 164

    $default  reduce using rule 117 (variable_decl)


State 118

   72 cast: LEFT_BRACKET type . RIGHT_BRACKET id_or_constant
  167 type: type . ASTERISK

    RIGHT_BRACKET  shift, and go to state 165
    ASTERISK       shift, and go to state 116


State 119

   76 dereference: ASTERISK id .

    $default  reduce using rule 76 (dereference)


State 120

   75 address_of: AND id .

    $default  reduce using rule 75 (address_of)


State 121

   73 increment: id_or_constant PLUS . PLUS
   79 add: id_or_constant PLUS . id_or_constant
   80    | id_or_constant PLUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    PLUS          shift, and go to state 166
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 167
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 168
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 122

   74 decrement: id_or_constant MINUS . MINUS
   81 subtract: id_or_constant MINUS . id_or_constant
   82         | id_or_constant MINUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    MINUS         shift, and go to state 170
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 171
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 172
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 123

   83 multiply: id_or_constant ASTERISK . id_or_constant
   84         | id_or_constant ASTERISK . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 173
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 174
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 124

   85 divide: id_or_constant FORWARD_SLASH . id_or_constant
   86       | id_or_constant FORWARD_SLASH . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 175
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 176
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 125

   87 equality: id_or_constant EQUAL_EQUAL . id_or_constant
   88         | id_or_constant EQUAL_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 177
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 178
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 126

   89 inequality: id_or_constant EXCLAMATION_EQUAL . id_or_constant
   90           | id_or_constant EXCLAMATION_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 179
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 180
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 127

   93 greater: id_or_constant GREATER . id_or_constant
   94        | id_or_constant GREATER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 181
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 182
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 128

   97 greater_or_equal: id_or_constant GREATER_EQUAL . id_or_constant
   98                 | id_or_constant GREATER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 183
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 184
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 129

   91 lesser: id_or_constant LESSER . id_or_constant
   92       | id_or_constant LESSER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 185
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 186
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 130

   95 lesser_or_equal: id_or_constant LESSER_EQUAL . id_or_constant
   96                | id_or_constant LESSER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 187
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 188
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 131

   99 bitwise_and: id_or_constant AND . id_or_constant
  100            | id_or_constant AND . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 189
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 190
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 132

  101 bitwise_or: id_or_constant OR . id_or_constant
  102           | id_or_constant OR . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 191
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 192
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 133

  103 bitwise_left_shift: id_or_constant LEFT_SHIFT . id_or_constant
  104                   | id_or_constant LEFT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 193
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 194
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 134

  105 bitwise_right_shift: id_or_constant RIGHT_SHIFT . id_or_constant
  106                    | id_or_constant RIGHT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    unary_op             go to state 195
    cast                 go to state 60
    increment            go to state 61
    decrement            go to state 62
    address_of           go to state 63
    dereference          go to state 64
    array_index          go to state 65
    id_or_constant       go to state 196
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 169
    type                 go to state 87


State 135

  115 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  116              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 47
    INTEGER        shift, and go to state 48
    FLOAT          shift, and go to state 49
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 50
    RIGHT_BRACKET  shift, and go to state 197
    ASTERISK       shift, and go to state 51
    AND            shift, and go to state 52
    TRUE           shift, and go to state 53
    FALSE          shift, and go to state 54
    NULLPTR        shift, and go to state 55

    assignable_statement  go to state 198
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    statement_list        go to state 199
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 136

  164 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 200


State 137

  129 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 201


State 138

  132 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 202


State 139

  131 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 203


State 140

   29 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 29 (typedef_statement)


State 141

   28 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 28 (alias_statement)


State 142

  146 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 204
    enum_part   go to state 205
    id          go to state 206


State 143

   32 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    struct_list  go to state 207
    struct_pair  go to state 208
    type         go to state 209


State 144

  143 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET
  167 type: type . ASTERISK

    LEFT_BRACKET  shift, and go to state 210
    ASTERISK      shift, and go to state 116


State 145

   30 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    struct_list  go to state 211
    struct_pair  go to state 208
    type         go to state 209


State 146

   71 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 71 (variable_assign)


State 147

   70 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 70 (variable_assign)


State 148

   43 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   44      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    RIGHT_BRACE   shift, and go to state 212
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 213
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    IMPORT        shift, and go to state 11
    EXPORT        shift, and go to state 12
    INCLUDE       shift, and go to state 13
    LINK          shift, and go to state 14
    FUNC_PTR      shift, and go to state 15
    NULLPTR       shift, and go to state 55
    STRUCT        shift, and go to state 16

    semicoloned_statements  go to state 214
    semicoloned_statement   go to state 215
    statement               go to state 216
    alias_statement         go to state 21
    typedef_statement       go to state 22
    struct_def              go to state 23
    struct_decl             go to state 24
    union_def               go to state 25
    defer_statement         go to state 217
    assignable_statement    go to state 218
    flow_control            go to state 219
    loop                    go to state 27
    import                  go to state 28
    unary_op                go to state 57
    binary_op               go to state 58
    assign_op               go to state 29
    member_op               go to state 220
    variable_assign         go to state 31
    cast                    go to state 60
    increment               go to state 61
    decrement               go to state 62
    address_of              go to state 63
    dereference             go to state 64
    array_index             go to state 221
    add                     go to state 66
    subtract                go to state 67
    multiply                go to state 68
    divide                  go to state 69
    equality                go to state 70
    inequality              go to state 71
    lesser                  go to state 72
    greater                 go to state 73
    lesser_or_equal         go to state 74
    greater_or_equal        go to state 75
    bitwise_and             go to state 76
    bitwise_or              go to state 77
    bitwise_left_shift      go to state 78
    bitwise_right_shift     go to state 79
    function_def            go to state 222
    function_decl           go to state 34
    function_call           go to state 80
    variable_decl           go to state 35
    array_decl              go to state 36
    return_statement        go to state 37
    if_statement            go to state 38
    cond_block              go to state 39
    while_loop              go to state 40
    for_loop                go to state 41
    func_ptr                go to state 42
    enum_def                go to state 43
    id_or_constant          go to state 81
    include_or_link         go to state 44
    constant                go to state 82
    constant_int            go to state 83
    constant_bool           go to state 84
    constant_enum_value     go to state 85
    id                      go to state 223
    type                    go to state 224


State 149

  130 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 225


State 150

  128 if_statement: cond_block ELSE scope .

    $default  reduce using rule 128 (if_statement)


State 151

  110 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 148

    scope  go to state 226


State 152

  145 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 227


State 153

  109 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  137 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 228
    COMMA          shift, and go to state 229


State 154

  138 arg_list: arg_pair .

    $default  reduce using rule 138 (arg_list)


State 155

  144 arg_pair: type . id
  167 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 116

    id  go to state 230


State 156

   77 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 231


State 157

   78 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 232


State 158

   67 member_op: id FSTOP id .

    $default  reduce using rule 67 (member_op)


State 159

  118 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 233
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 160

   69 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 69 (variable_assign)


State 161

   68 member_op: id ARROW id .

    $default  reduce using rule 68 (member_op)


State 162

  107 function_def: type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  108             | type id LEFT_BRACKET . RIGHT_BRACKET scope
  112 function_decl: type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
  113              | type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 234
    FSTOP          shift, and go to state 152

    arg_list  go to state 235
    arg_pair  go to state 154
    type      go to state 155


State 163

  122 array_decl: type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  123           | type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 48

    constant_int  go to state 236


State 164

  119 variable_decl: type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 237
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 165

   72 cast: LEFT_BRACKET type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 47
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLPTR     shift, and go to state 55

    id_or_constant       go to state 238
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 239
    type                 go to state 87


State 166

   73 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 73 (increment)


State 167

   80 add: id_or_constant PLUS unary_op .

    $default  reduce using rule 80 (add)


State 168

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   79 add: id_or_constant PLUS id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 79 (add)


State 169

   77 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   78            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  151 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 111

    $default  reduce using rule 151 (id_or_constant)


State 170

   74 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 74 (decrement)


State 171

   82 subtract: id_or_constant MINUS unary_op .

    $default  reduce using rule 82 (subtract)


State 172

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   81 subtract: id_or_constant MINUS id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 81 (subtract)


State 173

   84 multiply: id_or_constant ASTERISK unary_op .

    $default  reduce using rule 84 (multiply)


State 174

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   83 multiply: id_or_constant ASTERISK id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 83 (multiply)


State 175

   86 divide: id_or_constant FORWARD_SLASH unary_op .

    $default  reduce using rule 86 (divide)


State 176

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   85 divide: id_or_constant FORWARD_SLASH id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 85 (divide)


State 177

   88 equality: id_or_constant EQUAL_EQUAL unary_op .

    $default  reduce using rule 88 (equality)


State 178

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   87 equality: id_or_constant EQUAL_EQUAL id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 87 (equality)


State 179

   90 inequality: id_or_constant EXCLAMATION_EQUAL unary_op .

    $default  reduce using rule 90 (inequality)


State 180

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   89 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 89 (inequality)


State 181

   94 greater: id_or_constant GREATER unary_op .

    $default  reduce using rule 94 (greater)


State 182

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   93 greater: id_or_constant GREATER id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 93 (greater)


State 183

   98 greater_or_equal: id_or_constant GREATER_EQUAL unary_op .

    $default  reduce using rule 98 (greater_or_equal)


State 184

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   97 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 97 (greater_or_equal)


State 185

   92 lesser: id_or_constant LESSER unary_op .

    $default  reduce using rule 92 (lesser)


State 186

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   91 lesser: id_or_constant LESSER id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 91 (lesser)


State 187

   96 lesser_or_equal: id_or_constant LESSER_EQUAL unary_op .

    $default  reduce using rule 96 (lesser_or_equal)


State 188

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   95 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 95 (lesser_or_equal)


State 189

  100 bitwise_and: id_or_constant AND unary_op .

    $default  reduce using rule 100 (bitwise_and)


State 190

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
   99 bitwise_and: id_or_constant AND id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 99 (bitwise_and)


State 191

  102 bitwise_or: id_or_constant OR unary_op .

    $default  reduce using rule 102 (bitwise_or)


State 192

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
  101 bitwise_or: id_or_constant OR id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 101 (bitwise_or)


State 193

  104 bitwise_left_shift: id_or_constant LEFT_SHIFT unary_op .

    $default  reduce using rule 104 (bitwise_left_shift)


State 194

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
  103 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 103 (bitwise_left_shift)


State 195

  106 bitwise_right_shift: id_or_constant RIGHT_SHIFT unary_op .

    $default  reduce using rule 106 (bitwise_right_shift)


State 196

   73 increment: id_or_constant . PLUS PLUS
   74 decrement: id_or_constant . MINUS MINUS
  105 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant .

    PLUS   shift, and go to state 240
    MINUS  shift, and go to state 241

    $default  reduce using rule 105 (bitwise_right_shift)


State 197

  115 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 115 (function_call)


State 198

  140 statement_list: assignable_statement .

    $default  reduce using rule 140 (statement_list)


State 199

  116 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  139 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 242
    COMMA          shift, and go to state 243


State 200

  164 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 244


State 201

  129 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 148

    scope  go to state 245


State 202

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 246
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 203

  131 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 148

    scope  go to state 247


State 204

  146 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  148 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 248
    COMMA        shift, and go to state 249


State 205

  147 enum_parts: enum_part .

    $default  reduce using rule 147 (enum_parts)


State 206

  149 enum_part: id .
  150          | id . EQUAL constant_int

    EQUAL  shift, and go to state 250

    $default  reduce using rule 149 (enum_part)


State 207

   32 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  133 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 251

    struct_pair  go to state 252
    type         go to state 209


State 208

  134 struct_list: struct_pair .

    $default  reduce using rule 134 (struct_list)


State 209

  135 struct_pair: type . id SEMICOLON
  136            | type . id EQUAL assignable_statement SEMICOLON
  167 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 116

    id  go to state 253


State 210

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type_list  go to state 254
    type       go to state 255


State 211

   30 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  133 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 256

    struct_pair  go to state 252
    type         go to state 209


State 212

   44 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 44 (scope)


State 213

   33 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 257
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 214

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   43 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    RIGHT_BRACE   shift, and go to state 258
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 213
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    IMPORT        shift, and go to state 11
    EXPORT        shift, and go to state 12
    INCLUDE       shift, and go to state 13
    LINK          shift, and go to state 14
    FUNC_PTR      shift, and go to state 15
    NULLPTR       shift, and go to state 55
    STRUCT        shift, and go to state 16

    semicoloned_statement  go to state 259
    statement              go to state 216
    alias_statement        go to state 21
    typedef_statement      go to state 22
    struct_def             go to state 23
    struct_decl            go to state 24
    union_def              go to state 25
    defer_statement        go to state 217
    assignable_statement   go to state 218
    flow_control           go to state 219
    loop                   go to state 27
    import                 go to state 28
    unary_op               go to state 57
    binary_op              go to state 58
    assign_op              go to state 29
    member_op              go to state 220
    variable_assign        go to state 31
    cast                   go to state 60
    increment              go to state 61
    decrement              go to state 62
    address_of             go to state 63
    dereference            go to state 64
    array_index            go to state 221
    add                    go to state 66
    subtract               go to state 67
    multiply               go to state 68
    divide                 go to state 69
    equality               go to state 70
    inequality             go to state 71
    lesser                 go to state 72
    greater                go to state 73
    lesser_or_equal        go to state 74
    greater_or_equal       go to state 75
    bitwise_and            go to state 76
    bitwise_or             go to state 77
    bitwise_left_shift     go to state 78
    bitwise_right_shift    go to state 79
    function_def           go to state 222
    function_decl          go to state 34
    function_call          go to state 80
    variable_decl          go to state 35
    array_decl             go to state 36
    return_statement       go to state 37
    if_statement           go to state 38
    cond_block             go to state 39
    while_loop             go to state 40
    for_loop               go to state 41
    func_ptr               go to state 42
    enum_def               go to state 43
    id_or_constant         go to state 81
    include_or_link        go to state 44
    constant               go to state 82
    constant_int           go to state 83
    constant_bool          go to state 84
    constant_enum_value    go to state 85
    id                     go to state 223
    type                   go to state 224


State 215

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 216

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 260


State 217

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 261


State 218

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 262


State 219

   10 semicoloned_statement: flow_control .
   25 statement: flow_control .

    SEMICOLON  reduce using rule 25 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 220

   37 assignable_statement: member_op .
   71 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 107

    $default  reduce using rule 37 (assignable_statement)


State 221

   51 unary_op: array_index .
   70 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 108

    $default  reduce using rule 51 (unary_op)


State 222

   12 semicoloned_statement: function_def .
   26 statement: function_def .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 223

   67 member_op: id . FSTOP id
   68          | id . ARROW id
   69 variable_assign: id . EQUAL assignable_statement
   77 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   78            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  109 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | id . LEFT_BRACKET RIGHT_BRACKET scope
  115 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  116              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  118 variable_decl: id . COLON EQUAL assignable_statement
  151 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 263
    LEFT_SQUARE_BRACKET  shift, and go to state 111
    FSTOP                shift, and go to state 112
    COLON                shift, and go to state 113
    EQUAL                shift, and go to state 114
    ARROW                shift, and go to state 115

    $default  reduce using rule 151 (id_or_constant)


State 224

  107 function_def: type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  108             | type . id LEFT_BRACKET RIGHT_BRACKET scope
  112 function_decl: type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  113              | type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  117 variable_decl: type . id
  119              | type . id EQUAL assignable_statement
  122 array_decl: type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  123           | type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  164 constant_enum_value: type . COLON COLON id
  167 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    COLON       shift, and go to state 136
    ASTERISK    shift, and go to state 116

    id  go to state 117


State 225

  130 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 264
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 226

  110 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 110 (function_def)


State 227

  145 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 265


State 228

  109 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 148

    scope  go to state 266


State 229

  137 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 152

    arg_pair  go to state 267
    type      go to state 155


State 230

  144 arg_pair: type id .

    $default  reduce using rule 144 (arg_pair)


State 231

   77 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 77 (array_index)


State 232

   78 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 78 (array_index)


State 233

  118 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 118 (variable_decl)


State 234

  108 function_def: type id LEFT_BRACKET RIGHT_BRACKET . scope
  112 function_decl: type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 148
    SEMICOLON   shift, and go to state 268

    scope  go to state 269


State 235

  107 function_def: type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  113 function_decl: type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  137 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 270
    COMMA          shift, and go to state 229


State 236

  122 array_decl: type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  123           | type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 271


State 237

  119 variable_decl: type id EQUAL assignable_statement .

    $default  reduce using rule 119 (variable_decl)


State 238

   72 cast: LEFT_BRACKET type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 72 (cast)


State 239

  151 id_or_constant: id .

    $default  reduce using rule 151 (id_or_constant)


State 240

   73 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 166


State 241

   74 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 170


State 242

  116 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 116 (function_call)


State 243

  139 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 272
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 244

  164 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 164 (constant_enum_value)


State 245

  129 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 129 (cond_block)


State 246

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 273


State 247

  131 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 131 (while_loop)


State 248

  146 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 146 (enum_def)


State 249

  148 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 274
    id         go to state 206


State 250

  150 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 48

    constant_int  go to state 275


State 251

   32 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 32 (union_def)


State 252

  133 struct_list: struct_list struct_pair .

    $default  reduce using rule 133 (struct_list)


State 253

  135 struct_pair: type id . SEMICOLON
  136            | type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 276
    EQUAL      shift, and go to state 277


State 254

  142 type_list: type_list . COMMA type
  143 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  169 type_list: type_list . COMMA type

    RIGHT_BRACKET  shift, and go to state 278
    COMMA          shift, and go to state 279


State 255

  141 type_list: type .
  167 type: type . ASTERISK
  168 type_list: type .

    ASTERISK  shift, and go to state 116

    RIGHT_BRACKET  reduce using rule 141 (type_list)
    RIGHT_BRACKET  [reduce using rule 168 (type_list)]
    COMMA          reduce using rule 141 (type_list)
    COMMA          [reduce using rule 168 (type_list)]
    $default       reduce using rule 141 (type_list)


State 256

   30 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 30 (struct_def)


State 257

   33 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 33 (defer_statement)


State 258

   43 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 43 (scope)


State 259

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 260

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 261

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 262

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 263

  109 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  110             | id LEFT_BRACKET . RIGHT_BRACKET scope
  115 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  116              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 47
    INTEGER        shift, and go to state 48
    FLOAT          shift, and go to state 49
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 50
    RIGHT_BRACKET  shift, and go to state 280
    FSTOP          shift, and go to state 152
    ASTERISK       shift, and go to state 51
    AND            shift, and go to state 52
    TRUE           shift, and go to state 53
    FALSE          shift, and go to state 54
    NULLPTR        shift, and go to state 55

    assignable_statement  go to state 198
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    arg_list              go to state 153
    statement_list        go to state 199
    arg_pair              go to state 154
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 281


State 264

  130 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 282


State 265

  145 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 145 (arg_pair)


State 266

  109 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 109 (function_def)


State 267

  137 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 137 (arg_list)


State 268

  112 function_decl: type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 112 (function_decl)


State 269

  108 function_def: type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 108 (function_def)


State 270

  107 function_def: type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
  113 function_decl: type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 148
    SEMICOLON   shift, and go to state 283

    scope  go to state 284


State 271

  122 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  123           | type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 285

    $default  reduce using rule 122 (array_decl)


State 272

  139 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 139 (statement_list)


State 273

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 286
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 274

  148 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 148 (enum_parts)


State 275

  150 enum_part: id EQUAL constant_int .

    $default  reduce using rule 150 (enum_part)


State 276

  135 struct_pair: type id SEMICOLON .

    $default  reduce using rule 135 (struct_pair)


State 277

  136 struct_pair: type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 47
    INTEGER       shift, and go to state 48
    FLOAT         shift, and go to state 49
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 50
    ASTERISK      shift, and go to state 51
    AND           shift, and go to state 52
    TRUE          shift, and go to state 53
    FALSE         shift, and go to state 54
    NULLPTR       shift, and go to state 55

    assignable_statement  go to state 287
    unary_op              go to state 57
    binary_op             go to state 58
    member_op             go to state 59
    cast                  go to state 60
    increment             go to state 61
    decrement             go to state 62
    address_of            go to state 63
    dereference           go to state 64
    array_index           go to state 65
    add                   go to state 66
    subtract              go to state 67
    multiply              go to state 68
    divide                go to state 69
    equality              go to state 70
    inequality            go to state 71
    lesser                go to state 72
    greater               go to state 73
    lesser_or_equal       go to state 74
    greater_or_equal      go to state 75
    bitwise_and           go to state 76
    bitwise_or            go to state 77
    bitwise_left_shift    go to state 78
    bitwise_right_shift   go to state 79
    function_call         go to state 80
    id_or_constant        go to state 81
    constant              go to state 82
    constant_int          go to state 83
    constant_bool         go to state 84
    constant_enum_value   go to state 85
    id                    go to state 86
    type                  go to state 87


State 278

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 143 (func_ptr)


State 279

  142 type_list: type_list COMMA . type
  169          | type_list COMMA . type

    TYPE  shift, and go to state 2

    type  go to state 288


State 280

  110 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
  115 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 148

    $default  reduce using rule 115 (function_call)

    scope  go to state 226


State 281

  144 arg_pair: type . id
  164 constant_enum_value: type . COLON COLON id
  167 type: type . ASTERISK

    IDENTIFIER  shift, and go to state 1
    COLON       shift, and go to state 136
    ASTERISK    shift, and go to state 116

    id  go to state 230


State 282

  130 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 148

    scope  go to state 289


State 283

  113 function_decl: type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 113 (function_decl)


State 284

  107 function_def: type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 107 (function_def)


State 285

  123 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 290


State 286

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 291


State 287

  136 struct_pair: type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 292


State 288

  142 type_list: type_list COMMA type .
  167 type: type . ASTERISK
  169 type_list: type_list COMMA type .

    ASTERISK  shift, and go to state 116

    RIGHT_BRACKET  reduce using rule 142 (type_list)
    RIGHT_BRACKET  [reduce using rule 169 (type_list)]
    COMMA          reduce using rule 142 (type_list)
    COMMA          [reduce using rule 169 (type_list)]
    $default       reduce using rule 142 (type_list)


State 289

  130 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 130 (cond_block)


State 290

  123 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 47
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLPTR     shift, and go to state 55

    init_list            go to state 293
    id_or_constant       go to state 294
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 239
    type                 go to state 87


State 291

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 148

    scope  go to state 295


State 292

  136 struct_pair: type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 136 (struct_pair)


State 293

  123 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  125 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 296
    COMMA        shift, and go to state 297


State 294

  124 init_list: id_or_constant .

    $default  reduce using rule 124 (init_list)


State 295

  132 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 132 (for_loop)


State 296

  123 array_decl: type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 123 (array_decl)


State 297

  125 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 47
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLPTR     shift, and go to state 55

    id_or_constant       go to state 298
    constant             go to state 82
    constant_int         go to state 83
    constant_bool        go to state 84
    constant_enum_value  go to state 85
    id                   go to state 239
    type                 go to state 87


State 298

  125 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 125 (init_list)
