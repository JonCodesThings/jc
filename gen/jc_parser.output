Nonterminals useless in grammar

   modulo


Terminals unused in grammar

   PERCENT
   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   UNKNOWN


Rules useless in grammar

  178 modulo: id_or_constant PERCENT id_or_constant


Rules useless in parser due to conflicts

   28 statement: struct_decl


State 25 conflicts: 19 reduce/reduce
State 97 conflicts: 2 shift/reduce
State 126 conflicts: 1 shift/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | struct_decl
   21          | import
   22          | include_or_link
   23          | func_ptr
   24          | enum_def
   25          | union_def
   26          | flow_control
   27          | function_def
   28          | struct_decl

   29 alias_statement: ALIAS TYPE TYPE

   30 typedef_statement: TYPEDEF TYPE TYPE

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE
   32           | EXPORT struct_def

   33 struct_decl: STRUCT type

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE
   35          | EXPORT union_def

   36 defer_statement: DEFER assignable_statement

   37 assignable_statement: function_call
   38                     | unary_op
   39                     | binary_op
   40                     | member_op
   41                     | id_or_constant

   42 flow_control: if_statement
   43             | loop

   44 loop: while_loop
   45     | for_loop

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE RIGHT_BRACE

   48 import: IMPORT id

   49 unary_op: cast
   50         | increment
   51         | decrement
   52         | address_of
   53         | dereference
   54         | array_index

   55 binary_op: add
   56          | subtract
   57          | multiply
   58          | divide
   59          | equality
   60          | inequality
   61          | lesser
   62          | greater
   63          | lesser_or_equal
   64          | greater_or_equal
   65          | bitwise_and
   66          | bitwise_or
   67          | bitwise_left_shift
   68          | bitwise_right_shift

   69 assign_op: variable_assign

   70 member_op: id FSTOP id
   71          | id ARROW id

   72 variable_assign: id EQUAL assignable_statement
   73                | array_index EQUAL assignable_statement
   74                | member_op EQUAL assignable_statement

   75 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant

   76 increment: id_or_constant PLUS PLUS

   77 decrement: id_or_constant MINUS MINUS

   78 address_of: AND id

   79 dereference: ASTERISK id

   80 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   81            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   82 add: id_or_constant PLUS id_or_constant
   83    | id_or_constant PLUS unary_op

   84 subtract: id_or_constant MINUS id_or_constant
   85         | id_or_constant MINUS unary_op

   86 multiply: id_or_constant ASTERISK id_or_constant
   87         | id_or_constant ASTERISK unary_op

   88 divide: id_or_constant FORWARD_SLASH id_or_constant
   89       | id_or_constant FORWARD_SLASH unary_op

   90 equality: id_or_constant EQUAL_EQUAL id_or_constant
   91         | id_or_constant EQUAL_EQUAL unary_op

   92 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant
   93           | id_or_constant EXCLAMATION_EQUAL unary_op

   94 lesser: id_or_constant LESSER id_or_constant
   95       | id_or_constant LESSER unary_op

   96 greater: id_or_constant GREATER id_or_constant
   97        | id_or_constant GREATER unary_op

   98 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant
   99                | id_or_constant LESSER_EQUAL unary_op

  100 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant
  101                 | id_or_constant GREATER_EQUAL unary_op

  102 bitwise_and: id_or_constant AND id_or_constant
  103            | id_or_constant AND unary_op

  104 bitwise_or: id_or_constant OR id_or_constant
  105           | id_or_constant OR unary_op

  106 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant
  107                   | id_or_constant LEFT_SHIFT unary_op

  108 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant
  109                    | id_or_constant RIGHT_SHIFT unary_op

  110 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  111             | composited_type id LEFT_BRACKET RIGHT_BRACKET scope
  112             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  113             | id LEFT_BRACKET RIGHT_BRACKET scope
  114             | EXPORT function_def

  115 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  116              | composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  117              | EXPORT function_decl

  118 function_call: id LEFT_BRACKET RIGHT_BRACKET
  119              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  120 variable_decl: composited_type id
  121              | id COLON EQUAL assignable_statement
  122              | composited_type id EQUAL assignable_statement
  123              | array_decl
  124              | EXPORT variable_decl

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  126           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  127           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  128           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  129 init_list: id_or_constant
  130          | init_list COMMA id_or_constant

  131 return_statement: RETURN assignable_statement

  132 if_statement: cond_block
  133             | cond_block ELSE scope

  134 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  135           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  136 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  138 struct_list: struct_list struct_pair
  139            | struct_pair

  140 struct_pair: composited_type id SEMICOLON
  141            | composited_type id EQUAL assignable_statement SEMICOLON

  142 arg_list: arg_list COMMA arg_pair
  143         | arg_pair

  144 statement_list: statement_list COMMA assignable_statement
  145               | assignable_statement

  146 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET
  147         | EXPORT func_ptr

  148 arg_pair: composited_type id
  149         | FSTOP FSTOP FSTOP

  150 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE
  151         | EXPORT enum_def

  152 enum_parts: enum_part
  153           | enum_parts COMMA enum_part

  154 enum_part: id
  155          | id EQUAL constant_int

  156 id_or_constant: id
  157               | constant

  158 include_or_link: INCLUDE STRING
  159                | LINK STRING

  160 constant: constant_int
  161         | constant_enum_value
  162         | constant_bool
  163         | FLOAT
  164         | STRING
  165         | NULLPTR

  166 constant_int: INTEGER

  167 constant_bool: TRUE
  168              | FALSE

  169 constant_enum_value: type COLON COLON id

  170 id: IDENTIFIER

  171 type: TYPE

  172 composited_type: type
  173                | MUT composited_type
  174                | composited_type ASTERISK
  175                | composited_type MUT

  176 type_list: composited_type
  177          | type_list COMMA composited_type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 170
STRING (259) 158 159 164
INTEGER (260) 166
FLOAT (261) 163
TYPE (262) 29 30 171
LEFT_BRACKET (263) 75 110 111 112 113 115 116 118 119 134 135 136 137
    146
RIGHT_BRACKET (264) 75 110 111 112 113 115 116 118 119 134 135 136
    137 146
LEFT_BRACE (265) 31 34 46 47 126 128 150
RIGHT_BRACE (266) 31 34 46 47 126 128 150
LEFT_SQUARE_BRACKET (267) 80 81 125 126 127 128
RIGHT_SQUARE_BRACKET (268) 80 81 125 126 127 128
COMMA (269) 130 142 144 153 177
FSTOP (270) 70 149
SEMICOLON (271) 5 8 9 11 115 116 137 140 141
COLON (272) 121 169
PLUS (273) 76 82 83
MINUS (274) 77 84 85
ASTERISK (275) 79 86 87 174
FORWARD_SLASH (276) 88 89
PERCENT (277)
EQUAL (278) 72 73 74 121 122 126 128 141 155
EQUAL_EQUAL (279) 90 91
EXCLAMATION (280)
EXCLAMATION_EQUAL (281) 92 93
GREATER (282) 96 97
GREATER_EQUAL (283) 100 101
LESSER (284) 94 95
LESSER_EQUAL (285) 98 99
AND (286) 78 102 103
AND_AND (287)
OR (288) 104 105
OR_OR (289)
LEFT_SHIFT (290) 106 107
RIGHT_SHIFT (291) 108 109
RETURN (292) 131
DEFER (293) 36
IF (294) 134 135
ELSE (295) 133 135
FOR (296) 137
WHILE (297) 136
TYPEDEF (298) 30
ALIAS (299) 29
AUTO (300)
ENUM (301) 150
UNION (302) 34
TRUE (303) 167
FALSE (304) 168
MUT (305) 127 128 173 175
EXTERN (306)
IMPORT (307) 48
EXPORT (308) 32 35 114 117 124 147 151
INCLUDE (309) 158
LINK (310) 159
FUNC_PTR (311) 146
NULLPTR (312) 165
STRUCT (313) 31 33
ARROW (314) 71
UNKNOWN (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
module (62)
    on left: 1, on right: 0
statements (63)
    on left: 2 3, on right: 1 3
node_setup (64)
    on left: 4 5, on right: 2 3
semicoloned_statements (65)
    on left: 6 7, on right: 7 46
semicoloned_statement (66)
    on left: 8 9 10 11 12, on right: 6 7
statement (67)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    4 5 8 137
alias_statement (68)
    on left: 29, on right: 17
typedef_statement (69)
    on left: 30, on right: 18
struct_def (70)
    on left: 31 32, on right: 19 32
struct_decl (71)
    on left: 33, on right: 20 28
union_def (72)
    on left: 34 35, on right: 25 35
defer_statement (73)
    on left: 36, on right: 11
assignable_statement (74)
    on left: 37 38 39 40 41, on right: 9 36 72 73 74 121 122 131 134
    135 136 137 141 144 145
flow_control (75)
    on left: 42 43, on right: 10 26
loop (76)
    on left: 44 45, on right: 43
scope (77)
    on left: 46 47, on right: 110 111 112 113 133 134 135 136 137
import (78)
    on left: 48, on right: 21
unary_op (79)
    on left: 49 50 51 52 53 54, on right: 38 83 85 87 89 91 93 95 97
    99 101 103 105 107 109
binary_op (80)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67 68, on right: 39
assign_op (81)
    on left: 69, on right: 16
member_op (82)
    on left: 70 71, on right: 40 74
variable_assign (83)
    on left: 72 73 74, on right: 69
cast (84)
    on left: 75, on right: 49
increment (85)
    on left: 76, on right: 50
decrement (86)
    on left: 77, on right: 51
address_of (87)
    on left: 78, on right: 52
dereference (88)
    on left: 79, on right: 53
array_index (89)
    on left: 80 81, on right: 54 73
add (90)
    on left: 82 83, on right: 55
subtract (91)
    on left: 84 85, on right: 56
multiply (92)
    on left: 86 87, on right: 57
divide (93)
    on left: 88 89, on right: 58
equality (94)
    on left: 90 91, on right: 59
inequality (95)
    on left: 92 93, on right: 60
lesser (96)
    on left: 94 95, on right: 61
greater (97)
    on left: 96 97, on right: 62
lesser_or_equal (98)
    on left: 98 99, on right: 63
greater_or_equal (99)
    on left: 100 101, on right: 64
bitwise_and (100)
    on left: 102 103, on right: 65
bitwise_or (101)
    on left: 104 105, on right: 66
bitwise_left_shift (102)
    on left: 106 107, on right: 67
bitwise_right_shift (103)
    on left: 108 109, on right: 68
function_def (104)
    on left: 110 111 112 113 114, on right: 12 27 114
function_decl (105)
    on left: 115 116 117, on right: 14 117
function_call (106)
    on left: 118 119, on right: 37
variable_decl (107)
    on left: 120 121 122 123 124, on right: 15 124
array_decl (108)
    on left: 125 126 127 128, on right: 123
init_list (109)
    on left: 129 130, on right: 126 128 130
return_statement (110)
    on left: 131, on right: 13
if_statement (111)
    on left: 132 133, on right: 42
cond_block (112)
    on left: 134 135, on right: 132 133 135
while_loop (113)
    on left: 136, on right: 44
for_loop (114)
    on left: 137, on right: 45
struct_list (115)
    on left: 138 139, on right: 31 34 138
struct_pair (116)
    on left: 140 141, on right: 138 139
arg_list (117)
    on left: 142 143, on right: 110 112 116 142
statement_list (118)
    on left: 144 145, on right: 119 144
func_ptr (119)
    on left: 146 147, on right: 23 147
arg_pair (120)
    on left: 148 149, on right: 142 143
enum_def (121)
    on left: 150 151, on right: 24 151
enum_parts (122)
    on left: 152 153, on right: 150 153
enum_part (123)
    on left: 154 155, on right: 152 153
id_or_constant (124)
    on left: 156 157, on right: 41 75 76 77 82 83 84 85 86 87 88 89
    90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108
    109 129 130
include_or_link (125)
    on left: 158 159, on right: 22
constant (126)
    on left: 160 161 162 163 164 165, on right: 157
constant_int (127)
    on left: 166, on right: 80 125 126 127 128 155 160
constant_bool (128)
    on left: 167 168, on right: 162
constant_enum_value (129)
    on left: 169, on right: 161
id (130)
    on left: 170, on right: 48 70 71 72 78 79 80 81 110 111 112 113
    115 116 118 119 120 121 122 125 126 127 128 140 141 148 154 155
    156 169
type (131)
    on left: 171, on right: 31 33 34 146 150 169 172
composited_type (132)
    on left: 172 173 174 175, on right: 75 110 111 115 116 120 122
    125 126 127 128 140 141 148 173 174 175 176 177
type_list (133)
    on left: 176 177, on right: 146 177


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    module             go to state 18
    statements         go to state 19
    node_setup         go to state 20
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 1

  170 id: IDENTIFIER .

    $default  reduce using rule 170 (id)


State 2

  171 type: TYPE .

    $default  reduce using rule 171 (type)


State 3

  131 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 58
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 4

  134 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 90


State 5

  137 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 91


State 6

  136 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 92


State 7

   30 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 93


State 8

   29 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 94


State 9

  150 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 95


State 10

   34 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 96


State 11

  173 composited_type: MUT . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 97


State 12

   48 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 98


State 13

   32 struct_def: EXPORT . struct_def
   35 union_def: EXPORT . union_def
  114 function_def: EXPORT . function_def
  117 function_decl: EXPORT . function_decl
  124 variable_decl: EXPORT . variable_decl
  147 func_ptr: EXPORT . func_ptr
  151 enum_def: EXPORT . enum_def

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    EXPORT      shift, and go to state 13
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 99

    struct_def       go to state 100
    union_def        go to state 101
    function_def     go to state 102
    function_decl    go to state 103
    variable_decl    go to state 104
    array_decl       go to state 37
    func_ptr         go to state 105
    enum_def         go to state 106
    id               go to state 107
    type             go to state 47
    composited_type  go to state 48


State 14

  158 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 108


State 15

  159 include_or_link: LINK . STRING

    STRING  shift, and go to state 109


State 16

  146 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 110


State 17

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 111


State 18

    0 $accept: module . $end

    $end  shift, and go to state 112


State 19

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    $default  reduce using rule 1 (module)

    node_setup         go to state 113
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 20

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 21

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 114

    $default  reduce using rule 4 (node_setup)


State 22

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 23

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 24

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 25

   20 statement: struct_decl .
   28          | struct_decl .

    $end        reduce using rule 20 (statement)
    $end        [reduce using rule 28 (statement)]
    IDENTIFIER  reduce using rule 20 (statement)
    IDENTIFIER  [reduce using rule 28 (statement)]
    TYPE        reduce using rule 20 (statement)
    TYPE        [reduce using rule 28 (statement)]
    SEMICOLON   reduce using rule 20 (statement)
    SEMICOLON   [reduce using rule 28 (statement)]
    RETURN      reduce using rule 20 (statement)
    RETURN      [reduce using rule 28 (statement)]
    IF          reduce using rule 20 (statement)
    IF          [reduce using rule 28 (statement)]
    FOR         reduce using rule 20 (statement)
    FOR         [reduce using rule 28 (statement)]
    WHILE       reduce using rule 20 (statement)
    WHILE       [reduce using rule 28 (statement)]
    TYPEDEF     reduce using rule 20 (statement)
    TYPEDEF     [reduce using rule 28 (statement)]
    ALIAS       reduce using rule 20 (statement)
    ALIAS       [reduce using rule 28 (statement)]
    ENUM        reduce using rule 20 (statement)
    ENUM        [reduce using rule 28 (statement)]
    UNION       reduce using rule 20 (statement)
    UNION       [reduce using rule 28 (statement)]
    MUT         reduce using rule 20 (statement)
    MUT         [reduce using rule 28 (statement)]
    IMPORT      reduce using rule 20 (statement)
    IMPORT      [reduce using rule 28 (statement)]
    EXPORT      reduce using rule 20 (statement)
    EXPORT      [reduce using rule 28 (statement)]
    INCLUDE     reduce using rule 20 (statement)
    INCLUDE     [reduce using rule 28 (statement)]
    LINK        reduce using rule 20 (statement)
    LINK        [reduce using rule 28 (statement)]
    FUNC_PTR    reduce using rule 20 (statement)
    FUNC_PTR    [reduce using rule 28 (statement)]
    STRUCT      reduce using rule 20 (statement)
    STRUCT      [reduce using rule 28 (statement)]
    $default    reduce using rule 20 (statement)


State 26

   25 statement: union_def .

    $default  reduce using rule 25 (statement)


State 27

   26 statement: flow_control .

    $default  reduce using rule 26 (statement)


State 28

   43 flow_control: loop .

    $default  reduce using rule 43 (flow_control)


State 29

   21 statement: import .

    $default  reduce using rule 21 (statement)


State 30

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 31

   74 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 115


State 32

   69 assign_op: variable_assign .

    $default  reduce using rule 69 (assign_op)


State 33

   73 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 116


State 34

   27 statement: function_def .

    $default  reduce using rule 27 (statement)


State 35

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 36

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 37

  123 variable_decl: array_decl .

    $default  reduce using rule 123 (variable_decl)


State 38

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 39

   42 flow_control: if_statement .

    $default  reduce using rule 42 (flow_control)


State 40

  132 if_statement: cond_block .
  133             | cond_block . ELSE scope
  135 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 117

    $default  reduce using rule 132 (if_statement)


State 41

   44 loop: while_loop .

    $default  reduce using rule 44 (loop)


State 42

   45 loop: for_loop .

    $default  reduce using rule 45 (loop)


State 43

   23 statement: func_ptr .

    $default  reduce using rule 23 (statement)


State 44

   24 statement: enum_def .

    $default  reduce using rule 24 (statement)


State 45

   22 statement: include_or_link .

    $default  reduce using rule 22 (statement)


State 46

   70 member_op: id . FSTOP id
   71          | id . ARROW id
   72 variable_assign: id . EQUAL assignable_statement
   80 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   81            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  112 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  113             | id . LEFT_BRACKET RIGHT_BRACKET scope
  121 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 118
    LEFT_SQUARE_BRACKET  shift, and go to state 119
    FSTOP                shift, and go to state 120
    COLON                shift, and go to state 121
    EQUAL                shift, and go to state 122
    ARROW                shift, and go to state 123


State 47

  172 composited_type: type .

    $default  reduce using rule 172 (composited_type)


State 48

  110 function_def: composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  111             | composited_type . id LEFT_BRACKET RIGHT_BRACKET scope
  115 function_decl: composited_type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  116              | composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  120 variable_decl: composited_type . id
  122              | composited_type . id EQUAL assignable_statement
  125 array_decl: composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  126           | composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  127           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  128           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  174 composited_type: composited_type . ASTERISK
  175                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 124
    MUT         shift, and go to state 125

    id  go to state 126


State 49

  164 constant: STRING .

    $default  reduce using rule 164 (constant)


State 50

  166 constant_int: INTEGER .

    $default  reduce using rule 166 (constant_int)


State 51

  163 constant: FLOAT .

    $default  reduce using rule 163 (constant)


State 52

   75 cast: LEFT_BRACKET . composited_type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 127


State 53

   79 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 128


State 54

   78 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 129


State 55

  167 constant_bool: TRUE .

    $default  reduce using rule 167 (constant_bool)


State 56

  168 constant_bool: FALSE .

    $default  reduce using rule 168 (constant_bool)


State 57

  165 constant: NULLPTR .

    $default  reduce using rule 165 (constant)


State 58

  131 return_statement: RETURN assignable_statement .

    $default  reduce using rule 131 (return_statement)


State 59

   38 assignable_statement: unary_op .

    $default  reduce using rule 38 (assignable_statement)


State 60

   39 assignable_statement: binary_op .

    $default  reduce using rule 39 (assignable_statement)


State 61

   40 assignable_statement: member_op .

    $default  reduce using rule 40 (assignable_statement)


State 62

   49 unary_op: cast .

    $default  reduce using rule 49 (unary_op)


State 63

   50 unary_op: increment .

    $default  reduce using rule 50 (unary_op)


State 64

   51 unary_op: decrement .

    $default  reduce using rule 51 (unary_op)


State 65

   52 unary_op: address_of .

    $default  reduce using rule 52 (unary_op)


State 66

   53 unary_op: dereference .

    $default  reduce using rule 53 (unary_op)


State 67

   54 unary_op: array_index .

    $default  reduce using rule 54 (unary_op)


State 68

   55 binary_op: add .

    $default  reduce using rule 55 (binary_op)


State 69

   56 binary_op: subtract .

    $default  reduce using rule 56 (binary_op)


State 70

   57 binary_op: multiply .

    $default  reduce using rule 57 (binary_op)


State 71

   58 binary_op: divide .

    $default  reduce using rule 58 (binary_op)


State 72

   59 binary_op: equality .

    $default  reduce using rule 59 (binary_op)


State 73

   60 binary_op: inequality .

    $default  reduce using rule 60 (binary_op)


State 74

   61 binary_op: lesser .

    $default  reduce using rule 61 (binary_op)


State 75

   62 binary_op: greater .

    $default  reduce using rule 62 (binary_op)


State 76

   63 binary_op: lesser_or_equal .

    $default  reduce using rule 63 (binary_op)


State 77

   64 binary_op: greater_or_equal .

    $default  reduce using rule 64 (binary_op)


State 78

   65 binary_op: bitwise_and .

    $default  reduce using rule 65 (binary_op)


State 79

   66 binary_op: bitwise_or .

    $default  reduce using rule 66 (binary_op)


State 80

   67 binary_op: bitwise_left_shift .

    $default  reduce using rule 67 (binary_op)


State 81

   68 binary_op: bitwise_right_shift .

    $default  reduce using rule 68 (binary_op)


State 82

   37 assignable_statement: function_call .

    $default  reduce using rule 37 (assignable_statement)


State 83

   41 assignable_statement: id_or_constant .
   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   82 add: id_or_constant . PLUS id_or_constant
   83    | id_or_constant . PLUS unary_op
   84 subtract: id_or_constant . MINUS id_or_constant
   85         | id_or_constant . MINUS unary_op
   86 multiply: id_or_constant . ASTERISK id_or_constant
   87         | id_or_constant . ASTERISK unary_op
   88 divide: id_or_constant . FORWARD_SLASH id_or_constant
   89       | id_or_constant . FORWARD_SLASH unary_op
   90 equality: id_or_constant . EQUAL_EQUAL id_or_constant
   91         | id_or_constant . EQUAL_EQUAL unary_op
   92 inequality: id_or_constant . EXCLAMATION_EQUAL id_or_constant
   93           | id_or_constant . EXCLAMATION_EQUAL unary_op
   94 lesser: id_or_constant . LESSER id_or_constant
   95       | id_or_constant . LESSER unary_op
   96 greater: id_or_constant . GREATER id_or_constant
   97        | id_or_constant . GREATER unary_op
   98 lesser_or_equal: id_or_constant . LESSER_EQUAL id_or_constant
   99                | id_or_constant . LESSER_EQUAL unary_op
  100 greater_or_equal: id_or_constant . GREATER_EQUAL id_or_constant
  101                 | id_or_constant . GREATER_EQUAL unary_op
  102 bitwise_and: id_or_constant . AND id_or_constant
  103            | id_or_constant . AND unary_op
  104 bitwise_or: id_or_constant . OR id_or_constant
  105           | id_or_constant . OR unary_op
  106 bitwise_left_shift: id_or_constant . LEFT_SHIFT id_or_constant
  107                   | id_or_constant . LEFT_SHIFT unary_op
  108 bitwise_right_shift: id_or_constant . RIGHT_SHIFT id_or_constant
  109                    | id_or_constant . RIGHT_SHIFT unary_op

    PLUS               shift, and go to state 130
    MINUS              shift, and go to state 131
    ASTERISK           shift, and go to state 132
    FORWARD_SLASH      shift, and go to state 133
    EQUAL_EQUAL        shift, and go to state 134
    EXCLAMATION_EQUAL  shift, and go to state 135
    GREATER            shift, and go to state 136
    GREATER_EQUAL      shift, and go to state 137
    LESSER             shift, and go to state 138
    LESSER_EQUAL       shift, and go to state 139
    AND                shift, and go to state 140
    OR                 shift, and go to state 141
    LEFT_SHIFT         shift, and go to state 142
    RIGHT_SHIFT        shift, and go to state 143

    $default  reduce using rule 41 (assignable_statement)


State 84

  157 id_or_constant: constant .

    $default  reduce using rule 157 (id_or_constant)


State 85

  160 constant: constant_int .

    $default  reduce using rule 160 (constant)


State 86

  162 constant: constant_bool .

    $default  reduce using rule 162 (constant)


State 87

  161 constant: constant_enum_value .

    $default  reduce using rule 161 (constant)


State 88

   70 member_op: id . FSTOP id
   71          | id . ARROW id
   80 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   81            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  118 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  119              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  156 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 144
    LEFT_SQUARE_BRACKET  shift, and go to state 119
    FSTOP                shift, and go to state 120
    ARROW                shift, and go to state 123

    $default  reduce using rule 156 (id_or_constant)


State 89

  169 constant_enum_value: type . COLON COLON id

    COLON  shift, and go to state 145


State 90

  134 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 146
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 91

  137 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    statement          go to state 147
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 92

  136 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 148
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 93

   30 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 149


State 94

   29 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 150


State 95

  150 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 151


State 96

   34 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 152


State 97

  173 composited_type: MUT composited_type .
  174                | composited_type . ASTERISK
  175                | composited_type . MUT

    ASTERISK  shift, and go to state 124
    MUT       shift, and go to state 125

    ASTERISK  [reduce using rule 173 (composited_type)]
    MUT       [reduce using rule 173 (composited_type)]
    $default  reduce using rule 173 (composited_type)


State 98

   48 import: IMPORT id .

    $default  reduce using rule 48 (import)


State 99

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 153


State 100

   32 struct_def: EXPORT struct_def .

    $default  reduce using rule 32 (struct_def)


State 101

   35 union_def: EXPORT union_def .

    $default  reduce using rule 35 (union_def)


State 102

  114 function_def: EXPORT function_def .

    $default  reduce using rule 114 (function_def)


State 103

  117 function_decl: EXPORT function_decl .

    $default  reduce using rule 117 (function_decl)


State 104

  124 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 124 (variable_decl)


State 105

  147 func_ptr: EXPORT func_ptr .

    $default  reduce using rule 147 (func_ptr)


State 106

  151 enum_def: EXPORT enum_def .

    $default  reduce using rule 151 (enum_def)


State 107

  112 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  113             | id . LEFT_BRACKET RIGHT_BRACKET scope
  121 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 118
    COLON         shift, and go to state 121


State 108

  158 include_or_link: INCLUDE STRING .

    $default  reduce using rule 158 (include_or_link)


State 109

  159 include_or_link: LINK STRING .

    $default  reduce using rule 159 (include_or_link)


State 110

  146 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 154


State 111

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT type .

    LEFT_BRACE  shift, and go to state 155

    $default  reduce using rule 33 (struct_decl)


State 112

    0 $accept: module $end .

    $default  accept


State 113

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 114

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 115

   74 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 156
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 116

   73 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 157
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 117

  133 if_statement: cond_block ELSE . scope
  135 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 158
    IF          shift, and go to state 159

    scope  go to state 160


State 118

  112 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  113             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 161
    FSTOP          shift, and go to state 162
    MUT            shift, and go to state 11

    arg_list         go to state 163
    arg_pair         go to state 164
    type             go to state 47
    composited_type  go to state 165


State 119

   80 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   81            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 50

    constant_int  go to state 166
    id            go to state 167


State 120

   70 member_op: id FSTOP . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 168


State 121

  121 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 169


State 122

   72 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 170
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 123

   71 member_op: id ARROW . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 171


State 124

  174 composited_type: composited_type ASTERISK .

    $default  reduce using rule 174 (composited_type)


State 125

  175 composited_type: composited_type MUT .

    $default  reduce using rule 175 (composited_type)


State 126

  110 function_def: composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  111             | composited_type id . LEFT_BRACKET RIGHT_BRACKET scope
  115 function_decl: composited_type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  116              | composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  120 variable_decl: composited_type id .
  122              | composited_type id . EQUAL assignable_statement
  125 array_decl: composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  126           | composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  127           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  128           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 172
    LEFT_SQUARE_BRACKET  shift, and go to state 173
    EQUAL                shift, and go to state 174
    MUT                  shift, and go to state 175

    MUT       [reduce using rule 120 (variable_decl)]
    $default  reduce using rule 120 (variable_decl)


State 127

   75 cast: LEFT_BRACKET composited_type . RIGHT_BRACKET id_or_constant
  174 composited_type: composited_type . ASTERISK
  175                | composited_type . MUT

    RIGHT_BRACKET  shift, and go to state 176
    ASTERISK       shift, and go to state 124
    MUT            shift, and go to state 125


State 128

   79 dereference: ASTERISK id .

    $default  reduce using rule 79 (dereference)


State 129

   78 address_of: AND id .

    $default  reduce using rule 78 (address_of)


State 130

   76 increment: id_or_constant PLUS . PLUS
   82 add: id_or_constant PLUS . id_or_constant
   83    | id_or_constant PLUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 177
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 178
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 179
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 131

   77 decrement: id_or_constant MINUS . MINUS
   84 subtract: id_or_constant MINUS . id_or_constant
   85         | id_or_constant MINUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    MINUS         shift, and go to state 181
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 182
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 183
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 132

   86 multiply: id_or_constant ASTERISK . id_or_constant
   87         | id_or_constant ASTERISK . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 184
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 185
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 133

   88 divide: id_or_constant FORWARD_SLASH . id_or_constant
   89       | id_or_constant FORWARD_SLASH . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 186
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 187
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 134

   90 equality: id_or_constant EQUAL_EQUAL . id_or_constant
   91         | id_or_constant EQUAL_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 188
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 189
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 135

   92 inequality: id_or_constant EXCLAMATION_EQUAL . id_or_constant
   93           | id_or_constant EXCLAMATION_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 190
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 191
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 136

   96 greater: id_or_constant GREATER . id_or_constant
   97        | id_or_constant GREATER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 192
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 193
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 137

  100 greater_or_equal: id_or_constant GREATER_EQUAL . id_or_constant
  101                 | id_or_constant GREATER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 194
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 195
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 138

   94 lesser: id_or_constant LESSER . id_or_constant
   95       | id_or_constant LESSER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 196
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 197
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 139

   98 lesser_or_equal: id_or_constant LESSER_EQUAL . id_or_constant
   99                | id_or_constant LESSER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 198
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 199
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 140

  102 bitwise_and: id_or_constant AND . id_or_constant
  103            | id_or_constant AND . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 200
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 201
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 141

  104 bitwise_or: id_or_constant OR . id_or_constant
  105           | id_or_constant OR . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 202
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 203
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 142

  106 bitwise_left_shift: id_or_constant LEFT_SHIFT . id_or_constant
  107                   | id_or_constant LEFT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 204
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 205
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 143

  108 bitwise_right_shift: id_or_constant RIGHT_SHIFT . id_or_constant
  109                    | id_or_constant RIGHT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 206
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 207
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 180
    type                 go to state 89


State 144

  118 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  119              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 208
    ASTERISK       shift, and go to state 53
    AND            shift, and go to state 54
    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    NULLPTR        shift, and go to state 57

    assignable_statement  go to state 209
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    statement_list        go to state 210
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 145

  169 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 211


State 146

  134 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 212


State 147

  137 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 213


State 148

  136 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 214


State 149

   30 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 30 (typedef_statement)


State 150

   29 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 29 (alias_statement)


State 151

  150 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 215
    enum_part   go to state 216
    id          go to state 217


State 152

   34 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 218
    struct_pair      go to state 219
    type             go to state 47
    composited_type  go to state 220


State 153

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 155


State 154

  146 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 221


State 155

   31 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 222
    struct_pair      go to state 219
    type             go to state 47
    composited_type  go to state 220


State 156

   74 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 74 (variable_assign)


State 157

   73 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 73 (variable_assign)


State 158

   46 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 223
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 224
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 57
    STRUCT        shift, and go to state 17

    semicoloned_statements  go to state 225
    semicoloned_statement   go to state 226
    statement               go to state 227
    alias_statement         go to state 22
    typedef_statement       go to state 23
    struct_def              go to state 24
    struct_decl             go to state 25
    union_def               go to state 26
    defer_statement         go to state 228
    assignable_statement    go to state 229
    flow_control            go to state 230
    loop                    go to state 28
    import                  go to state 29
    unary_op                go to state 59
    binary_op               go to state 60
    assign_op               go to state 30
    member_op               go to state 231
    variable_assign         go to state 32
    cast                    go to state 62
    increment               go to state 63
    decrement               go to state 64
    address_of              go to state 65
    dereference             go to state 66
    array_index             go to state 232
    add                     go to state 68
    subtract                go to state 69
    multiply                go to state 70
    divide                  go to state 71
    equality                go to state 72
    inequality              go to state 73
    lesser                  go to state 74
    greater                 go to state 75
    lesser_or_equal         go to state 76
    greater_or_equal        go to state 77
    bitwise_and             go to state 78
    bitwise_or              go to state 79
    bitwise_left_shift      go to state 80
    bitwise_right_shift     go to state 81
    function_def            go to state 233
    function_decl           go to state 35
    function_call           go to state 82
    variable_decl           go to state 36
    array_decl              go to state 37
    return_statement        go to state 38
    if_statement            go to state 39
    cond_block              go to state 40
    while_loop              go to state 41
    for_loop                go to state 42
    func_ptr                go to state 43
    enum_def                go to state 44
    id_or_constant          go to state 83
    include_or_link         go to state 45
    constant                go to state 84
    constant_int            go to state 85
    constant_bool           go to state 86
    constant_enum_value     go to state 87
    id                      go to state 234
    type                    go to state 235
    composited_type         go to state 48


State 159

  135 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 236


State 160

  133 if_statement: cond_block ELSE scope .

    $default  reduce using rule 133 (if_statement)


State 161

  113 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 237


State 162

  149 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 238


State 163

  112 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  142 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 239
    COMMA          shift, and go to state 240


State 164

  143 arg_list: arg_pair .

    $default  reduce using rule 143 (arg_list)


State 165

  148 arg_pair: composited_type . id
  174 composited_type: composited_type . ASTERISK
  175                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 124
    MUT         shift, and go to state 125

    id  go to state 241


State 166

   80 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 242


State 167

   81 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 243


State 168

   70 member_op: id FSTOP id .

    $default  reduce using rule 70 (member_op)


State 169

  121 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 244
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 170

   72 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 72 (variable_assign)


State 171

   71 member_op: id ARROW id .

    $default  reduce using rule 71 (member_op)


State 172

  110 function_def: composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  111             | composited_type id LEFT_BRACKET . RIGHT_BRACKET scope
  115 function_decl: composited_type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
  116              | composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 245
    FSTOP          shift, and go to state 162
    MUT            shift, and go to state 11

    arg_list         go to state 246
    arg_pair         go to state 164
    type             go to state 47
    composited_type  go to state 165


State 173

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  126           | composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 247


State 174

  122 variable_decl: composited_type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 248
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 175

  127 array_decl: composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  128           | composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_SQUARE_BRACKET  shift, and go to state 249


State 176

   75 cast: LEFT_BRACKET composited_type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    id_or_constant       go to state 250
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 251
    type                 go to state 89


State 177

   76 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 76 (increment)


State 178

   83 add: id_or_constant PLUS unary_op .

    $default  reduce using rule 83 (add)


State 179

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   82 add: id_or_constant PLUS id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 82 (add)


State 180

   80 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   81            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  156 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 119

    $default  reduce using rule 156 (id_or_constant)


State 181

   77 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 77 (decrement)


State 182

   85 subtract: id_or_constant MINUS unary_op .

    $default  reduce using rule 85 (subtract)


State 183

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   84 subtract: id_or_constant MINUS id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 84 (subtract)


State 184

   87 multiply: id_or_constant ASTERISK unary_op .

    $default  reduce using rule 87 (multiply)


State 185

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   86 multiply: id_or_constant ASTERISK id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 86 (multiply)


State 186

   89 divide: id_or_constant FORWARD_SLASH unary_op .

    $default  reduce using rule 89 (divide)


State 187

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   88 divide: id_or_constant FORWARD_SLASH id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 88 (divide)


State 188

   91 equality: id_or_constant EQUAL_EQUAL unary_op .

    $default  reduce using rule 91 (equality)


State 189

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   90 equality: id_or_constant EQUAL_EQUAL id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 90 (equality)


State 190

   93 inequality: id_or_constant EXCLAMATION_EQUAL unary_op .

    $default  reduce using rule 93 (inequality)


State 191

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   92 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 92 (inequality)


State 192

   97 greater: id_or_constant GREATER unary_op .

    $default  reduce using rule 97 (greater)


State 193

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   96 greater: id_or_constant GREATER id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 96 (greater)


State 194

  101 greater_or_equal: id_or_constant GREATER_EQUAL unary_op .

    $default  reduce using rule 101 (greater_or_equal)


State 195

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
  100 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 100 (greater_or_equal)


State 196

   95 lesser: id_or_constant LESSER unary_op .

    $default  reduce using rule 95 (lesser)


State 197

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   94 lesser: id_or_constant LESSER id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 94 (lesser)


State 198

   99 lesser_or_equal: id_or_constant LESSER_EQUAL unary_op .

    $default  reduce using rule 99 (lesser_or_equal)


State 199

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
   98 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 98 (lesser_or_equal)


State 200

  103 bitwise_and: id_or_constant AND unary_op .

    $default  reduce using rule 103 (bitwise_and)


State 201

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
  102 bitwise_and: id_or_constant AND id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 102 (bitwise_and)


State 202

  105 bitwise_or: id_or_constant OR unary_op .

    $default  reduce using rule 105 (bitwise_or)


State 203

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
  104 bitwise_or: id_or_constant OR id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 104 (bitwise_or)


State 204

  107 bitwise_left_shift: id_or_constant LEFT_SHIFT unary_op .

    $default  reduce using rule 107 (bitwise_left_shift)


State 205

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
  106 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 106 (bitwise_left_shift)


State 206

  109 bitwise_right_shift: id_or_constant RIGHT_SHIFT unary_op .

    $default  reduce using rule 109 (bitwise_right_shift)


State 207

   76 increment: id_or_constant . PLUS PLUS
   77 decrement: id_or_constant . MINUS MINUS
  108 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant .

    PLUS   shift, and go to state 252
    MINUS  shift, and go to state 253

    $default  reduce using rule 108 (bitwise_right_shift)


State 208

  118 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 118 (function_call)


State 209

  145 statement_list: assignable_statement .

    $default  reduce using rule 145 (statement_list)


State 210

  119 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  144 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 254
    COMMA          shift, and go to state 255


State 211

  169 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 256


State 212

  134 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 257


State 213

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 258
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 214

  136 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 259


State 215

  150 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  153 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 260
    COMMA        shift, and go to state 261


State 216

  152 enum_parts: enum_part .

    $default  reduce using rule 152 (enum_parts)


State 217

  154 enum_part: id .
  155          | id . EQUAL constant_int

    EQUAL  shift, and go to state 262

    $default  reduce using rule 154 (enum_part)


State 218

   34 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  138 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 263
    MUT          shift, and go to state 11

    struct_pair      go to state 264
    type             go to state 47
    composited_type  go to state 220


State 219

  139 struct_list: struct_pair .

    $default  reduce using rule 139 (struct_list)


State 220

  140 struct_pair: composited_type . id SEMICOLON
  141            | composited_type . id EQUAL assignable_statement SEMICOLON
  174 composited_type: composited_type . ASTERISK
  175                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 124
    MUT         shift, and go to state 125

    id  go to state 265


State 221

  146 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 266
    type_list        go to state 267


State 222

   31 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  138 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 268
    MUT          shift, and go to state 11

    struct_pair      go to state 264
    type             go to state 47
    composited_type  go to state 220


State 223

   47 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 47 (scope)


State 224

   36 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 269
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 225

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   46 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 270
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 224
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 57
    STRUCT        shift, and go to state 17

    semicoloned_statement  go to state 271
    statement              go to state 227
    alias_statement        go to state 22
    typedef_statement      go to state 23
    struct_def             go to state 24
    struct_decl            go to state 25
    union_def              go to state 26
    defer_statement        go to state 228
    assignable_statement   go to state 229
    flow_control           go to state 230
    loop                   go to state 28
    import                 go to state 29
    unary_op               go to state 59
    binary_op              go to state 60
    assign_op              go to state 30
    member_op              go to state 231
    variable_assign        go to state 32
    cast                   go to state 62
    increment              go to state 63
    decrement              go to state 64
    address_of             go to state 65
    dereference            go to state 66
    array_index            go to state 232
    add                    go to state 68
    subtract               go to state 69
    multiply               go to state 70
    divide                 go to state 71
    equality               go to state 72
    inequality             go to state 73
    lesser                 go to state 74
    greater                go to state 75
    lesser_or_equal        go to state 76
    greater_or_equal       go to state 77
    bitwise_and            go to state 78
    bitwise_or             go to state 79
    bitwise_left_shift     go to state 80
    bitwise_right_shift    go to state 81
    function_def           go to state 233
    function_decl          go to state 35
    function_call          go to state 82
    variable_decl          go to state 36
    array_decl             go to state 37
    return_statement       go to state 38
    if_statement           go to state 39
    cond_block             go to state 40
    while_loop             go to state 41
    for_loop               go to state 42
    func_ptr               go to state 43
    enum_def               go to state 44
    id_or_constant         go to state 83
    include_or_link        go to state 45
    constant               go to state 84
    constant_int           go to state 85
    constant_bool          go to state 86
    constant_enum_value    go to state 87
    id                     go to state 234
    type                   go to state 235
    composited_type        go to state 48


State 226

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 227

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 272


State 228

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 273


State 229

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 274


State 230

   10 semicoloned_statement: flow_control .
   26 statement: flow_control .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 231

   40 assignable_statement: member_op .
   74 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 115

    $default  reduce using rule 40 (assignable_statement)


State 232

   54 unary_op: array_index .
   73 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 116

    $default  reduce using rule 54 (unary_op)


State 233

   12 semicoloned_statement: function_def .
   27 statement: function_def .

    SEMICOLON  reduce using rule 27 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 234

   70 member_op: id . FSTOP id
   71          | id . ARROW id
   72 variable_assign: id . EQUAL assignable_statement
   80 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   81            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  112 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  113             | id . LEFT_BRACKET RIGHT_BRACKET scope
  118 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  119              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  121 variable_decl: id . COLON EQUAL assignable_statement
  156 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 275
    LEFT_SQUARE_BRACKET  shift, and go to state 119
    FSTOP                shift, and go to state 120
    COLON                shift, and go to state 121
    EQUAL                shift, and go to state 122
    ARROW                shift, and go to state 123

    $default  reduce using rule 156 (id_or_constant)


State 235

  169 constant_enum_value: type . COLON COLON id
  172 composited_type: type .

    COLON  shift, and go to state 145

    $default  reduce using rule 172 (composited_type)


State 236

  135 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 276
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 237

  113 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 113 (function_def)


State 238

  149 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 277


State 239

  112 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 278


State 240

  142 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 162
    MUT    shift, and go to state 11

    arg_pair         go to state 279
    type             go to state 47
    composited_type  go to state 165


State 241

  148 arg_pair: composited_type id .

    $default  reduce using rule 148 (arg_pair)


State 242

   80 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 80 (array_index)


State 243

   81 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 81 (array_index)


State 244

  121 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 121 (variable_decl)


State 245

  111 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET . scope
  115 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 158
    SEMICOLON   shift, and go to state 280

    scope  go to state 281


State 246

  110 function_def: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  116 function_decl: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  142 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 282
    COMMA          shift, and go to state 240


State 247

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  126           | composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 283


State 248

  122 variable_decl: composited_type id EQUAL assignable_statement .

    $default  reduce using rule 122 (variable_decl)


State 249

  127 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  128           | composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 284


State 250

   75 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 75 (cast)


State 251

  156 id_or_constant: id .

    $default  reduce using rule 156 (id_or_constant)


State 252

   76 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 177


State 253

   77 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 181


State 254

  119 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 119 (function_call)


State 255

  144 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 285
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 256

  169 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 169 (constant_enum_value)


State 257

  134 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 134 (cond_block)


State 258

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 286


State 259

  136 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 136 (while_loop)


State 260

  150 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 150 (enum_def)


State 261

  153 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 287
    id         go to state 217


State 262

  155 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 50

    constant_int  go to state 288


State 263

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 34 (union_def)


State 264

  138 struct_list: struct_list struct_pair .

    $default  reduce using rule 138 (struct_list)


State 265

  140 struct_pair: composited_type id . SEMICOLON
  141            | composited_type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 289
    EQUAL      shift, and go to state 290


State 266

  174 composited_type: composited_type . ASTERISK
  175                | composited_type . MUT
  176 type_list: composited_type .

    ASTERISK  shift, and go to state 124
    MUT       shift, and go to state 125

    $default  reduce using rule 176 (type_list)


State 267

  146 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  177 type_list: type_list . COMMA composited_type

    RIGHT_BRACKET  shift, and go to state 291
    COMMA          shift, and go to state 292


State 268

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 31 (struct_def)


State 269

   36 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 36 (defer_statement)


State 270

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 46 (scope)


State 271

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 272

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 273

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 274

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 275

  112 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  113             | id LEFT_BRACKET . RIGHT_BRACKET scope
  118 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  119              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 293
    FSTOP          shift, and go to state 162
    ASTERISK       shift, and go to state 53
    AND            shift, and go to state 54
    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    MUT            shift, and go to state 11
    NULLPTR        shift, and go to state 57

    assignable_statement  go to state 209
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    arg_list              go to state 163
    statement_list        go to state 210
    arg_pair              go to state 164
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 235
    composited_type       go to state 165


State 276

  135 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 294


State 277

  149 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 149 (arg_pair)


State 278

  112 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 112 (function_def)


State 279

  142 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 142 (arg_list)


State 280

  115 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 115 (function_decl)


State 281

  111 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 111 (function_def)


State 282

  110 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
  116 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 158
    SEMICOLON   shift, and go to state 295

    scope  go to state 296


State 283

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  126           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 297

    $default  reduce using rule 125 (array_decl)


State 284

  127 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  128           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 298


State 285

  144 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 144 (statement_list)


State 286

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 299
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 287

  153 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 153 (enum_parts)


State 288

  155 enum_part: id EQUAL constant_int .

    $default  reduce using rule 155 (enum_part)


State 289

  140 struct_pair: composited_type id SEMICOLON .

    $default  reduce using rule 140 (struct_pair)


State 290

  141 struct_pair: composited_type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 300
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 291

  146 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 146 (func_ptr)


State 292

  177 type_list: type_list COMMA . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 301


State 293

  113 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
  118 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 158

    $default  reduce using rule 118 (function_call)

    scope  go to state 237


State 294

  135 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 302


State 295

  116 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 116 (function_decl)


State 296

  110 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 110 (function_def)


State 297

  126 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 303


State 298

  127 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  128           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 304

    $default  reduce using rule 127 (array_decl)


State 299

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 305


State 300

  141 struct_pair: composited_type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 306


State 301

  174 composited_type: composited_type . ASTERISK
  175                | composited_type . MUT
  177 type_list: type_list COMMA composited_type .

    ASTERISK  shift, and go to state 124
    MUT       shift, and go to state 125

    $default  reduce using rule 177 (type_list)


State 302

  135 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 135 (cond_block)


State 303

  126 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    init_list            go to state 307
    id_or_constant       go to state 308
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 251
    type                 go to state 89


State 304

  128 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 309


State 305

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 310


State 306

  141 struct_pair: composited_type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 141 (struct_pair)


State 307

  126 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  130 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 311
    COMMA        shift, and go to state 312


State 308

  129 init_list: id_or_constant .

    $default  reduce using rule 129 (init_list)


State 309

  128 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    init_list            go to state 313
    id_or_constant       go to state 308
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 251
    type                 go to state 89


State 310

  137 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 137 (for_loop)


State 311

  126 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 126 (array_decl)


State 312

  130 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    id_or_constant       go to state 314
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 251
    type                 go to state 89


State 313

  128 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  130 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 315
    COMMA        shift, and go to state 312


State 314

  130 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 130 (init_list)


State 315

  128 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 128 (array_decl)
