Terminals unused in grammar

   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   UNKNOWN


Rules useless in parser due to conflicts

   28 statement: struct_decl


State 25 conflicts: 19 reduce/reduce
State 88 conflicts: 2 shift/reduce
State 117 conflicts: 1 shift/reduce
State 140 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | struct_decl
   21          | import
   22          | include_or_link
   23          | func_ptr
   24          | enum_def
   25          | union_def
   26          | flow_control
   27          | function_def
   28          | struct_decl

   29 alias_statement: ALIAS TYPE TYPE

   30 typedef_statement: TYPEDEF TYPE TYPE

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE
   32           | EXPORT struct_def

   33 struct_decl: STRUCT type

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE
   35          | EXPORT union_def

   36 defer_statement: DEFER assignable_statement

   37 assignable_statement: function_call
   38                     | unary_op
   39                     | binary_op
   40                     | member_op
   41                     | id_or_constant

   42 flow_control: if_statement
   43             | loop

   44 loop: while_loop
   45     | for_loop

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE RIGHT_BRACE

   48 import: IMPORT id

   49 unary_op: cast
   50         | increment
   51         | decrement
   52         | address_of
   53         | dereference
   54         | array_index
   55         | unary_minus
   56         | unary_plus

   57 unary_minus: MINUS id_or_constant

   58 unary_plus: PLUS id_or_constant

   59 binary_op: binop

   60 assign_op: variable_assign

   61 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   62            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   63 member_op: id FSTOP id
   64          | id ARROW id

   65 variable_assign: id EQUAL assignable_statement
   66                | array_index EQUAL assignable_statement
   67                | member_op EQUAL assignable_statement

   68 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant

   69 increment: id_or_constant PLUS PLUS

   70 decrement: id_or_constant MINUS MINUS

   71 address_of: AND id

   72 dereference: ASTERISK id

   73 binop_id: PLUS
   74         | MINUS
   75         | ASTERISK
   76         | FORWARD_SLASH
   77         | EQUAL_EQUAL
   78         | EXCLAMATION_EQUAL
   79         | LESSER
   80         | GREATER
   81         | LESSER_EQUAL
   82         | GREATER_EQUAL
   83         | AND
   84         | OR
   85         | LEFT_SHIFT
   86         | RIGHT_SHIFT
   87         | PERCENT

   88 binop: id_or_constant binop_id id_or_constant
   89      | id_or_constant binop_id unary_op
   90      | unary_op binop_id id_or_constant

   91 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
   92             | composited_type id LEFT_BRACKET RIGHT_BRACKET scope
   93             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | id LEFT_BRACKET RIGHT_BRACKET scope
   95             | EXPORT function_def

   96 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
   97              | composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
   98              | EXPORT function_decl

   99 function_call: id LEFT_BRACKET RIGHT_BRACKET
  100              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  101 variable_decl: composited_type id
  102              | id COLON EQUAL assignable_statement
  103              | composited_type id EQUAL assignable_statement
  104              | array_decl
  105              | EXPORT variable_decl

  106 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  107           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  108           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  110 init_list: id_or_constant
  111          | init_list COMMA id_or_constant

  112 return_statement: RETURN assignable_statement

  113 if_statement: cond_block
  114             | cond_block ELSE scope

  115 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  116           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  117 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  119 struct_list: struct_list struct_pair
  120            | struct_pair

  121 struct_pair: composited_type id SEMICOLON
  122            | composited_type id EQUAL assignable_statement SEMICOLON

  123 arg_list: arg_list COMMA arg_pair
  124         | arg_pair

  125 statement_list: statement_list COMMA assignable_statement
  126               | assignable_statement

  127 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET
  128         | EXPORT func_ptr

  129 arg_pair: composited_type id
  130         | FSTOP FSTOP FSTOP

  131 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE
  132         | EXPORT enum_def

  133 enum_parts: enum_part
  134           | enum_parts COMMA enum_part

  135 enum_part: id
  136          | id EQUAL constant_int

  137 id_or_constant: id
  138               | constant

  139 include_or_link: INCLUDE STRING
  140                | LINK STRING

  141 constant: constant_int
  142         | constant_enum_value
  143         | constant_bool
  144         | FLOAT
  145         | STRING
  146         | NULLPTR

  147 constant_int: INTEGER

  148 constant_bool: TRUE
  149              | FALSE

  150 constant_enum_value: type COLON COLON id

  151 id: IDENTIFIER

  152 type: TYPE

  153 composited_type: type
  154                | MUT composited_type
  155                | composited_type ASTERISK
  156                | composited_type MUT

  157 type_list: composited_type
  158          | type_list COMMA composited_type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 151
STRING (259) 139 140 145
INTEGER (260) 147
FLOAT (261) 144
TYPE (262) 29 30 152
LEFT_BRACKET (263) 68 91 92 93 94 96 97 99 100 115 116 117 118 127
RIGHT_BRACKET (264) 68 91 92 93 94 96 97 99 100 115 116 117 118 127
LEFT_BRACE (265) 31 34 46 47 107 109 131
RIGHT_BRACE (266) 31 34 46 47 107 109 131
LEFT_SQUARE_BRACKET (267) 61 62 106 107 108 109
RIGHT_SQUARE_BRACKET (268) 61 62 106 107 108 109
COMMA (269) 111 123 125 134 158
FSTOP (270) 63 130
SEMICOLON (271) 5 8 9 11 96 97 118 121 122
COLON (272) 102 150
PLUS (273) 58 69 73
MINUS (274) 57 70 74
ASTERISK (275) 72 75 155
FORWARD_SLASH (276) 76
PERCENT (277) 87
EQUAL (278) 65 66 67 102 103 107 109 122 136
EQUAL_EQUAL (279) 77
EXCLAMATION (280)
EXCLAMATION_EQUAL (281) 78
GREATER (282) 80
GREATER_EQUAL (283) 82
LESSER (284) 79
LESSER_EQUAL (285) 81
AND (286) 71 83
AND_AND (287)
OR (288) 84
OR_OR (289)
LEFT_SHIFT (290) 85
RIGHT_SHIFT (291) 86
RETURN (292) 112
DEFER (293) 36
IF (294) 115 116
ELSE (295) 114 116
FOR (296) 118
WHILE (297) 117
TYPEDEF (298) 30
ALIAS (299) 29
AUTO (300)
ENUM (301) 131
UNION (302) 34
TRUE (303) 148
FALSE (304) 149
MUT (305) 108 109 154 156
EXTERN (306)
IMPORT (307) 48
EXPORT (308) 32 35 95 98 105 128 132
INCLUDE (309) 139
LINK (310) 140
FUNC_PTR (311) 127
NULLPTR (312) 146
STRUCT (313) 31 33
ARROW (314) 64
UNKNOWN (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
module (62)
    on left: 1, on right: 0
statements (63)
    on left: 2 3, on right: 1 3
node_setup (64)
    on left: 4 5, on right: 2 3
semicoloned_statements (65)
    on left: 6 7, on right: 7 46
semicoloned_statement (66)
    on left: 8 9 10 11 12, on right: 6 7
statement (67)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    4 5 8 118
alias_statement (68)
    on left: 29, on right: 17
typedef_statement (69)
    on left: 30, on right: 18
struct_def (70)
    on left: 31 32, on right: 19 32
struct_decl (71)
    on left: 33, on right: 20 28
union_def (72)
    on left: 34 35, on right: 25 35
defer_statement (73)
    on left: 36, on right: 11
assignable_statement (74)
    on left: 37 38 39 40 41, on right: 9 36 65 66 67 102 103 112 115
    116 117 118 122 125 126
flow_control (75)
    on left: 42 43, on right: 10 26
loop (76)
    on left: 44 45, on right: 43
scope (77)
    on left: 46 47, on right: 91 92 93 94 114 115 116 117 118
import (78)
    on left: 48, on right: 21
unary_op (79)
    on left: 49 50 51 52 53 54 55 56, on right: 38 89 90
unary_minus (80)
    on left: 57, on right: 55
unary_plus (81)
    on left: 58, on right: 56
binary_op (82)
    on left: 59, on right: 39
assign_op (83)
    on left: 60, on right: 16
array_index (84)
    on left: 61 62, on right: 54 66
member_op (85)
    on left: 63 64, on right: 40 67
variable_assign (86)
    on left: 65 66 67, on right: 60
cast (87)
    on left: 68, on right: 49
increment (88)
    on left: 69, on right: 50
decrement (89)
    on left: 70, on right: 51
address_of (90)
    on left: 71, on right: 52
dereference (91)
    on left: 72, on right: 53
binop_id (92)
    on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87, on right:
    88 89 90
binop (93)
    on left: 88 89 90, on right: 59
function_def (94)
    on left: 91 92 93 94 95, on right: 12 27 95
function_decl (95)
    on left: 96 97 98, on right: 14 98
function_call (96)
    on left: 99 100, on right: 37
variable_decl (97)
    on left: 101 102 103 104 105, on right: 15 105
array_decl (98)
    on left: 106 107 108 109, on right: 104
init_list (99)
    on left: 110 111, on right: 107 109 111
return_statement (100)
    on left: 112, on right: 13
if_statement (101)
    on left: 113 114, on right: 42
cond_block (102)
    on left: 115 116, on right: 113 114 116
while_loop (103)
    on left: 117, on right: 44
for_loop (104)
    on left: 118, on right: 45
struct_list (105)
    on left: 119 120, on right: 31 34 119
struct_pair (106)
    on left: 121 122, on right: 119 120
arg_list (107)
    on left: 123 124, on right: 91 93 97 123
statement_list (108)
    on left: 125 126, on right: 100 125
func_ptr (109)
    on left: 127 128, on right: 23 128
arg_pair (110)
    on left: 129 130, on right: 123 124
enum_def (111)
    on left: 131 132, on right: 24 132
enum_parts (112)
    on left: 133 134, on right: 131 134
enum_part (113)
    on left: 135 136, on right: 133 134
id_or_constant (114)
    on left: 137 138, on right: 41 57 58 68 69 70 88 89 90 110 111
include_or_link (115)
    on left: 139 140, on right: 22
constant (116)
    on left: 141 142 143 144 145 146, on right: 138
constant_int (117)
    on left: 147, on right: 61 106 107 108 109 136 141
constant_bool (118)
    on left: 148 149, on right: 143
constant_enum_value (119)
    on left: 150, on right: 142
id (120)
    on left: 151, on right: 48 61 62 63 64 65 71 72 91 92 93 94 96
    97 99 100 101 102 103 106 107 108 109 121 122 129 135 136 137 150
type (121)
    on left: 152, on right: 31 33 34 127 131 150 153
composited_type (122)
    on left: 153 154 155 156, on right: 68 91 92 96 97 101 103 106
    107 108 109 121 122 129 154 155 156 157 158
type_list (123)
    on left: 157 158, on right: 127 158


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    module             go to state 18
    statements         go to state 19
    node_setup         go to state 20
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    array_index        go to state 31
    member_op          go to state 32
    variable_assign    go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 1

  151 id: IDENTIFIER .

    $default  reduce using rule 151 (id)


State 2

  152 type: TYPE .

    $default  reduce using rule 152 (type)


State 3

  112 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 60
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 4

  115 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 81


State 5

  118 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 82


State 6

  117 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 83


State 7

   30 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 84


State 8

   29 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 85


State 9

  131 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 86


State 10

   34 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 87


State 11

  154 composited_type: MUT . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 88


State 12

   48 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 89


State 13

   32 struct_def: EXPORT . struct_def
   35 union_def: EXPORT . union_def
   95 function_def: EXPORT . function_def
   98 function_decl: EXPORT . function_decl
  105 variable_decl: EXPORT . variable_decl
  128 func_ptr: EXPORT . func_ptr
  132 enum_def: EXPORT . enum_def

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    EXPORT      shift, and go to state 13
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 90

    struct_def       go to state 91
    union_def        go to state 92
    function_def     go to state 93
    function_decl    go to state 94
    variable_decl    go to state 95
    array_decl       go to state 37
    func_ptr         go to state 96
    enum_def         go to state 97
    id               go to state 98
    type             go to state 47
    composited_type  go to state 48


State 14

  139 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 99


State 15

  140 include_or_link: LINK . STRING

    STRING  shift, and go to state 100


State 16

  127 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 101


State 17

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 102


State 18

    0 $accept: module . $end

    $end  shift, and go to state 103


State 19

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    $default  reduce using rule 1 (module)

    node_setup         go to state 104
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    array_index        go to state 31
    member_op          go to state 32
    variable_assign    go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 20

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 21

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 105

    $default  reduce using rule 4 (node_setup)


State 22

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 23

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 24

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 25

   20 statement: struct_decl .
   28          | struct_decl .

    $end        reduce using rule 20 (statement)
    $end        [reduce using rule 28 (statement)]
    IDENTIFIER  reduce using rule 20 (statement)
    IDENTIFIER  [reduce using rule 28 (statement)]
    TYPE        reduce using rule 20 (statement)
    TYPE        [reduce using rule 28 (statement)]
    SEMICOLON   reduce using rule 20 (statement)
    SEMICOLON   [reduce using rule 28 (statement)]
    RETURN      reduce using rule 20 (statement)
    RETURN      [reduce using rule 28 (statement)]
    IF          reduce using rule 20 (statement)
    IF          [reduce using rule 28 (statement)]
    FOR         reduce using rule 20 (statement)
    FOR         [reduce using rule 28 (statement)]
    WHILE       reduce using rule 20 (statement)
    WHILE       [reduce using rule 28 (statement)]
    TYPEDEF     reduce using rule 20 (statement)
    TYPEDEF     [reduce using rule 28 (statement)]
    ALIAS       reduce using rule 20 (statement)
    ALIAS       [reduce using rule 28 (statement)]
    ENUM        reduce using rule 20 (statement)
    ENUM        [reduce using rule 28 (statement)]
    UNION       reduce using rule 20 (statement)
    UNION       [reduce using rule 28 (statement)]
    MUT         reduce using rule 20 (statement)
    MUT         [reduce using rule 28 (statement)]
    IMPORT      reduce using rule 20 (statement)
    IMPORT      [reduce using rule 28 (statement)]
    EXPORT      reduce using rule 20 (statement)
    EXPORT      [reduce using rule 28 (statement)]
    INCLUDE     reduce using rule 20 (statement)
    INCLUDE     [reduce using rule 28 (statement)]
    LINK        reduce using rule 20 (statement)
    LINK        [reduce using rule 28 (statement)]
    FUNC_PTR    reduce using rule 20 (statement)
    FUNC_PTR    [reduce using rule 28 (statement)]
    STRUCT      reduce using rule 20 (statement)
    STRUCT      [reduce using rule 28 (statement)]
    $default    reduce using rule 20 (statement)


State 26

   25 statement: union_def .

    $default  reduce using rule 25 (statement)


State 27

   26 statement: flow_control .

    $default  reduce using rule 26 (statement)


State 28

   43 flow_control: loop .

    $default  reduce using rule 43 (flow_control)


State 29

   21 statement: import .

    $default  reduce using rule 21 (statement)


State 30

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 31

   66 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 106


State 32

   67 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 107


State 33

   60 assign_op: variable_assign .

    $default  reduce using rule 60 (assign_op)


State 34

   27 statement: function_def .

    $default  reduce using rule 27 (statement)


State 35

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 36

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 37

  104 variable_decl: array_decl .

    $default  reduce using rule 104 (variable_decl)


State 38

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 39

   42 flow_control: if_statement .

    $default  reduce using rule 42 (flow_control)


State 40

  113 if_statement: cond_block .
  114             | cond_block . ELSE scope
  116 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 108

    $default  reduce using rule 113 (if_statement)


State 41

   44 loop: while_loop .

    $default  reduce using rule 44 (loop)


State 42

   45 loop: for_loop .

    $default  reduce using rule 45 (loop)


State 43

   23 statement: func_ptr .

    $default  reduce using rule 23 (statement)


State 44

   24 statement: enum_def .

    $default  reduce using rule 24 (statement)


State 45

   22 statement: include_or_link .

    $default  reduce using rule 22 (statement)


State 46

   61 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   62            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
   63 member_op: id . FSTOP id
   64          | id . ARROW id
   65 variable_assign: id . EQUAL assignable_statement
   93 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | id . LEFT_BRACKET RIGHT_BRACKET scope
  102 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 109
    LEFT_SQUARE_BRACKET  shift, and go to state 110
    FSTOP                shift, and go to state 111
    COLON                shift, and go to state 112
    EQUAL                shift, and go to state 113
    ARROW                shift, and go to state 114


State 47

  153 composited_type: type .

    $default  reduce using rule 153 (composited_type)


State 48

   91 function_def: composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
   92             | composited_type . id LEFT_BRACKET RIGHT_BRACKET scope
   96 function_decl: composited_type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
   97              | composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  101 variable_decl: composited_type . id
  103              | composited_type . id EQUAL assignable_statement
  106 array_decl: composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  107           | composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  108           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  155 composited_type: composited_type . ASTERISK
  156                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 115
    MUT         shift, and go to state 116

    id  go to state 117


State 49

  145 constant: STRING .

    $default  reduce using rule 145 (constant)


State 50

  147 constant_int: INTEGER .

    $default  reduce using rule 147 (constant_int)


State 51

  144 constant: FLOAT .

    $default  reduce using rule 144 (constant)


State 52

   68 cast: LEFT_BRACKET . composited_type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 118


State 53

   58 unary_plus: PLUS . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 119
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 54

   57 unary_minus: MINUS . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 121
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 55

   72 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 122


State 56

   71 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 123


State 57

  148 constant_bool: TRUE .

    $default  reduce using rule 148 (constant_bool)


State 58

  149 constant_bool: FALSE .

    $default  reduce using rule 149 (constant_bool)


State 59

  146 constant: NULLPTR .

    $default  reduce using rule 146 (constant)


State 60

  112 return_statement: RETURN assignable_statement .

    $default  reduce using rule 112 (return_statement)


State 61

   38 assignable_statement: unary_op .
   90 binop: unary_op . binop_id id_or_constant

    PLUS               shift, and go to state 124
    MINUS              shift, and go to state 125
    ASTERISK           shift, and go to state 126
    FORWARD_SLASH      shift, and go to state 127
    PERCENT            shift, and go to state 128
    EQUAL_EQUAL        shift, and go to state 129
    EXCLAMATION_EQUAL  shift, and go to state 130
    GREATER            shift, and go to state 131
    GREATER_EQUAL      shift, and go to state 132
    LESSER             shift, and go to state 133
    LESSER_EQUAL       shift, and go to state 134
    AND                shift, and go to state 135
    OR                 shift, and go to state 136
    LEFT_SHIFT         shift, and go to state 137
    RIGHT_SHIFT        shift, and go to state 138

    $default  reduce using rule 38 (assignable_statement)

    binop_id  go to state 139


State 62

   55 unary_op: unary_minus .

    $default  reduce using rule 55 (unary_op)


State 63

   56 unary_op: unary_plus .

    $default  reduce using rule 56 (unary_op)


State 64

   39 assignable_statement: binary_op .

    $default  reduce using rule 39 (assignable_statement)


State 65

   54 unary_op: array_index .

    $default  reduce using rule 54 (unary_op)


State 66

   40 assignable_statement: member_op .

    $default  reduce using rule 40 (assignable_statement)


State 67

   49 unary_op: cast .

    $default  reduce using rule 49 (unary_op)


State 68

   50 unary_op: increment .

    $default  reduce using rule 50 (unary_op)


State 69

   51 unary_op: decrement .

    $default  reduce using rule 51 (unary_op)


State 70

   52 unary_op: address_of .

    $default  reduce using rule 52 (unary_op)


State 71

   53 unary_op: dereference .

    $default  reduce using rule 53 (unary_op)


State 72

   59 binary_op: binop .

    $default  reduce using rule 59 (binary_op)


State 73

   37 assignable_statement: function_call .

    $default  reduce using rule 37 (assignable_statement)


State 74

   41 assignable_statement: id_or_constant .
   69 increment: id_or_constant . PLUS PLUS
   70 decrement: id_or_constant . MINUS MINUS
   88 binop: id_or_constant . binop_id id_or_constant
   89      | id_or_constant . binop_id unary_op

    PLUS               shift, and go to state 140
    MINUS              shift, and go to state 141
    ASTERISK           shift, and go to state 126
    FORWARD_SLASH      shift, and go to state 127
    PERCENT            shift, and go to state 128
    EQUAL_EQUAL        shift, and go to state 129
    EXCLAMATION_EQUAL  shift, and go to state 130
    GREATER            shift, and go to state 131
    GREATER_EQUAL      shift, and go to state 132
    LESSER             shift, and go to state 133
    LESSER_EQUAL       shift, and go to state 134
    AND                shift, and go to state 135
    OR                 shift, and go to state 136
    LEFT_SHIFT         shift, and go to state 137
    RIGHT_SHIFT        shift, and go to state 138

    $default  reduce using rule 41 (assignable_statement)

    binop_id  go to state 142


State 75

  138 id_or_constant: constant .

    $default  reduce using rule 138 (id_or_constant)


State 76

  141 constant: constant_int .

    $default  reduce using rule 141 (constant)


State 77

  143 constant: constant_bool .

    $default  reduce using rule 143 (constant)


State 78

  142 constant: constant_enum_value .

    $default  reduce using rule 142 (constant)


State 79

   61 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   62            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
   63 member_op: id . FSTOP id
   64          | id . ARROW id
   99 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  100              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  137 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 143
    LEFT_SQUARE_BRACKET  shift, and go to state 110
    FSTOP                shift, and go to state 111
    ARROW                shift, and go to state 114

    $default  reduce using rule 137 (id_or_constant)


State 80

  150 constant_enum_value: type . COLON COLON id

    COLON  shift, and go to state 144


State 81

  115 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 145
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 82

  118 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    statement          go to state 146
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    array_index        go to state 31
    member_op          go to state 32
    variable_assign    go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 83

  117 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 147
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 84

   30 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 148


State 85

   29 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 149


State 86

  131 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 150


State 87

   34 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 151


State 88

  154 composited_type: MUT composited_type .
  155                | composited_type . ASTERISK
  156                | composited_type . MUT

    ASTERISK  shift, and go to state 115
    MUT       shift, and go to state 116

    ASTERISK  [reduce using rule 154 (composited_type)]
    MUT       [reduce using rule 154 (composited_type)]
    $default  reduce using rule 154 (composited_type)


State 89

   48 import: IMPORT id .

    $default  reduce using rule 48 (import)


State 90

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 152


State 91

   32 struct_def: EXPORT struct_def .

    $default  reduce using rule 32 (struct_def)


State 92

   35 union_def: EXPORT union_def .

    $default  reduce using rule 35 (union_def)


State 93

   95 function_def: EXPORT function_def .

    $default  reduce using rule 95 (function_def)


State 94

   98 function_decl: EXPORT function_decl .

    $default  reduce using rule 98 (function_decl)


State 95

  105 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 105 (variable_decl)


State 96

  128 func_ptr: EXPORT func_ptr .

    $default  reduce using rule 128 (func_ptr)


State 97

  132 enum_def: EXPORT enum_def .

    $default  reduce using rule 132 (enum_def)


State 98

   93 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | id . LEFT_BRACKET RIGHT_BRACKET scope
  102 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 109
    COLON         shift, and go to state 112


State 99

  139 include_or_link: INCLUDE STRING .

    $default  reduce using rule 139 (include_or_link)


State 100

  140 include_or_link: LINK STRING .

    $default  reduce using rule 140 (include_or_link)


State 101

  127 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 153


State 102

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT type .

    LEFT_BRACE  shift, and go to state 154

    $default  reduce using rule 33 (struct_decl)


State 103

    0 $accept: module $end .

    $default  accept


State 104

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 105

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 106

   66 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 155
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 107

   67 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 156
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 108

  114 if_statement: cond_block ELSE . scope
  116 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 157
    IF          shift, and go to state 158

    scope  go to state 159


State 109

   93 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
   94             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 160
    FSTOP          shift, and go to state 161
    MUT            shift, and go to state 11

    arg_list         go to state 162
    arg_pair         go to state 163
    type             go to state 47
    composited_type  go to state 164


State 110

   61 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   62            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 50

    constant_int  go to state 165
    id            go to state 166


State 111

   63 member_op: id FSTOP . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 167


State 112

  102 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 168


State 113

   65 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 169
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 114

   64 member_op: id ARROW . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 170


State 115

  155 composited_type: composited_type ASTERISK .

    $default  reduce using rule 155 (composited_type)


State 116

  156 composited_type: composited_type MUT .

    $default  reduce using rule 156 (composited_type)


State 117

   91 function_def: composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   92             | composited_type id . LEFT_BRACKET RIGHT_BRACKET scope
   96 function_decl: composited_type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
   97              | composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  101 variable_decl: composited_type id .
  103              | composited_type id . EQUAL assignable_statement
  106 array_decl: composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  107           | composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  108           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 171
    LEFT_SQUARE_BRACKET  shift, and go to state 172
    EQUAL                shift, and go to state 173
    MUT                  shift, and go to state 174

    MUT       [reduce using rule 101 (variable_decl)]
    $default  reduce using rule 101 (variable_decl)


State 118

   68 cast: LEFT_BRACKET composited_type . RIGHT_BRACKET id_or_constant
  155 composited_type: composited_type . ASTERISK
  156                | composited_type . MUT

    RIGHT_BRACKET  shift, and go to state 175
    ASTERISK       shift, and go to state 115
    MUT            shift, and go to state 116


State 119

   58 unary_plus: PLUS id_or_constant .

    $default  reduce using rule 58 (unary_plus)


State 120

  137 id_or_constant: id .

    $default  reduce using rule 137 (id_or_constant)


State 121

   57 unary_minus: MINUS id_or_constant .

    $default  reduce using rule 57 (unary_minus)


State 122

   72 dereference: ASTERISK id .

    $default  reduce using rule 72 (dereference)


State 123

   71 address_of: AND id .

    $default  reduce using rule 71 (address_of)


State 124

   73 binop_id: PLUS .

    $default  reduce using rule 73 (binop_id)


State 125

   74 binop_id: MINUS .

    $default  reduce using rule 74 (binop_id)


State 126

   75 binop_id: ASTERISK .

    $default  reduce using rule 75 (binop_id)


State 127

   76 binop_id: FORWARD_SLASH .

    $default  reduce using rule 76 (binop_id)


State 128

   87 binop_id: PERCENT .

    $default  reduce using rule 87 (binop_id)


State 129

   77 binop_id: EQUAL_EQUAL .

    $default  reduce using rule 77 (binop_id)


State 130

   78 binop_id: EXCLAMATION_EQUAL .

    $default  reduce using rule 78 (binop_id)


State 131

   80 binop_id: GREATER .

    $default  reduce using rule 80 (binop_id)


State 132

   82 binop_id: GREATER_EQUAL .

    $default  reduce using rule 82 (binop_id)


State 133

   79 binop_id: LESSER .

    $default  reduce using rule 79 (binop_id)


State 134

   81 binop_id: LESSER_EQUAL .

    $default  reduce using rule 81 (binop_id)


State 135

   83 binop_id: AND .

    $default  reduce using rule 83 (binop_id)


State 136

   84 binop_id: OR .

    $default  reduce using rule 84 (binop_id)


State 137

   85 binop_id: LEFT_SHIFT .

    $default  reduce using rule 85 (binop_id)


State 138

   86 binop_id: RIGHT_SHIFT .

    $default  reduce using rule 86 (binop_id)


State 139

   90 binop: unary_op binop_id . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 176
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 140

   69 increment: id_or_constant PLUS . PLUS
   73 binop_id: PLUS .

    PLUS  shift, and go to state 177

    PLUS      [reduce using rule 73 (binop_id)]
    $default  reduce using rule 73 (binop_id)


State 141

   70 decrement: id_or_constant MINUS . MINUS
   74 binop_id: MINUS .

    MINUS  shift, and go to state 178

    MINUS     [reduce using rule 74 (binop_id)]
    $default  reduce using rule 74 (binop_id)


State 142

   88 binop: id_or_constant binop_id . id_or_constant
   89      | id_or_constant binop_id . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    unary_op             go to state 179
    unary_minus          go to state 62
    unary_plus           go to state 63
    array_index          go to state 65
    cast                 go to state 67
    increment            go to state 68
    decrement            go to state 69
    address_of           go to state 70
    dereference          go to state 71
    id_or_constant       go to state 180
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 181
    type                 go to state 80


State 143

   99 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  100              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 182
    PLUS           shift, and go to state 53
    MINUS          shift, and go to state 54
    ASTERISK       shift, and go to state 55
    AND            shift, and go to state 56
    TRUE           shift, and go to state 57
    FALSE          shift, and go to state 58
    NULLPTR        shift, and go to state 59

    assignable_statement  go to state 183
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    statement_list        go to state 184
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 144

  150 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 185


State 145

  115 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 186


State 146

  118 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 187


State 147

  117 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 188


State 148

   30 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 30 (typedef_statement)


State 149

   29 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 29 (alias_statement)


State 150

  131 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 189
    enum_part   go to state 190
    id          go to state 191


State 151

   34 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 192
    struct_pair      go to state 193
    type             go to state 47
    composited_type  go to state 194


State 152

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 154


State 153

  127 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 195


State 154

   31 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 196
    struct_pair      go to state 193
    type             go to state 47
    composited_type  go to state 194


State 155

   66 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 66 (variable_assign)


State 156

   67 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 67 (variable_assign)


State 157

   46 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 197
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 198
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 59
    STRUCT        shift, and go to state 17

    semicoloned_statements  go to state 199
    semicoloned_statement   go to state 200
    statement               go to state 201
    alias_statement         go to state 22
    typedef_statement       go to state 23
    struct_def              go to state 24
    struct_decl             go to state 25
    union_def               go to state 26
    defer_statement         go to state 202
    assignable_statement    go to state 203
    flow_control            go to state 204
    loop                    go to state 28
    import                  go to state 29
    unary_op                go to state 61
    unary_minus             go to state 62
    unary_plus              go to state 63
    binary_op               go to state 64
    assign_op               go to state 30
    array_index             go to state 205
    member_op               go to state 206
    variable_assign         go to state 33
    cast                    go to state 67
    increment               go to state 68
    decrement               go to state 69
    address_of              go to state 70
    dereference             go to state 71
    binop                   go to state 72
    function_def            go to state 207
    function_decl           go to state 35
    function_call           go to state 73
    variable_decl           go to state 36
    array_decl              go to state 37
    return_statement        go to state 38
    if_statement            go to state 39
    cond_block              go to state 40
    while_loop              go to state 41
    for_loop                go to state 42
    func_ptr                go to state 43
    enum_def                go to state 44
    id_or_constant          go to state 74
    include_or_link         go to state 45
    constant                go to state 75
    constant_int            go to state 76
    constant_bool           go to state 77
    constant_enum_value     go to state 78
    id                      go to state 208
    type                    go to state 209
    composited_type         go to state 48


State 158

  116 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 210


State 159

  114 if_statement: cond_block ELSE scope .

    $default  reduce using rule 114 (if_statement)


State 160

   94 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 157

    scope  go to state 211


State 161

  130 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 212


State 162

   93 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  123 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 213
    COMMA          shift, and go to state 214


State 163

  124 arg_list: arg_pair .

    $default  reduce using rule 124 (arg_list)


State 164

  129 arg_pair: composited_type . id
  155 composited_type: composited_type . ASTERISK
  156                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 115
    MUT         shift, and go to state 116

    id  go to state 215


State 165

   61 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 216


State 166

   62 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 217


State 167

   63 member_op: id FSTOP id .

    $default  reduce using rule 63 (member_op)


State 168

  102 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 218
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 169

   65 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 65 (variable_assign)


State 170

   64 member_op: id ARROW id .

    $default  reduce using rule 64 (member_op)


State 171

   91 function_def: composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
   92             | composited_type id LEFT_BRACKET . RIGHT_BRACKET scope
   96 function_decl: composited_type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
   97              | composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 219
    FSTOP          shift, and go to state 161
    MUT            shift, and go to state 11

    arg_list         go to state 220
    arg_pair         go to state 163
    type             go to state 47
    composited_type  go to state 164


State 172

  106 array_decl: composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  107           | composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 221


State 173

  103 variable_decl: composited_type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 222
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 174

  108 array_decl: composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_SQUARE_BRACKET  shift, and go to state 223


State 175

   68 cast: LEFT_BRACKET composited_type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 224
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 176

   90 binop: unary_op binop_id id_or_constant .

    $default  reduce using rule 90 (binop)


State 177

   69 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 69 (increment)


State 178

   70 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 70 (decrement)


State 179

   89 binop: id_or_constant binop_id unary_op .

    $default  reduce using rule 89 (binop)


State 180

   69 increment: id_or_constant . PLUS PLUS
   70 decrement: id_or_constant . MINUS MINUS
   88 binop: id_or_constant binop_id id_or_constant .

    PLUS   shift, and go to state 225
    MINUS  shift, and go to state 226

    $default  reduce using rule 88 (binop)


State 181

   61 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   62            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  137 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 110

    $default  reduce using rule 137 (id_or_constant)


State 182

   99 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 99 (function_call)


State 183

  126 statement_list: assignable_statement .

    $default  reduce using rule 126 (statement_list)


State 184

  100 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  125 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 227
    COMMA          shift, and go to state 228


State 185

  150 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 229


State 186

  115 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 157

    scope  go to state 230


State 187

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 231
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 188

  117 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 157

    scope  go to state 232


State 189

  131 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  134 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 233
    COMMA        shift, and go to state 234


State 190

  133 enum_parts: enum_part .

    $default  reduce using rule 133 (enum_parts)


State 191

  135 enum_part: id .
  136          | id . EQUAL constant_int

    EQUAL  shift, and go to state 235

    $default  reduce using rule 135 (enum_part)


State 192

   34 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  119 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 236
    MUT          shift, and go to state 11

    struct_pair      go to state 237
    type             go to state 47
    composited_type  go to state 194


State 193

  120 struct_list: struct_pair .

    $default  reduce using rule 120 (struct_list)


State 194

  121 struct_pair: composited_type . id SEMICOLON
  122            | composited_type . id EQUAL assignable_statement SEMICOLON
  155 composited_type: composited_type . ASTERISK
  156                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 115
    MUT         shift, and go to state 116

    id  go to state 238


State 195

  127 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 239
    type_list        go to state 240


State 196

   31 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  119 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 241
    MUT          shift, and go to state 11

    struct_pair      go to state 237
    type             go to state 47
    composited_type  go to state 194


State 197

   47 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 47 (scope)


State 198

   36 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 242
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 199

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   46 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 243
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 198
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 59
    STRUCT        shift, and go to state 17

    semicoloned_statement  go to state 244
    statement              go to state 201
    alias_statement        go to state 22
    typedef_statement      go to state 23
    struct_def             go to state 24
    struct_decl            go to state 25
    union_def              go to state 26
    defer_statement        go to state 202
    assignable_statement   go to state 203
    flow_control           go to state 204
    loop                   go to state 28
    import                 go to state 29
    unary_op               go to state 61
    unary_minus            go to state 62
    unary_plus             go to state 63
    binary_op              go to state 64
    assign_op              go to state 30
    array_index            go to state 205
    member_op              go to state 206
    variable_assign        go to state 33
    cast                   go to state 67
    increment              go to state 68
    decrement              go to state 69
    address_of             go to state 70
    dereference            go to state 71
    binop                  go to state 72
    function_def           go to state 207
    function_decl          go to state 35
    function_call          go to state 73
    variable_decl          go to state 36
    array_decl             go to state 37
    return_statement       go to state 38
    if_statement           go to state 39
    cond_block             go to state 40
    while_loop             go to state 41
    for_loop               go to state 42
    func_ptr               go to state 43
    enum_def               go to state 44
    id_or_constant         go to state 74
    include_or_link        go to state 45
    constant               go to state 75
    constant_int           go to state 76
    constant_bool          go to state 77
    constant_enum_value    go to state 78
    id                     go to state 208
    type                   go to state 209
    composited_type        go to state 48


State 200

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 201

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 245


State 202

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 246


State 203

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 247


State 204

   10 semicoloned_statement: flow_control .
   26 statement: flow_control .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 205

   54 unary_op: array_index .
   66 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 106

    $default  reduce using rule 54 (unary_op)


State 206

   40 assignable_statement: member_op .
   67 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 107

    $default  reduce using rule 40 (assignable_statement)


State 207

   12 semicoloned_statement: function_def .
   27 statement: function_def .

    SEMICOLON  reduce using rule 27 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 208

   61 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   62            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
   63 member_op: id . FSTOP id
   64          | id . ARROW id
   65 variable_assign: id . EQUAL assignable_statement
   93 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | id . LEFT_BRACKET RIGHT_BRACKET scope
   99 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  100              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  102 variable_decl: id . COLON EQUAL assignable_statement
  137 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 248
    LEFT_SQUARE_BRACKET  shift, and go to state 110
    FSTOP                shift, and go to state 111
    COLON                shift, and go to state 112
    EQUAL                shift, and go to state 113
    ARROW                shift, and go to state 114

    $default  reduce using rule 137 (id_or_constant)


State 209

  150 constant_enum_value: type . COLON COLON id
  153 composited_type: type .

    COLON  shift, and go to state 144

    $default  reduce using rule 153 (composited_type)


State 210

  116 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 249
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 211

   94 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 94 (function_def)


State 212

  130 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 250


State 213

   93 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 157

    scope  go to state 251


State 214

  123 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 161
    MUT    shift, and go to state 11

    arg_pair         go to state 252
    type             go to state 47
    composited_type  go to state 164


State 215

  129 arg_pair: composited_type id .

    $default  reduce using rule 129 (arg_pair)


State 216

   61 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 61 (array_index)


State 217

   62 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 62 (array_index)


State 218

  102 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 102 (variable_decl)


State 219

   92 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET . scope
   96 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 157
    SEMICOLON   shift, and go to state 253

    scope  go to state 254


State 220

   91 function_def: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
   97 function_decl: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  123 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 255
    COMMA          shift, and go to state 214


State 221

  106 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  107           | composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 256


State 222

  103 variable_decl: composited_type id EQUAL assignable_statement .

    $default  reduce using rule 103 (variable_decl)


State 223

  108 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 257


State 224

   68 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 68 (cast)


State 225

   69 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 177


State 226

   70 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 178


State 227

  100 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 100 (function_call)


State 228

  125 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 258
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 229

  150 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 150 (constant_enum_value)


State 230

  115 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 115 (cond_block)


State 231

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 259


State 232

  117 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 117 (while_loop)


State 233

  131 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 131 (enum_def)


State 234

  134 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 260
    id         go to state 191


State 235

  136 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 50

    constant_int  go to state 261


State 236

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 34 (union_def)


State 237

  119 struct_list: struct_list struct_pair .

    $default  reduce using rule 119 (struct_list)


State 238

  121 struct_pair: composited_type id . SEMICOLON
  122            | composited_type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 262
    EQUAL      shift, and go to state 263


State 239

  155 composited_type: composited_type . ASTERISK
  156                | composited_type . MUT
  157 type_list: composited_type .

    ASTERISK  shift, and go to state 115
    MUT       shift, and go to state 116

    $default  reduce using rule 157 (type_list)


State 240

  127 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  158 type_list: type_list . COMMA composited_type

    RIGHT_BRACKET  shift, and go to state 264
    COMMA          shift, and go to state 265


State 241

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 31 (struct_def)


State 242

   36 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 36 (defer_statement)


State 243

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 46 (scope)


State 244

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 245

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 246

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 247

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 248

   93 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
   94             | id LEFT_BRACKET . RIGHT_BRACKET scope
   99 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  100              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 266
    FSTOP          shift, and go to state 161
    PLUS           shift, and go to state 53
    MINUS          shift, and go to state 54
    ASTERISK       shift, and go to state 55
    AND            shift, and go to state 56
    TRUE           shift, and go to state 57
    FALSE          shift, and go to state 58
    MUT            shift, and go to state 11
    NULLPTR        shift, and go to state 59

    assignable_statement  go to state 183
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    arg_list              go to state 162
    statement_list        go to state 184
    arg_pair              go to state 163
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 209
    composited_type       go to state 164


State 249

  116 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 267


State 250

  130 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 130 (arg_pair)


State 251

   93 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 93 (function_def)


State 252

  123 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 123 (arg_list)


State 253

   96 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 96 (function_decl)


State 254

   92 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 92 (function_def)


State 255

   91 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
   97 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 157
    SEMICOLON   shift, and go to state 268

    scope  go to state 269


State 256

  106 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  107           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 270

    $default  reduce using rule 106 (array_decl)


State 257

  108 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  109           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 271


State 258

  125 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 125 (statement_list)


State 259

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 272
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 260

  134 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 134 (enum_parts)


State 261

  136 enum_part: id EQUAL constant_int .

    $default  reduce using rule 136 (enum_part)


State 262

  121 struct_pair: composited_type id SEMICOLON .

    $default  reduce using rule 121 (struct_pair)


State 263

  122 struct_pair: composited_type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 53
    MINUS         shift, and go to state 54
    ASTERISK      shift, and go to state 55
    AND           shift, and go to state 56
    TRUE          shift, and go to state 57
    FALSE         shift, and go to state 58
    NULLPTR       shift, and go to state 59

    assignable_statement  go to state 273
    unary_op              go to state 61
    unary_minus           go to state 62
    unary_plus            go to state 63
    binary_op             go to state 64
    array_index           go to state 65
    member_op             go to state 66
    cast                  go to state 67
    increment             go to state 68
    decrement             go to state 69
    address_of            go to state 70
    dereference           go to state 71
    binop                 go to state 72
    function_call         go to state 73
    id_or_constant        go to state 74
    constant              go to state 75
    constant_int          go to state 76
    constant_bool         go to state 77
    constant_enum_value   go to state 78
    id                    go to state 79
    type                  go to state 80


State 264

  127 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 127 (func_ptr)


State 265

  158 type_list: type_list COMMA . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 274


State 266

   94 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
   99 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 157

    $default  reduce using rule 99 (function_call)

    scope  go to state 211


State 267

  116 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 157

    scope  go to state 275


State 268

   97 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 97 (function_decl)


State 269

   91 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 91 (function_def)


State 270

  107 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 276


State 271

  108 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  109           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 277

    $default  reduce using rule 108 (array_decl)


State 272

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 278


State 273

  122 struct_pair: composited_type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 279


State 274

  155 composited_type: composited_type . ASTERISK
  156                | composited_type . MUT
  158 type_list: type_list COMMA composited_type .

    ASTERISK  shift, and go to state 115
    MUT       shift, and go to state 116

    $default  reduce using rule 158 (type_list)


State 275

  116 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 116 (cond_block)


State 276

  107 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    init_list            go to state 280
    id_or_constant       go to state 281
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 277

  109 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 282


State 278

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 157

    scope  go to state 283


State 279

  122 struct_pair: composited_type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 122 (struct_pair)


State 280

  107 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  111 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 284
    COMMA        shift, and go to state 285


State 281

  110 init_list: id_or_constant .

    $default  reduce using rule 110 (init_list)


State 282

  109 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    init_list            go to state 286
    id_or_constant       go to state 281
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 283

  118 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 118 (for_loop)


State 284

  107 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 107 (array_decl)


State 285

  111 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 57
    FALSE       shift, and go to state 58
    NULLPTR     shift, and go to state 59

    id_or_constant       go to state 287
    constant             go to state 75
    constant_int         go to state 76
    constant_bool        go to state 77
    constant_enum_value  go to state 78
    id                   go to state 120
    type                 go to state 80


State 286

  109 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  111 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 288
    COMMA        shift, and go to state 285


State 287

  111 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 111 (init_list)


State 288

  109 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 109 (array_decl)
