Terminals unused in grammar

   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   ARROW
   UNKNOWN


Rules useless in parser due to conflicts

   28 statement: struct_decl


State 25 conflicts: 19 reduce/reduce
State 89 conflicts: 2 shift/reduce
State 117 conflicts: 1 shift/reduce
State 140 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | struct_decl
   21          | import
   22          | include_or_link
   23          | func_ptr
   24          | enum_def
   25          | union_def
   26          | flow_control
   27          | function_def
   28          | struct_decl

   29 alias_statement: ALIAS TYPE TYPE

   30 typedef_statement: TYPEDEF TYPE TYPE

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE
   32           | EXPORT struct_def

   33 struct_decl: STRUCT type

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE
   35          | EXPORT union_def

   36 defer_statement: DEFER assignable_statement

   37 assignable_statement: function_call
   38                     | unary_op
   39                     | binary_op
   40                     | member_op
   41                     | id_or_constant

   42 flow_control: if_statement
   43             | loop

   44 loop: while_loop
   45     | for_loop

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE RIGHT_BRACE

   48 import: IMPORT id

   49 unary_op: cast
   50         | increment
   51         | decrement
   52         | address_of
   53         | dereference
   54         | array_index
   55         | unary_minus
   56         | unary_plus

   57 unary_minus: MINUS id_or_constant

   58 unary_plus: PLUS id_or_constant

   59 binary_op: binop

   60 assign_op: variable_assign

   61 memberable: id
   62           | array_index

   63 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   64            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   65 member_op: memberable FSTOP memberable
   66          | memberable FSTOP member_op

   67 variable_assign: id EQUAL assignable_statement
   68                | array_index EQUAL assignable_statement
   69                | member_op EQUAL assignable_statement

   70 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant

   71 increment: id_or_constant PLUS PLUS

   72 decrement: id_or_constant MINUS MINUS

   73 address_of: AND id

   74 dereference: ASTERISK id

   75 binop_id: PLUS
   76         | MINUS
   77         | ASTERISK
   78         | FORWARD_SLASH
   79         | EQUAL_EQUAL
   80         | EXCLAMATION_EQUAL
   81         | LESSER
   82         | GREATER
   83         | LESSER_EQUAL
   84         | GREATER_EQUAL
   85         | AND
   86         | OR
   87         | LEFT_SHIFT
   88         | RIGHT_SHIFT
   89         | PERCENT

   90 binop: id_or_constant binop_id id_or_constant
   91      | id_or_constant binop_id unary_op
   92      | unary_op binop_id id_or_constant

   93 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | composited_type id LEFT_BRACKET RIGHT_BRACKET scope
   95             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
   96             | id LEFT_BRACKET RIGHT_BRACKET scope
   97             | EXPORT function_def

   98 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
   99              | composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  100              | EXPORT function_decl

  101 function_call: id LEFT_BRACKET RIGHT_BRACKET
  102              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  103 variable_decl: composited_type id
  104              | id COLON EQUAL assignable_statement
  105              | composited_type id EQUAL assignable_statement
  106              | array_decl
  107              | EXPORT variable_decl

  108 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  110           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  111           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  112 init_list: id_or_constant
  113          | init_list COMMA id_or_constant

  114 return_statement: RETURN assignable_statement

  115 if_statement: cond_block
  116             | cond_block ELSE scope

  117 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  118           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  119 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  121 struct_list: struct_list struct_pair
  122            | struct_pair

  123 struct_pair: composited_type id SEMICOLON
  124            | composited_type id EQUAL assignable_statement SEMICOLON

  125 arg_list: arg_list COMMA arg_pair
  126         | arg_pair

  127 statement_list: statement_list COMMA assignable_statement
  128               | assignable_statement

  129 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET
  130         | EXPORT func_ptr

  131 arg_pair: composited_type id
  132         | FSTOP FSTOP FSTOP

  133 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE
  134         | EXPORT enum_def

  135 enum_parts: enum_part
  136           | enum_parts COMMA enum_part

  137 enum_part: id
  138          | id EQUAL constant_int

  139 id_or_constant: id
  140               | constant

  141 include_or_link: INCLUDE STRING
  142                | LINK STRING

  143 constant: constant_int
  144         | constant_enum_value
  145         | constant_bool
  146         | FLOAT
  147         | STRING
  148         | NULLPTR

  149 constant_int: INTEGER

  150 constant_bool: TRUE
  151              | FALSE

  152 constant_enum_value: type COLON COLON id

  153 id: IDENTIFIER

  154 type: TYPE

  155 composited_type: type
  156                | MUT composited_type
  157                | composited_type ASTERISK
  158                | composited_type MUT

  159 type_list: composited_type
  160          | type_list COMMA composited_type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 153
STRING (259) 141 142 147
INTEGER (260) 149
FLOAT (261) 146
TYPE (262) 29 30 154
LEFT_BRACKET (263) 70 93 94 95 96 98 99 101 102 117 118 119 120 129
RIGHT_BRACKET (264) 70 93 94 95 96 98 99 101 102 117 118 119 120 129
LEFT_BRACE (265) 31 34 46 47 109 111 133
RIGHT_BRACE (266) 31 34 46 47 109 111 133
LEFT_SQUARE_BRACKET (267) 63 64 108 109 110 111
RIGHT_SQUARE_BRACKET (268) 63 64 108 109 110 111
COMMA (269) 113 125 127 136 160
FSTOP (270) 65 66 132
SEMICOLON (271) 5 8 9 11 98 99 120 123 124
COLON (272) 104 152
PLUS (273) 58 71 75
MINUS (274) 57 72 76
ASTERISK (275) 74 77 157
FORWARD_SLASH (276) 78
PERCENT (277) 89
EQUAL (278) 67 68 69 104 105 109 111 124 138
EQUAL_EQUAL (279) 79
EXCLAMATION (280)
EXCLAMATION_EQUAL (281) 80
GREATER (282) 82
GREATER_EQUAL (283) 84
LESSER (284) 81
LESSER_EQUAL (285) 83
AND (286) 73 85
AND_AND (287)
OR (288) 86
OR_OR (289)
LEFT_SHIFT (290) 87
RIGHT_SHIFT (291) 88
RETURN (292) 114
DEFER (293) 36
IF (294) 117 118
ELSE (295) 116 118
FOR (296) 120
WHILE (297) 119
TYPEDEF (298) 30
ALIAS (299) 29
AUTO (300)
ENUM (301) 133
UNION (302) 34
TRUE (303) 150
FALSE (304) 151
MUT (305) 110 111 156 158
EXTERN (306)
IMPORT (307) 48
EXPORT (308) 32 35 97 100 107 130 134
INCLUDE (309) 141
LINK (310) 142
FUNC_PTR (311) 129
NULLPTR (312) 148
STRUCT (313) 31 33
ARROW (314)
UNKNOWN (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
module (62)
    on left: 1, on right: 0
statements (63)
    on left: 2 3, on right: 1 3
node_setup (64)
    on left: 4 5, on right: 2 3
semicoloned_statements (65)
    on left: 6 7, on right: 7 46
semicoloned_statement (66)
    on left: 8 9 10 11 12, on right: 6 7
statement (67)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    4 5 8 120
alias_statement (68)
    on left: 29, on right: 17
typedef_statement (69)
    on left: 30, on right: 18
struct_def (70)
    on left: 31 32, on right: 19 32
struct_decl (71)
    on left: 33, on right: 20 28
union_def (72)
    on left: 34 35, on right: 25 35
defer_statement (73)
    on left: 36, on right: 11
assignable_statement (74)
    on left: 37 38 39 40 41, on right: 9 36 67 68 69 104 105 114 117
    118 119 120 124 127 128
flow_control (75)
    on left: 42 43, on right: 10 26
loop (76)
    on left: 44 45, on right: 43
scope (77)
    on left: 46 47, on right: 93 94 95 96 116 117 118 119 120
import (78)
    on left: 48, on right: 21
unary_op (79)
    on left: 49 50 51 52 53 54 55 56, on right: 38 91 92
unary_minus (80)
    on left: 57, on right: 55
unary_plus (81)
    on left: 58, on right: 56
binary_op (82)
    on left: 59, on right: 39
assign_op (83)
    on left: 60, on right: 16
memberable (84)
    on left: 61 62, on right: 65 66
array_index (85)
    on left: 63 64, on right: 54 62 68
member_op (86)
    on left: 65 66, on right: 40 66 69
variable_assign (87)
    on left: 67 68 69, on right: 60
cast (88)
    on left: 70, on right: 49
increment (89)
    on left: 71, on right: 50
decrement (90)
    on left: 72, on right: 51
address_of (91)
    on left: 73, on right: 52
dereference (92)
    on left: 74, on right: 53
binop_id (93)
    on left: 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89, on right:
    90 91 92
binop (94)
    on left: 90 91 92, on right: 59
function_def (95)
    on left: 93 94 95 96 97, on right: 12 27 97
function_decl (96)
    on left: 98 99 100, on right: 14 100
function_call (97)
    on left: 101 102, on right: 37
variable_decl (98)
    on left: 103 104 105 106 107, on right: 15 107
array_decl (99)
    on left: 108 109 110 111, on right: 106
init_list (100)
    on left: 112 113, on right: 109 111 113
return_statement (101)
    on left: 114, on right: 13
if_statement (102)
    on left: 115 116, on right: 42
cond_block (103)
    on left: 117 118, on right: 115 116 118
while_loop (104)
    on left: 119, on right: 44
for_loop (105)
    on left: 120, on right: 45
struct_list (106)
    on left: 121 122, on right: 31 34 121
struct_pair (107)
    on left: 123 124, on right: 121 122
arg_list (108)
    on left: 125 126, on right: 93 95 99 125
statement_list (109)
    on left: 127 128, on right: 102 127
func_ptr (110)
    on left: 129 130, on right: 23 130
arg_pair (111)
    on left: 131 132, on right: 125 126
enum_def (112)
    on left: 133 134, on right: 24 134
enum_parts (113)
    on left: 135 136, on right: 133 136
enum_part (114)
    on left: 137 138, on right: 135 136
id_or_constant (115)
    on left: 139 140, on right: 41 57 58 70 71 72 90 91 92 112 113
include_or_link (116)
    on left: 141 142, on right: 22
constant (117)
    on left: 143 144 145 146 147 148, on right: 140
constant_int (118)
    on left: 149, on right: 63 108 109 110 111 138 143
constant_bool (119)
    on left: 150 151, on right: 145
constant_enum_value (120)
    on left: 152, on right: 144
id (121)
    on left: 153, on right: 48 61 63 64 67 73 74 93 94 95 96 98 99
    101 102 103 104 105 108 109 110 111 123 124 131 137 138 139 152
type (122)
    on left: 154, on right: 31 33 34 129 133 152 155
composited_type (123)
    on left: 155 156 157 158, on right: 70 93 94 98 99 103 105 108
    109 110 111 123 124 131 156 157 158 159 160
type_list (124)
    on left: 159 160, on right: 129 160


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    module             go to state 18
    statements         go to state 19
    node_setup         go to state 20
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    memberable         go to state 31
    array_index        go to state 32
    member_op          go to state 33
    variable_assign    go to state 34
    function_def       go to state 35
    function_decl      go to state 36
    variable_decl      go to state 37
    array_decl         go to state 38
    return_statement   go to state 39
    if_statement       go to state 40
    cond_block         go to state 41
    while_loop         go to state 42
    for_loop           go to state 43
    func_ptr           go to state 44
    enum_def           go to state 45
    include_or_link    go to state 46
    id                 go to state 47
    type               go to state 48
    composited_type    go to state 49


State 1

  153 id: IDENTIFIER .

    $default  reduce using rule 153 (id)


State 2

  154 type: TYPE .

    $default  reduce using rule 154 (type)


State 3

  114 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 61
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 4

  117 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 82


State 5

  120 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 83


State 6

  119 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 84


State 7

   30 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 85


State 8

   29 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 86


State 9

  133 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 87


State 10

   34 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 88


State 11

  156 composited_type: MUT . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 48
    composited_type  go to state 89


State 12

   48 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 90


State 13

   32 struct_def: EXPORT . struct_def
   35 union_def: EXPORT . union_def
   97 function_def: EXPORT . function_def
  100 function_decl: EXPORT . function_decl
  107 variable_decl: EXPORT . variable_decl
  130 func_ptr: EXPORT . func_ptr
  134 enum_def: EXPORT . enum_def

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    EXPORT      shift, and go to state 13
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 91

    struct_def       go to state 92
    union_def        go to state 93
    function_def     go to state 94
    function_decl    go to state 95
    variable_decl    go to state 96
    array_decl       go to state 38
    func_ptr         go to state 97
    enum_def         go to state 98
    id               go to state 99
    type             go to state 48
    composited_type  go to state 49


State 14

  141 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 100


State 15

  142 include_or_link: LINK . STRING

    STRING  shift, and go to state 101


State 16

  129 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 102


State 17

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 103


State 18

    0 $accept: module . $end

    $end  shift, and go to state 104


State 19

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    $default  reduce using rule 1 (module)

    node_setup         go to state 105
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    memberable         go to state 31
    array_index        go to state 32
    member_op          go to state 33
    variable_assign    go to state 34
    function_def       go to state 35
    function_decl      go to state 36
    variable_decl      go to state 37
    array_decl         go to state 38
    return_statement   go to state 39
    if_statement       go to state 40
    cond_block         go to state 41
    while_loop         go to state 42
    for_loop           go to state 43
    func_ptr           go to state 44
    enum_def           go to state 45
    include_or_link    go to state 46
    id                 go to state 47
    type               go to state 48
    composited_type    go to state 49


State 20

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 21

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 106

    $default  reduce using rule 4 (node_setup)


State 22

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 23

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 24

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 25

   20 statement: struct_decl .
   28          | struct_decl .

    $end        reduce using rule 20 (statement)
    $end        [reduce using rule 28 (statement)]
    IDENTIFIER  reduce using rule 20 (statement)
    IDENTIFIER  [reduce using rule 28 (statement)]
    TYPE        reduce using rule 20 (statement)
    TYPE        [reduce using rule 28 (statement)]
    SEMICOLON   reduce using rule 20 (statement)
    SEMICOLON   [reduce using rule 28 (statement)]
    RETURN      reduce using rule 20 (statement)
    RETURN      [reduce using rule 28 (statement)]
    IF          reduce using rule 20 (statement)
    IF          [reduce using rule 28 (statement)]
    FOR         reduce using rule 20 (statement)
    FOR         [reduce using rule 28 (statement)]
    WHILE       reduce using rule 20 (statement)
    WHILE       [reduce using rule 28 (statement)]
    TYPEDEF     reduce using rule 20 (statement)
    TYPEDEF     [reduce using rule 28 (statement)]
    ALIAS       reduce using rule 20 (statement)
    ALIAS       [reduce using rule 28 (statement)]
    ENUM        reduce using rule 20 (statement)
    ENUM        [reduce using rule 28 (statement)]
    UNION       reduce using rule 20 (statement)
    UNION       [reduce using rule 28 (statement)]
    MUT         reduce using rule 20 (statement)
    MUT         [reduce using rule 28 (statement)]
    IMPORT      reduce using rule 20 (statement)
    IMPORT      [reduce using rule 28 (statement)]
    EXPORT      reduce using rule 20 (statement)
    EXPORT      [reduce using rule 28 (statement)]
    INCLUDE     reduce using rule 20 (statement)
    INCLUDE     [reduce using rule 28 (statement)]
    LINK        reduce using rule 20 (statement)
    LINK        [reduce using rule 28 (statement)]
    FUNC_PTR    reduce using rule 20 (statement)
    FUNC_PTR    [reduce using rule 28 (statement)]
    STRUCT      reduce using rule 20 (statement)
    STRUCT      [reduce using rule 28 (statement)]
    $default    reduce using rule 20 (statement)


State 26

   25 statement: union_def .

    $default  reduce using rule 25 (statement)


State 27

   26 statement: flow_control .

    $default  reduce using rule 26 (statement)


State 28

   43 flow_control: loop .

    $default  reduce using rule 43 (flow_control)


State 29

   21 statement: import .

    $default  reduce using rule 21 (statement)


State 30

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 31

   65 member_op: memberable . FSTOP memberable
   66          | memberable . FSTOP member_op

    FSTOP  shift, and go to state 107


State 32

   62 memberable: array_index .
   68 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 108

    $default  reduce using rule 62 (memberable)


State 33

   69 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 109


State 34

   60 assign_op: variable_assign .

    $default  reduce using rule 60 (assign_op)


State 35

   27 statement: function_def .

    $default  reduce using rule 27 (statement)


State 36

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 37

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 38

  106 variable_decl: array_decl .

    $default  reduce using rule 106 (variable_decl)


State 39

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 40

   42 flow_control: if_statement .

    $default  reduce using rule 42 (flow_control)


State 41

  115 if_statement: cond_block .
  116             | cond_block . ELSE scope
  118 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 110

    $default  reduce using rule 115 (if_statement)


State 42

   44 loop: while_loop .

    $default  reduce using rule 44 (loop)


State 43

   45 loop: for_loop .

    $default  reduce using rule 45 (loop)


State 44

   23 statement: func_ptr .

    $default  reduce using rule 23 (statement)


State 45

   24 statement: enum_def .

    $default  reduce using rule 24 (statement)


State 46

   22 statement: include_or_link .

    $default  reduce using rule 22 (statement)


State 47

   61 memberable: id .
   63 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   64            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
   67 variable_assign: id . EQUAL assignable_statement
   95 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   96             | id . LEFT_BRACKET RIGHT_BRACKET scope
  104 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 111
    LEFT_SQUARE_BRACKET  shift, and go to state 112
    COLON                shift, and go to state 113
    EQUAL                shift, and go to state 114

    $default  reduce using rule 61 (memberable)


State 48

  155 composited_type: type .

    $default  reduce using rule 155 (composited_type)


State 49

   93 function_def: composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | composited_type . id LEFT_BRACKET RIGHT_BRACKET scope
   98 function_decl: composited_type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
   99              | composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  103 variable_decl: composited_type . id
  105              | composited_type . id EQUAL assignable_statement
  108 array_decl: composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  110           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  111           | composited_type . id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  157 composited_type: composited_type . ASTERISK
  158                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 115
    MUT         shift, and go to state 116

    id  go to state 117


State 50

  147 constant: STRING .

    $default  reduce using rule 147 (constant)


State 51

  149 constant_int: INTEGER .

    $default  reduce using rule 149 (constant_int)


State 52

  146 constant: FLOAT .

    $default  reduce using rule 146 (constant)


State 53

   70 cast: LEFT_BRACKET . composited_type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 48
    composited_type  go to state 118


State 54

   58 unary_plus: PLUS . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    id_or_constant       go to state 119
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 55

   57 unary_minus: MINUS . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    id_or_constant       go to state 121
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 56

   74 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 122


State 57

   73 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 123


State 58

  150 constant_bool: TRUE .

    $default  reduce using rule 150 (constant_bool)


State 59

  151 constant_bool: FALSE .

    $default  reduce using rule 151 (constant_bool)


State 60

  148 constant: NULLPTR .

    $default  reduce using rule 148 (constant)


State 61

  114 return_statement: RETURN assignable_statement .

    $default  reduce using rule 114 (return_statement)


State 62

   38 assignable_statement: unary_op .
   92 binop: unary_op . binop_id id_or_constant

    PLUS               shift, and go to state 124
    MINUS              shift, and go to state 125
    ASTERISK           shift, and go to state 126
    FORWARD_SLASH      shift, and go to state 127
    PERCENT            shift, and go to state 128
    EQUAL_EQUAL        shift, and go to state 129
    EXCLAMATION_EQUAL  shift, and go to state 130
    GREATER            shift, and go to state 131
    GREATER_EQUAL      shift, and go to state 132
    LESSER             shift, and go to state 133
    LESSER_EQUAL       shift, and go to state 134
    AND                shift, and go to state 135
    OR                 shift, and go to state 136
    LEFT_SHIFT         shift, and go to state 137
    RIGHT_SHIFT        shift, and go to state 138

    $default  reduce using rule 38 (assignable_statement)

    binop_id  go to state 139


State 63

   55 unary_op: unary_minus .

    $default  reduce using rule 55 (unary_op)


State 64

   56 unary_op: unary_plus .

    $default  reduce using rule 56 (unary_op)


State 65

   39 assignable_statement: binary_op .

    $default  reduce using rule 39 (assignable_statement)


State 66

   54 unary_op: array_index .
   62 memberable: array_index .

    FSTOP     reduce using rule 62 (memberable)
    $default  reduce using rule 54 (unary_op)


State 67

   40 assignable_statement: member_op .

    $default  reduce using rule 40 (assignable_statement)


State 68

   49 unary_op: cast .

    $default  reduce using rule 49 (unary_op)


State 69

   50 unary_op: increment .

    $default  reduce using rule 50 (unary_op)


State 70

   51 unary_op: decrement .

    $default  reduce using rule 51 (unary_op)


State 71

   52 unary_op: address_of .

    $default  reduce using rule 52 (unary_op)


State 72

   53 unary_op: dereference .

    $default  reduce using rule 53 (unary_op)


State 73

   59 binary_op: binop .

    $default  reduce using rule 59 (binary_op)


State 74

   37 assignable_statement: function_call .

    $default  reduce using rule 37 (assignable_statement)


State 75

   41 assignable_statement: id_or_constant .
   71 increment: id_or_constant . PLUS PLUS
   72 decrement: id_or_constant . MINUS MINUS
   90 binop: id_or_constant . binop_id id_or_constant
   91      | id_or_constant . binop_id unary_op

    PLUS               shift, and go to state 140
    MINUS              shift, and go to state 141
    ASTERISK           shift, and go to state 126
    FORWARD_SLASH      shift, and go to state 127
    PERCENT            shift, and go to state 128
    EQUAL_EQUAL        shift, and go to state 129
    EXCLAMATION_EQUAL  shift, and go to state 130
    GREATER            shift, and go to state 131
    GREATER_EQUAL      shift, and go to state 132
    LESSER             shift, and go to state 133
    LESSER_EQUAL       shift, and go to state 134
    AND                shift, and go to state 135
    OR                 shift, and go to state 136
    LEFT_SHIFT         shift, and go to state 137
    RIGHT_SHIFT        shift, and go to state 138

    $default  reduce using rule 41 (assignable_statement)

    binop_id  go to state 142


State 76

  140 id_or_constant: constant .

    $default  reduce using rule 140 (id_or_constant)


State 77

  143 constant: constant_int .

    $default  reduce using rule 143 (constant)


State 78

  145 constant: constant_bool .

    $default  reduce using rule 145 (constant)


State 79

  144 constant: constant_enum_value .

    $default  reduce using rule 144 (constant)


State 80

   61 memberable: id .
   63 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   64            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  101 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  102              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  139 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 143
    LEFT_SQUARE_BRACKET  shift, and go to state 112

    FSTOP     reduce using rule 61 (memberable)
    $default  reduce using rule 139 (id_or_constant)


State 81

  152 constant_enum_value: type . COLON COLON id

    COLON  shift, and go to state 144


State 82

  117 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 145
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 83

  120 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    statement          go to state 146
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    memberable         go to state 31
    array_index        go to state 32
    member_op          go to state 33
    variable_assign    go to state 34
    function_def       go to state 35
    function_decl      go to state 36
    variable_decl      go to state 37
    array_decl         go to state 38
    return_statement   go to state 39
    if_statement       go to state 40
    cond_block         go to state 41
    while_loop         go to state 42
    for_loop           go to state 43
    func_ptr           go to state 44
    enum_def           go to state 45
    include_or_link    go to state 46
    id                 go to state 47
    type               go to state 48
    composited_type    go to state 49


State 84

  119 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 147
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 85

   30 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 148


State 86

   29 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 149


State 87

  133 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 150


State 88

   34 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 151


State 89

  156 composited_type: MUT composited_type .
  157                | composited_type . ASTERISK
  158                | composited_type . MUT

    ASTERISK  shift, and go to state 115
    MUT       shift, and go to state 116

    ASTERISK  [reduce using rule 156 (composited_type)]
    MUT       [reduce using rule 156 (composited_type)]
    $default  reduce using rule 156 (composited_type)


State 90

   48 import: IMPORT id .

    $default  reduce using rule 48 (import)


State 91

   31 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 152


State 92

   32 struct_def: EXPORT struct_def .

    $default  reduce using rule 32 (struct_def)


State 93

   35 union_def: EXPORT union_def .

    $default  reduce using rule 35 (union_def)


State 94

   97 function_def: EXPORT function_def .

    $default  reduce using rule 97 (function_def)


State 95

  100 function_decl: EXPORT function_decl .

    $default  reduce using rule 100 (function_decl)


State 96

  107 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 107 (variable_decl)


State 97

  130 func_ptr: EXPORT func_ptr .

    $default  reduce using rule 130 (func_ptr)


State 98

  134 enum_def: EXPORT enum_def .

    $default  reduce using rule 134 (enum_def)


State 99

   95 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   96             | id . LEFT_BRACKET RIGHT_BRACKET scope
  104 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 111
    COLON         shift, and go to state 113


State 100

  141 include_or_link: INCLUDE STRING .

    $default  reduce using rule 141 (include_or_link)


State 101

  142 include_or_link: LINK STRING .

    $default  reduce using rule 142 (include_or_link)


State 102

  129 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 153


State 103

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   33 struct_decl: STRUCT type .

    LEFT_BRACE  shift, and go to state 154

    $default  reduce using rule 33 (struct_decl)


State 104

    0 $accept: module $end .

    $default  accept


State 105

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 106

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 107

   65 member_op: memberable FSTOP . memberable
   66          | memberable FSTOP . member_op

    IDENTIFIER  shift, and go to state 1

    memberable   go to state 155
    array_index  go to state 156
    member_op    go to state 157
    id           go to state 158


State 108

   68 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 159
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 109

   69 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 160
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 110

  116 if_statement: cond_block ELSE . scope
  118 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 161
    IF          shift, and go to state 162

    scope  go to state 163


State 111

   95 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
   96             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 164
    FSTOP          shift, and go to state 165
    MUT            shift, and go to state 11

    arg_list         go to state 166
    arg_pair         go to state 167
    type             go to state 48
    composited_type  go to state 168


State 112

   63 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   64            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 51

    constant_int  go to state 169
    id            go to state 170


State 113

  104 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 171


State 114

   67 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 172
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 115

  157 composited_type: composited_type ASTERISK .

    $default  reduce using rule 157 (composited_type)


State 116

  158 composited_type: composited_type MUT .

    $default  reduce using rule 158 (composited_type)


State 117

   93 function_def: composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   94             | composited_type id . LEFT_BRACKET RIGHT_BRACKET scope
   98 function_decl: composited_type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
   99              | composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  103 variable_decl: composited_type id .
  105              | composited_type id . EQUAL assignable_statement
  108 array_decl: composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  110           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  111           | composited_type id . MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 173
    LEFT_SQUARE_BRACKET  shift, and go to state 174
    EQUAL                shift, and go to state 175
    MUT                  shift, and go to state 176

    MUT       [reduce using rule 103 (variable_decl)]
    $default  reduce using rule 103 (variable_decl)


State 118

   70 cast: LEFT_BRACKET composited_type . RIGHT_BRACKET id_or_constant
  157 composited_type: composited_type . ASTERISK
  158                | composited_type . MUT

    RIGHT_BRACKET  shift, and go to state 177
    ASTERISK       shift, and go to state 115
    MUT            shift, and go to state 116


State 119

   58 unary_plus: PLUS id_or_constant .

    $default  reduce using rule 58 (unary_plus)


State 120

  139 id_or_constant: id .

    $default  reduce using rule 139 (id_or_constant)


State 121

   57 unary_minus: MINUS id_or_constant .

    $default  reduce using rule 57 (unary_minus)


State 122

   74 dereference: ASTERISK id .

    $default  reduce using rule 74 (dereference)


State 123

   73 address_of: AND id .

    $default  reduce using rule 73 (address_of)


State 124

   75 binop_id: PLUS .

    $default  reduce using rule 75 (binop_id)


State 125

   76 binop_id: MINUS .

    $default  reduce using rule 76 (binop_id)


State 126

   77 binop_id: ASTERISK .

    $default  reduce using rule 77 (binop_id)


State 127

   78 binop_id: FORWARD_SLASH .

    $default  reduce using rule 78 (binop_id)


State 128

   89 binop_id: PERCENT .

    $default  reduce using rule 89 (binop_id)


State 129

   79 binop_id: EQUAL_EQUAL .

    $default  reduce using rule 79 (binop_id)


State 130

   80 binop_id: EXCLAMATION_EQUAL .

    $default  reduce using rule 80 (binop_id)


State 131

   82 binop_id: GREATER .

    $default  reduce using rule 82 (binop_id)


State 132

   84 binop_id: GREATER_EQUAL .

    $default  reduce using rule 84 (binop_id)


State 133

   81 binop_id: LESSER .

    $default  reduce using rule 81 (binop_id)


State 134

   83 binop_id: LESSER_EQUAL .

    $default  reduce using rule 83 (binop_id)


State 135

   85 binop_id: AND .

    $default  reduce using rule 85 (binop_id)


State 136

   86 binop_id: OR .

    $default  reduce using rule 86 (binop_id)


State 137

   87 binop_id: LEFT_SHIFT .

    $default  reduce using rule 87 (binop_id)


State 138

   88 binop_id: RIGHT_SHIFT .

    $default  reduce using rule 88 (binop_id)


State 139

   92 binop: unary_op binop_id . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    id_or_constant       go to state 178
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 140

   71 increment: id_or_constant PLUS . PLUS
   75 binop_id: PLUS .

    PLUS  shift, and go to state 179

    PLUS      [reduce using rule 75 (binop_id)]
    $default  reduce using rule 75 (binop_id)


State 141

   72 decrement: id_or_constant MINUS . MINUS
   76 binop_id: MINUS .

    MINUS  shift, and go to state 180

    MINUS     [reduce using rule 76 (binop_id)]
    $default  reduce using rule 76 (binop_id)


State 142

   90 binop: id_or_constant binop_id . id_or_constant
   91      | id_or_constant binop_id . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    unary_op             go to state 181
    unary_minus          go to state 63
    unary_plus           go to state 64
    array_index          go to state 182
    cast                 go to state 68
    increment            go to state 69
    decrement            go to state 70
    address_of           go to state 71
    dereference          go to state 72
    id_or_constant       go to state 183
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 184
    type                 go to state 81


State 143

  101 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  102              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 50
    INTEGER        shift, and go to state 51
    FLOAT          shift, and go to state 52
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 53
    RIGHT_BRACKET  shift, and go to state 185
    PLUS           shift, and go to state 54
    MINUS          shift, and go to state 55
    ASTERISK       shift, and go to state 56
    AND            shift, and go to state 57
    TRUE           shift, and go to state 58
    FALSE          shift, and go to state 59
    NULLPTR        shift, and go to state 60

    assignable_statement  go to state 186
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    statement_list        go to state 187
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 144

  152 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 188


State 145

  117 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 189


State 146

  120 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 190


State 147

  119 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 191


State 148

   30 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 30 (typedef_statement)


State 149

   29 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 29 (alias_statement)


State 150

  133 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 192
    enum_part   go to state 193
    id          go to state 194


State 151

   34 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 195
    struct_pair      go to state 196
    type             go to state 48
    composited_type  go to state 197


State 152

   31 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 154


State 153

  129 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 198


State 154

   31 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    struct_list      go to state 199
    struct_pair      go to state 196
    type             go to state 48
    composited_type  go to state 197


State 155

   65 member_op: memberable . FSTOP memberable
   65          | memberable FSTOP memberable .
   66          | memberable . FSTOP member_op

    FSTOP  shift, and go to state 107

    $default  reduce using rule 65 (member_op)


State 156

   62 memberable: array_index .

    $default  reduce using rule 62 (memberable)


State 157

   66 member_op: memberable FSTOP member_op .

    $default  reduce using rule 66 (member_op)


State 158

   61 memberable: id .
   63 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   64            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 112

    $default  reduce using rule 61 (memberable)


State 159

   68 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 68 (variable_assign)


State 160

   69 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 69 (variable_assign)


State 161

   46 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   47      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    RIGHT_BRACE   shift, and go to state 200
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 201
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 60
    STRUCT        shift, and go to state 17

    semicoloned_statements  go to state 202
    semicoloned_statement   go to state 203
    statement               go to state 204
    alias_statement         go to state 22
    typedef_statement       go to state 23
    struct_def              go to state 24
    struct_decl             go to state 25
    union_def               go to state 26
    defer_statement         go to state 205
    assignable_statement    go to state 206
    flow_control            go to state 207
    loop                    go to state 28
    import                  go to state 29
    unary_op                go to state 62
    unary_minus             go to state 63
    unary_plus              go to state 64
    binary_op               go to state 65
    assign_op               go to state 30
    memberable              go to state 31
    array_index             go to state 208
    member_op               go to state 209
    variable_assign         go to state 34
    cast                    go to state 68
    increment               go to state 69
    decrement               go to state 70
    address_of              go to state 71
    dereference             go to state 72
    binop                   go to state 73
    function_def            go to state 210
    function_decl           go to state 36
    function_call           go to state 74
    variable_decl           go to state 37
    array_decl              go to state 38
    return_statement        go to state 39
    if_statement            go to state 40
    cond_block              go to state 41
    while_loop              go to state 42
    for_loop                go to state 43
    func_ptr                go to state 44
    enum_def                go to state 45
    id_or_constant          go to state 75
    include_or_link         go to state 46
    constant                go to state 76
    constant_int            go to state 77
    constant_bool           go to state 78
    constant_enum_value     go to state 79
    id                      go to state 211
    type                    go to state 212
    composited_type         go to state 49


State 162

  118 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 213


State 163

  116 if_statement: cond_block ELSE scope .

    $default  reduce using rule 116 (if_statement)


State 164

   96 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 161

    scope  go to state 214


State 165

  132 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 215


State 166

   95 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  125 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 216
    COMMA          shift, and go to state 217


State 167

  126 arg_list: arg_pair .

    $default  reduce using rule 126 (arg_list)


State 168

  131 arg_pair: composited_type . id
  157 composited_type: composited_type . ASTERISK
  158                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 115
    MUT         shift, and go to state 116

    id  go to state 218


State 169

   63 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 219


State 170

   64 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 220


State 171

  104 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 221
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 172

   67 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 67 (variable_assign)


State 173

   93 function_def: composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
   94             | composited_type id LEFT_BRACKET . RIGHT_BRACKET scope
   98 function_decl: composited_type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
   99              | composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 222
    FSTOP          shift, and go to state 165
    MUT            shift, and go to state 11

    arg_list         go to state 223
    arg_pair         go to state 167
    type             go to state 48
    composited_type  go to state 168


State 174

  108 array_decl: composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  109           | composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 51

    constant_int  go to state 224


State 175

  105 variable_decl: composited_type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 225
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 176

  110 array_decl: composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  111           | composited_type id MUT . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_SQUARE_BRACKET  shift, and go to state 226


State 177

   70 cast: LEFT_BRACKET composited_type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    id_or_constant       go to state 227
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 178

   92 binop: unary_op binop_id id_or_constant .

    $default  reduce using rule 92 (binop)


State 179

   71 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 71 (increment)


State 180

   72 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 72 (decrement)


State 181

   91 binop: id_or_constant binop_id unary_op .

    $default  reduce using rule 91 (binop)


State 182

   54 unary_op: array_index .

    $default  reduce using rule 54 (unary_op)


State 183

   71 increment: id_or_constant . PLUS PLUS
   72 decrement: id_or_constant . MINUS MINUS
   90 binop: id_or_constant binop_id id_or_constant .

    PLUS   shift, and go to state 228
    MINUS  shift, and go to state 229

    $default  reduce using rule 90 (binop)


State 184

   63 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   64            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  139 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 112

    $default  reduce using rule 139 (id_or_constant)


State 185

  101 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 101 (function_call)


State 186

  128 statement_list: assignable_statement .

    $default  reduce using rule 128 (statement_list)


State 187

  102 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  127 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 230
    COMMA          shift, and go to state 231


State 188

  152 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 232


State 189

  117 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 161

    scope  go to state 233


State 190

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 234
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 191

  119 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 161

    scope  go to state 235


State 192

  133 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  136 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 236
    COMMA        shift, and go to state 237


State 193

  135 enum_parts: enum_part .

    $default  reduce using rule 135 (enum_parts)


State 194

  137 enum_part: id .
  138          | id . EQUAL constant_int

    EQUAL  shift, and go to state 238

    $default  reduce using rule 137 (enum_part)


State 195

   34 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  121 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 239
    MUT          shift, and go to state 11

    struct_pair      go to state 240
    type             go to state 48
    composited_type  go to state 197


State 196

  122 struct_list: struct_pair .

    $default  reduce using rule 122 (struct_list)


State 197

  123 struct_pair: composited_type . id SEMICOLON
  124            | composited_type . id EQUAL assignable_statement SEMICOLON
  157 composited_type: composited_type . ASTERISK
  158                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 115
    MUT         shift, and go to state 116

    id  go to state 241


State 198

  129 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 48
    composited_type  go to state 242
    type_list        go to state 243


State 199

   31 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  121 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 244
    MUT          shift, and go to state 11

    struct_pair      go to state 240
    type             go to state 48
    composited_type  go to state 197


State 200

   47 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 47 (scope)


State 201

   36 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 245
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 202

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   46 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    RIGHT_BRACE   shift, and go to state 246
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 201
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 60
    STRUCT        shift, and go to state 17

    semicoloned_statement  go to state 247
    statement              go to state 204
    alias_statement        go to state 22
    typedef_statement      go to state 23
    struct_def             go to state 24
    struct_decl            go to state 25
    union_def              go to state 26
    defer_statement        go to state 205
    assignable_statement   go to state 206
    flow_control           go to state 207
    loop                   go to state 28
    import                 go to state 29
    unary_op               go to state 62
    unary_minus            go to state 63
    unary_plus             go to state 64
    binary_op              go to state 65
    assign_op              go to state 30
    memberable             go to state 31
    array_index            go to state 208
    member_op              go to state 209
    variable_assign        go to state 34
    cast                   go to state 68
    increment              go to state 69
    decrement              go to state 70
    address_of             go to state 71
    dereference            go to state 72
    binop                  go to state 73
    function_def           go to state 210
    function_decl          go to state 36
    function_call          go to state 74
    variable_decl          go to state 37
    array_decl             go to state 38
    return_statement       go to state 39
    if_statement           go to state 40
    cond_block             go to state 41
    while_loop             go to state 42
    for_loop               go to state 43
    func_ptr               go to state 44
    enum_def               go to state 45
    id_or_constant         go to state 75
    include_or_link        go to state 46
    constant               go to state 76
    constant_int           go to state 77
    constant_bool          go to state 78
    constant_enum_value    go to state 79
    id                     go to state 211
    type                   go to state 212
    composited_type        go to state 49


State 203

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 204

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 248


State 205

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 249


State 206

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 250


State 207

   10 semicoloned_statement: flow_control .
   26 statement: flow_control .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 208

   54 unary_op: array_index .
   62 memberable: array_index .
   68 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 108

    FSTOP     reduce using rule 62 (memberable)
    $default  reduce using rule 54 (unary_op)


State 209

   40 assignable_statement: member_op .
   69 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 109

    $default  reduce using rule 40 (assignable_statement)


State 210

   12 semicoloned_statement: function_def .
   27 statement: function_def .

    SEMICOLON  reduce using rule 27 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 211

   61 memberable: id .
   63 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   64            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
   67 variable_assign: id . EQUAL assignable_statement
   95 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
   96             | id . LEFT_BRACKET RIGHT_BRACKET scope
  101 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  102              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  104 variable_decl: id . COLON EQUAL assignable_statement
  139 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 251
    LEFT_SQUARE_BRACKET  shift, and go to state 112
    COLON                shift, and go to state 113
    EQUAL                shift, and go to state 114

    FSTOP     reduce using rule 61 (memberable)
    $default  reduce using rule 139 (id_or_constant)


State 212

  152 constant_enum_value: type . COLON COLON id
  155 composited_type: type .

    COLON  shift, and go to state 144

    $default  reduce using rule 155 (composited_type)


State 213

  118 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 252
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 214

   96 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 96 (function_def)


State 215

  132 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 253


State 216

   95 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 161

    scope  go to state 254


State 217

  125 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 165
    MUT    shift, and go to state 11

    arg_pair         go to state 255
    type             go to state 48
    composited_type  go to state 168


State 218

  131 arg_pair: composited_type id .

    $default  reduce using rule 131 (arg_pair)


State 219

   63 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 63 (array_index)


State 220

   64 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 64 (array_index)


State 221

  104 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 104 (variable_decl)


State 222

   94 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET . scope
   98 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 161
    SEMICOLON   shift, and go to state 256

    scope  go to state 257


State 223

   93 function_def: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
   99 function_decl: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  125 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 258
    COMMA          shift, and go to state 217


State 224

  108 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  109           | composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 259


State 225

  105 variable_decl: composited_type id EQUAL assignable_statement .

    $default  reduce using rule 105 (variable_decl)


State 226

  110 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  111           | composited_type id MUT LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 51

    constant_int  go to state 260


State 227

   70 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 70 (cast)


State 228

   71 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 179


State 229

   72 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 180


State 230

  102 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 102 (function_call)


State 231

  127 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 261
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 232

  152 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 152 (constant_enum_value)


State 233

  117 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 117 (cond_block)


State 234

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 262


State 235

  119 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 119 (while_loop)


State 236

  133 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 133 (enum_def)


State 237

  136 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 263
    id         go to state 194


State 238

  138 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 51

    constant_int  go to state 264


State 239

   34 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 34 (union_def)


State 240

  121 struct_list: struct_list struct_pair .

    $default  reduce using rule 121 (struct_list)


State 241

  123 struct_pair: composited_type id . SEMICOLON
  124            | composited_type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 265
    EQUAL      shift, and go to state 266


State 242

  157 composited_type: composited_type . ASTERISK
  158                | composited_type . MUT
  159 type_list: composited_type .

    ASTERISK  shift, and go to state 115
    MUT       shift, and go to state 116

    $default  reduce using rule 159 (type_list)


State 243

  129 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  160 type_list: type_list . COMMA composited_type

    RIGHT_BRACKET  shift, and go to state 267
    COMMA          shift, and go to state 268


State 244

   31 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 31 (struct_def)


State 245

   36 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 36 (defer_statement)


State 246

   46 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 46 (scope)


State 247

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 248

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 249

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 250

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 251

   95 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
   96             | id LEFT_BRACKET . RIGHT_BRACKET scope
  101 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  102              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 50
    INTEGER        shift, and go to state 51
    FLOAT          shift, and go to state 52
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 53
    RIGHT_BRACKET  shift, and go to state 269
    FSTOP          shift, and go to state 165
    PLUS           shift, and go to state 54
    MINUS          shift, and go to state 55
    ASTERISK       shift, and go to state 56
    AND            shift, and go to state 57
    TRUE           shift, and go to state 58
    FALSE          shift, and go to state 59
    MUT            shift, and go to state 11
    NULLPTR        shift, and go to state 60

    assignable_statement  go to state 186
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    arg_list              go to state 166
    statement_list        go to state 187
    arg_pair              go to state 167
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 212
    composited_type       go to state 168


State 252

  118 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 270


State 253

  132 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 132 (arg_pair)


State 254

   95 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 95 (function_def)


State 255

  125 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 125 (arg_list)


State 256

   98 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 98 (function_decl)


State 257

   94 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 94 (function_def)


State 258

   93 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
   99 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 161
    SEMICOLON   shift, and go to state 271

    scope  go to state 272


State 259

  108 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  109           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 273

    $default  reduce using rule 108 (array_decl)


State 260

  110 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  111           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 274


State 261

  127 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 127 (statement_list)


State 262

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 275
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 263

  136 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 136 (enum_parts)


State 264

  138 enum_part: id EQUAL constant_int .

    $default  reduce using rule 138 (enum_part)


State 265

  123 struct_pair: composited_type id SEMICOLON .

    $default  reduce using rule 123 (struct_pair)


State 266

  124 struct_pair: composited_type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 50
    INTEGER       shift, and go to state 51
    FLOAT         shift, and go to state 52
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 53
    PLUS          shift, and go to state 54
    MINUS         shift, and go to state 55
    ASTERISK      shift, and go to state 56
    AND           shift, and go to state 57
    TRUE          shift, and go to state 58
    FALSE         shift, and go to state 59
    NULLPTR       shift, and go to state 60

    assignable_statement  go to state 276
    unary_op              go to state 62
    unary_minus           go to state 63
    unary_plus            go to state 64
    binary_op             go to state 65
    memberable            go to state 31
    array_index           go to state 66
    member_op             go to state 67
    cast                  go to state 68
    increment             go to state 69
    decrement             go to state 70
    address_of            go to state 71
    dereference           go to state 72
    binop                 go to state 73
    function_call         go to state 74
    id_or_constant        go to state 75
    constant              go to state 76
    constant_int          go to state 77
    constant_bool         go to state 78
    constant_enum_value   go to state 79
    id                    go to state 80
    type                  go to state 81


State 267

  129 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 129 (func_ptr)


State 268

  160 type_list: type_list COMMA . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 48
    composited_type  go to state 277


State 269

   96 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
  101 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 161

    $default  reduce using rule 101 (function_call)

    scope  go to state 214


State 270

  118 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 161

    scope  go to state 278


State 271

   99 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 99 (function_decl)


State 272

   93 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 93 (function_def)


State 273

  109 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 279


State 274

  110 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  111           | composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 280

    $default  reduce using rule 110 (array_decl)


State 275

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 281


State 276

  124 struct_pair: composited_type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 282


State 277

  157 composited_type: composited_type . ASTERISK
  158                | composited_type . MUT
  160 type_list: type_list COMMA composited_type .

    ASTERISK  shift, and go to state 115
    MUT       shift, and go to state 116

    $default  reduce using rule 160 (type_list)


State 278

  118 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 118 (cond_block)


State 279

  109 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    init_list            go to state 283
    id_or_constant       go to state 284
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 280

  111 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 285


State 281

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 161

    scope  go to state 286


State 282

  124 struct_pair: composited_type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 124 (struct_pair)


State 283

  109 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  113 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 287
    COMMA        shift, and go to state 288


State 284

  112 init_list: id_or_constant .

    $default  reduce using rule 112 (init_list)


State 285

  111 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    init_list            go to state 289
    id_or_constant       go to state 284
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 286

  120 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 120 (for_loop)


State 287

  109 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 109 (array_decl)


State 288

  113 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 58
    FALSE       shift, and go to state 59
    NULLPTR     shift, and go to state 60

    id_or_constant       go to state 290
    constant             go to state 76
    constant_int         go to state 77
    constant_bool        go to state 78
    constant_enum_value  go to state 79
    id                   go to state 120
    type                 go to state 81


State 289

  111 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  113 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 291
    COMMA        shift, and go to state 288


State 290

  113 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 113 (init_list)


State 291

  111 array_decl: composited_type id MUT LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 111 (array_decl)
