Terminals unused in grammar

   EXCLAMATION
   AND_AND
   OR_OR
   AUTO
   EXTERN
   UNKNOWN


State 97 conflicts: 2 shift/reduce


Grammar

    0 $accept: module $end

    1 module: statements

    2 statements: node_setup
    3           | statements node_setup

    4 node_setup: statement
    5           | statement SEMICOLON

    6 semicoloned_statements: semicoloned_statement
    7                       | semicoloned_statements semicoloned_statement

    8 semicoloned_statement: statement SEMICOLON
    9                      | assignable_statement SEMICOLON
   10                      | flow_control
   11                      | defer_statement SEMICOLON
   12                      | function_def

   13 statement: return_statement
   14          | function_decl
   15          | variable_decl
   16          | assign_op
   17          | alias_statement
   18          | typedef_statement
   19          | struct_def
   20          | import
   21          | include_or_link
   22          | func_ptr
   23          | enum_def
   24          | union_def
   25          | flow_control
   26          | function_def
   27          | struct_decl

   28 alias_statement: ALIAS TYPE TYPE

   29 typedef_statement: TYPEDEF TYPE TYPE

   30 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE
   31           | EXPORT struct_def

   32 struct_decl: STRUCT type

   33 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE
   34          | EXPORT union_def

   35 defer_statement: DEFER assignable_statement

   36 assignable_statement: function_call
   37                     | unary_op
   38                     | binary_op
   39                     | member_op
   40                     | id_or_constant

   41 flow_control: if_statement
   42             | loop

   43 loop: while_loop
   44     | for_loop

   45 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE
   46      | LEFT_BRACE RIGHT_BRACE

   47 import: IMPORT id

   48 unary_op: cast
   49         | increment
   50         | decrement
   51         | address_of
   52         | dereference
   53         | array_index

   54 binary_op: add
   55          | subtract
   56          | multiply
   57          | divide
   58          | equality
   59          | inequality
   60          | lesser
   61          | greater
   62          | lesser_or_equal
   63          | greater_or_equal
   64          | bitwise_and
   65          | bitwise_or
   66          | bitwise_left_shift
   67          | bitwise_right_shift

   68 assign_op: variable_assign

   69 member_op: id FSTOP id
   70          | id ARROW id

   71 variable_assign: id EQUAL assignable_statement
   72                | array_index EQUAL assignable_statement
   73                | member_op EQUAL assignable_statement

   74 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant

   75 increment: id_or_constant PLUS PLUS

   76 decrement: id_or_constant MINUS MINUS

   77 address_of: AND id

   78 dereference: ASTERISK id

   79 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET

   81 add: id_or_constant PLUS id_or_constant
   82    | id_or_constant PLUS unary_op

   83 subtract: id_or_constant MINUS id_or_constant
   84         | id_or_constant MINUS unary_op

   85 multiply: id_or_constant ASTERISK id_or_constant
   86         | id_or_constant ASTERISK unary_op

   87 divide: id_or_constant FORWARD_SLASH id_or_constant
   88       | id_or_constant FORWARD_SLASH unary_op

   89 equality: id_or_constant EQUAL_EQUAL id_or_constant
   90         | id_or_constant EQUAL_EQUAL unary_op

   91 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant
   92           | id_or_constant EXCLAMATION_EQUAL unary_op

   93 lesser: id_or_constant LESSER id_or_constant
   94       | id_or_constant LESSER unary_op

   95 greater: id_or_constant GREATER id_or_constant
   96        | id_or_constant GREATER unary_op

   97 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant
   98                | id_or_constant LESSER_EQUAL unary_op

   99 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant
  100                 | id_or_constant GREATER_EQUAL unary_op

  101 bitwise_and: id_or_constant AND id_or_constant
  102            | id_or_constant AND unary_op

  103 bitwise_or: id_or_constant OR id_or_constant
  104           | id_or_constant OR unary_op

  105 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant
  106                   | id_or_constant LEFT_SHIFT unary_op

  107 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant
  108                    | id_or_constant RIGHT_SHIFT unary_op

  109 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | composited_type id LEFT_BRACKET RIGHT_BRACKET scope
  111             | id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id LEFT_BRACKET RIGHT_BRACKET scope
  113             | EXPORT function_def

  114 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  116              | EXPORT function_decl

  117 function_call: id LEFT_BRACKET RIGHT_BRACKET
  118              | id LEFT_BRACKET statement_list RIGHT_BRACKET

  119 variable_decl: composited_type id
  120              | id COLON EQUAL assignable_statement
  121              | composited_type id EQUAL assignable_statement
  122              | array_decl
  123              | EXPORT variable_decl

  124 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

  126 init_list: id_or_constant
  127          | init_list COMMA id_or_constant

  128 return_statement: RETURN assignable_statement

  129 if_statement: cond_block
  130             | cond_block ELSE scope

  131 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope
  132           | cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  133 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

  135 struct_list: struct_list struct_pair
  136            | struct_pair

  137 struct_pair: type id SEMICOLON
  138            | type id EQUAL assignable_statement SEMICOLON

  139 arg_list: arg_list COMMA arg_pair
  140         | arg_pair

  141 statement_list: statement_list COMMA assignable_statement
  142               | assignable_statement

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET
  144         | EXPORT func_ptr

  145 arg_pair: composited_type id
  146         | FSTOP FSTOP FSTOP

  147 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE
  148         | EXPORT enum_def

  149 enum_parts: enum_part
  150           | enum_parts COMMA enum_part

  151 enum_part: id
  152          | id EQUAL constant_int

  153 id_or_constant: id
  154               | constant

  155 include_or_link: INCLUDE STRING
  156                | LINK STRING

  157 constant: constant_int
  158         | constant_enum_value
  159         | constant_bool
  160         | FLOAT
  161         | STRING
  162         | NULLPTR

  163 constant_int: INTEGER

  164 constant_bool: TRUE
  165              | FALSE

  166 constant_enum_value: type COLON COLON id

  167 id: IDENTIFIER

  168 type: TYPE

  169 composited_type: type
  170                | MUT composited_type
  171                | composited_type ASTERISK
  172                | composited_type MUT

  173 type_list: composited_type
  174          | type_list COMMA composited_type


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 167
STRING (259) 155 156 161
INTEGER (260) 163
FLOAT (261) 160
TYPE (262) 28 29 168
LEFT_BRACKET (263) 74 109 110 111 112 114 115 117 118 131 132 133 134
    143
RIGHT_BRACKET (264) 74 109 110 111 112 114 115 117 118 131 132 133
    134 143
LEFT_BRACE (265) 30 33 45 46 125 147
RIGHT_BRACE (266) 30 33 45 46 125 147
LEFT_SQUARE_BRACKET (267) 79 80 124 125
RIGHT_SQUARE_BRACKET (268) 79 80 124 125
COMMA (269) 127 139 141 150 174
FSTOP (270) 69 146
SEMICOLON (271) 5 8 9 11 114 115 134 137 138
COLON (272) 120 166
PLUS (273) 75 81 82
MINUS (274) 76 83 84
ASTERISK (275) 78 85 86 171
FORWARD_SLASH (276) 87 88
EQUAL (277) 71 72 73 120 121 125 138 152
EQUAL_EQUAL (278) 89 90
EXCLAMATION (279)
EXCLAMATION_EQUAL (280) 91 92
GREATER (281) 95 96
GREATER_EQUAL (282) 99 100
LESSER (283) 93 94
LESSER_EQUAL (284) 97 98
AND (285) 77 101 102
AND_AND (286)
OR (287) 103 104
OR_OR (288)
LEFT_SHIFT (289) 105 106
RIGHT_SHIFT (290) 107 108
RETURN (291) 128
DEFER (292) 35
IF (293) 131 132
ELSE (294) 130 132
FOR (295) 134
WHILE (296) 133
TYPEDEF (297) 29
ALIAS (298) 28
AUTO (299)
ENUM (300) 147
UNION (301) 33
TRUE (302) 164
FALSE (303) 165
MUT (304) 170 172
EXTERN (305)
IMPORT (306) 47
EXPORT (307) 31 34 113 116 123 144 148
INCLUDE (308) 155
LINK (309) 156
FUNC_PTR (310) 143
NULLPTR (311) 162
STRUCT (312) 30 32
ARROW (313) 70
UNKNOWN (314)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
module (61)
    on left: 1, on right: 0
statements (62)
    on left: 2 3, on right: 1 3
node_setup (63)
    on left: 4 5, on right: 2 3
semicoloned_statements (64)
    on left: 6 7, on right: 7 45
semicoloned_statement (65)
    on left: 8 9 10 11 12, on right: 6 7
statement (66)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    4 5 8 134
alias_statement (67)
    on left: 28, on right: 17
typedef_statement (68)
    on left: 29, on right: 18
struct_def (69)
    on left: 30 31, on right: 19 31
struct_decl (70)
    on left: 32, on right: 27
union_def (71)
    on left: 33 34, on right: 24 34
defer_statement (72)
    on left: 35, on right: 11
assignable_statement (73)
    on left: 36 37 38 39 40, on right: 9 35 71 72 73 120 121 128 131
    132 133 134 138 141 142
flow_control (74)
    on left: 41 42, on right: 10 25
loop (75)
    on left: 43 44, on right: 42
scope (76)
    on left: 45 46, on right: 109 110 111 112 130 131 132 133 134
import (77)
    on left: 47, on right: 20
unary_op (78)
    on left: 48 49 50 51 52 53, on right: 37 82 84 86 88 90 92 94 96
    98 100 102 104 106 108
binary_op (79)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67, on right: 38
assign_op (80)
    on left: 68, on right: 16
member_op (81)
    on left: 69 70, on right: 39 73
variable_assign (82)
    on left: 71 72 73, on right: 68
cast (83)
    on left: 74, on right: 48
increment (84)
    on left: 75, on right: 49
decrement (85)
    on left: 76, on right: 50
address_of (86)
    on left: 77, on right: 51
dereference (87)
    on left: 78, on right: 52
array_index (88)
    on left: 79 80, on right: 53 72
add (89)
    on left: 81 82, on right: 54
subtract (90)
    on left: 83 84, on right: 55
multiply (91)
    on left: 85 86, on right: 56
divide (92)
    on left: 87 88, on right: 57
equality (93)
    on left: 89 90, on right: 58
inequality (94)
    on left: 91 92, on right: 59
lesser (95)
    on left: 93 94, on right: 60
greater (96)
    on left: 95 96, on right: 61
lesser_or_equal (97)
    on left: 97 98, on right: 62
greater_or_equal (98)
    on left: 99 100, on right: 63
bitwise_and (99)
    on left: 101 102, on right: 64
bitwise_or (100)
    on left: 103 104, on right: 65
bitwise_left_shift (101)
    on left: 105 106, on right: 66
bitwise_right_shift (102)
    on left: 107 108, on right: 67
function_def (103)
    on left: 109 110 111 112 113, on right: 12 26 113
function_decl (104)
    on left: 114 115 116, on right: 14 116
function_call (105)
    on left: 117 118, on right: 36
variable_decl (106)
    on left: 119 120 121 122 123, on right: 15 123
array_decl (107)
    on left: 124 125, on right: 122
init_list (108)
    on left: 126 127, on right: 125 127
return_statement (109)
    on left: 128, on right: 13
if_statement (110)
    on left: 129 130, on right: 41
cond_block (111)
    on left: 131 132, on right: 129 130 132
while_loop (112)
    on left: 133, on right: 43
for_loop (113)
    on left: 134, on right: 44
struct_list (114)
    on left: 135 136, on right: 30 33 135
struct_pair (115)
    on left: 137 138, on right: 135 136
arg_list (116)
    on left: 139 140, on right: 109 111 115 139
statement_list (117)
    on left: 141 142, on right: 118 141
func_ptr (118)
    on left: 143 144, on right: 22 144
arg_pair (119)
    on left: 145 146, on right: 139 140
enum_def (120)
    on left: 147 148, on right: 23 148
enum_parts (121)
    on left: 149 150, on right: 147 150
enum_part (122)
    on left: 151 152, on right: 149 150
id_or_constant (123)
    on left: 153 154, on right: 40 74 75 76 81 82 83 84 85 86 87 88
    89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107
    108 126 127
include_or_link (124)
    on left: 155 156, on right: 21
constant (125)
    on left: 157 158 159 160 161 162, on right: 154
constant_int (126)
    on left: 163, on right: 79 124 125 152 157
constant_bool (127)
    on left: 164 165, on right: 159
constant_enum_value (128)
    on left: 166, on right: 158
id (129)
    on left: 167, on right: 47 69 70 71 77 78 79 80 109 110 111 112
    114 115 117 118 119 120 121 124 125 137 138 145 151 152 153 166
type (130)
    on left: 168, on right: 30 32 33 137 138 143 147 166 169
composited_type (131)
    on left: 169 170 171 172, on right: 74 109 110 114 115 119 121
    124 125 145 170 171 172 173 174
type_list (132)
    on left: 173 174, on right: 143 174


State 0

    0 $accept: . module $end

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    module             go to state 18
    statements         go to state 19
    node_setup         go to state 20
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 1

  167 id: IDENTIFIER .

    $default  reduce using rule 167 (id)


State 2

  168 type: TYPE .

    $default  reduce using rule 168 (type)


State 3

  128 return_statement: RETURN . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 58
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 4

  131 cond_block: IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 90


State 5

  134 for_loop: FOR . LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 91


State 6

  133 while_loop: WHILE . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 92


State 7

   29 typedef_statement: TYPEDEF . TYPE TYPE

    TYPE  shift, and go to state 93


State 8

   28 alias_statement: ALIAS . TYPE TYPE

    TYPE  shift, and go to state 94


State 9

  147 enum_def: ENUM . type LEFT_BRACE enum_parts RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 95


State 10

   33 union_def: UNION . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 96


State 11

  170 composited_type: MUT . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 97


State 12

   47 import: IMPORT . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 98


State 13

   31 struct_def: EXPORT . struct_def
   34 union_def: EXPORT . union_def
  113 function_def: EXPORT . function_def
  116 function_decl: EXPORT . function_decl
  123 variable_decl: EXPORT . variable_decl
  144 func_ptr: EXPORT . func_ptr
  148 enum_def: EXPORT . enum_def

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    EXPORT      shift, and go to state 13
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 99

    struct_def       go to state 100
    union_def        go to state 101
    function_def     go to state 102
    function_decl    go to state 103
    variable_decl    go to state 104
    array_decl       go to state 37
    func_ptr         go to state 105
    enum_def         go to state 106
    id               go to state 107
    type             go to state 47
    composited_type  go to state 48


State 14

  155 include_or_link: INCLUDE . STRING

    STRING  shift, and go to state 108


State 15

  156 include_or_link: LINK . STRING

    STRING  shift, and go to state 109


State 16

  143 func_ptr: FUNC_PTR . type type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 110


State 17

   30 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE
   32 struct_decl: STRUCT . type

    TYPE  shift, and go to state 2

    type  go to state 111


State 18

    0 $accept: module . $end

    $end  shift, and go to state 112


State 19

    1 module: statements .
    3 statements: statements . node_setup

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    $default  reduce using rule 1 (module)

    node_setup         go to state 113
    statement          go to state 21
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 20

    2 statements: node_setup .

    $default  reduce using rule 2 (statements)


State 21

    4 node_setup: statement .
    5           | statement . SEMICOLON

    SEMICOLON  shift, and go to state 114

    $default  reduce using rule 4 (node_setup)


State 22

   17 statement: alias_statement .

    $default  reduce using rule 17 (statement)


State 23

   18 statement: typedef_statement .

    $default  reduce using rule 18 (statement)


State 24

   19 statement: struct_def .

    $default  reduce using rule 19 (statement)


State 25

   27 statement: struct_decl .

    $default  reduce using rule 27 (statement)


State 26

   24 statement: union_def .

    $default  reduce using rule 24 (statement)


State 27

   25 statement: flow_control .

    $default  reduce using rule 25 (statement)


State 28

   42 flow_control: loop .

    $default  reduce using rule 42 (flow_control)


State 29

   20 statement: import .

    $default  reduce using rule 20 (statement)


State 30

   16 statement: assign_op .

    $default  reduce using rule 16 (statement)


State 31

   73 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 115


State 32

   68 assign_op: variable_assign .

    $default  reduce using rule 68 (assign_op)


State 33

   72 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 116


State 34

   26 statement: function_def .

    $default  reduce using rule 26 (statement)


State 35

   14 statement: function_decl .

    $default  reduce using rule 14 (statement)


State 36

   15 statement: variable_decl .

    $default  reduce using rule 15 (statement)


State 37

  122 variable_decl: array_decl .

    $default  reduce using rule 122 (variable_decl)


State 38

   13 statement: return_statement .

    $default  reduce using rule 13 (statement)


State 39

   41 flow_control: if_statement .

    $default  reduce using rule 41 (flow_control)


State 40

  129 if_statement: cond_block .
  130             | cond_block . ELSE scope
  132 cond_block: cond_block . ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    ELSE  shift, and go to state 117

    $default  reduce using rule 129 (if_statement)


State 41

   43 loop: while_loop .

    $default  reduce using rule 43 (loop)


State 42

   44 loop: for_loop .

    $default  reduce using rule 44 (loop)


State 43

   22 statement: func_ptr .

    $default  reduce using rule 22 (statement)


State 44

   23 statement: enum_def .

    $default  reduce using rule 23 (statement)


State 45

   21 statement: include_or_link .

    $default  reduce using rule 21 (statement)


State 46

   69 member_op: id . FSTOP id
   70          | id . ARROW id
   71 variable_assign: id . EQUAL assignable_statement
   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  111 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id . LEFT_BRACKET RIGHT_BRACKET scope
  120 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET         shift, and go to state 118
    LEFT_SQUARE_BRACKET  shift, and go to state 119
    FSTOP                shift, and go to state 120
    COLON                shift, and go to state 121
    EQUAL                shift, and go to state 122
    ARROW                shift, and go to state 123


State 47

  169 composited_type: type .

    $default  reduce using rule 169 (composited_type)


State 48

  109 function_def: composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | composited_type . id LEFT_BRACKET RIGHT_BRACKET scope
  114 function_decl: composited_type . id LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | composited_type . id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  119 variable_decl: composited_type . id
  121              | composited_type . id EQUAL assignable_statement
  124 array_decl: composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | composited_type . id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE
  171 composited_type: composited_type . ASTERISK
  172                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 124
    MUT         shift, and go to state 125

    id  go to state 126


State 49

  161 constant: STRING .

    $default  reduce using rule 161 (constant)


State 50

  163 constant_int: INTEGER .

    $default  reduce using rule 163 (constant_int)


State 51

  160 constant: FLOAT .

    $default  reduce using rule 160 (constant)


State 52

   74 cast: LEFT_BRACKET . composited_type RIGHT_BRACKET id_or_constant

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 127


State 53

   78 dereference: ASTERISK . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 128


State 54

   77 address_of: AND . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 129


State 55

  164 constant_bool: TRUE .

    $default  reduce using rule 164 (constant_bool)


State 56

  165 constant_bool: FALSE .

    $default  reduce using rule 165 (constant_bool)


State 57

  162 constant: NULLPTR .

    $default  reduce using rule 162 (constant)


State 58

  128 return_statement: RETURN assignable_statement .

    $default  reduce using rule 128 (return_statement)


State 59

   37 assignable_statement: unary_op .

    $default  reduce using rule 37 (assignable_statement)


State 60

   38 assignable_statement: binary_op .

    $default  reduce using rule 38 (assignable_statement)


State 61

   39 assignable_statement: member_op .

    $default  reduce using rule 39 (assignable_statement)


State 62

   48 unary_op: cast .

    $default  reduce using rule 48 (unary_op)


State 63

   49 unary_op: increment .

    $default  reduce using rule 49 (unary_op)


State 64

   50 unary_op: decrement .

    $default  reduce using rule 50 (unary_op)


State 65

   51 unary_op: address_of .

    $default  reduce using rule 51 (unary_op)


State 66

   52 unary_op: dereference .

    $default  reduce using rule 52 (unary_op)


State 67

   53 unary_op: array_index .

    $default  reduce using rule 53 (unary_op)


State 68

   54 binary_op: add .

    $default  reduce using rule 54 (binary_op)


State 69

   55 binary_op: subtract .

    $default  reduce using rule 55 (binary_op)


State 70

   56 binary_op: multiply .

    $default  reduce using rule 56 (binary_op)


State 71

   57 binary_op: divide .

    $default  reduce using rule 57 (binary_op)


State 72

   58 binary_op: equality .

    $default  reduce using rule 58 (binary_op)


State 73

   59 binary_op: inequality .

    $default  reduce using rule 59 (binary_op)


State 74

   60 binary_op: lesser .

    $default  reduce using rule 60 (binary_op)


State 75

   61 binary_op: greater .

    $default  reduce using rule 61 (binary_op)


State 76

   62 binary_op: lesser_or_equal .

    $default  reduce using rule 62 (binary_op)


State 77

   63 binary_op: greater_or_equal .

    $default  reduce using rule 63 (binary_op)


State 78

   64 binary_op: bitwise_and .

    $default  reduce using rule 64 (binary_op)


State 79

   65 binary_op: bitwise_or .

    $default  reduce using rule 65 (binary_op)


State 80

   66 binary_op: bitwise_left_shift .

    $default  reduce using rule 66 (binary_op)


State 81

   67 binary_op: bitwise_right_shift .

    $default  reduce using rule 67 (binary_op)


State 82

   36 assignable_statement: function_call .

    $default  reduce using rule 36 (assignable_statement)


State 83

   40 assignable_statement: id_or_constant .
   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   81 add: id_or_constant . PLUS id_or_constant
   82    | id_or_constant . PLUS unary_op
   83 subtract: id_or_constant . MINUS id_or_constant
   84         | id_or_constant . MINUS unary_op
   85 multiply: id_or_constant . ASTERISK id_or_constant
   86         | id_or_constant . ASTERISK unary_op
   87 divide: id_or_constant . FORWARD_SLASH id_or_constant
   88       | id_or_constant . FORWARD_SLASH unary_op
   89 equality: id_or_constant . EQUAL_EQUAL id_or_constant
   90         | id_or_constant . EQUAL_EQUAL unary_op
   91 inequality: id_or_constant . EXCLAMATION_EQUAL id_or_constant
   92           | id_or_constant . EXCLAMATION_EQUAL unary_op
   93 lesser: id_or_constant . LESSER id_or_constant
   94       | id_or_constant . LESSER unary_op
   95 greater: id_or_constant . GREATER id_or_constant
   96        | id_or_constant . GREATER unary_op
   97 lesser_or_equal: id_or_constant . LESSER_EQUAL id_or_constant
   98                | id_or_constant . LESSER_EQUAL unary_op
   99 greater_or_equal: id_or_constant . GREATER_EQUAL id_or_constant
  100                 | id_or_constant . GREATER_EQUAL unary_op
  101 bitwise_and: id_or_constant . AND id_or_constant
  102            | id_or_constant . AND unary_op
  103 bitwise_or: id_or_constant . OR id_or_constant
  104           | id_or_constant . OR unary_op
  105 bitwise_left_shift: id_or_constant . LEFT_SHIFT id_or_constant
  106                   | id_or_constant . LEFT_SHIFT unary_op
  107 bitwise_right_shift: id_or_constant . RIGHT_SHIFT id_or_constant
  108                    | id_or_constant . RIGHT_SHIFT unary_op

    PLUS               shift, and go to state 130
    MINUS              shift, and go to state 131
    ASTERISK           shift, and go to state 132
    FORWARD_SLASH      shift, and go to state 133
    EQUAL_EQUAL        shift, and go to state 134
    EXCLAMATION_EQUAL  shift, and go to state 135
    GREATER            shift, and go to state 136
    GREATER_EQUAL      shift, and go to state 137
    LESSER             shift, and go to state 138
    LESSER_EQUAL       shift, and go to state 139
    AND                shift, and go to state 140
    OR                 shift, and go to state 141
    LEFT_SHIFT         shift, and go to state 142
    RIGHT_SHIFT        shift, and go to state 143

    $default  reduce using rule 40 (assignable_statement)


State 84

  154 id_or_constant: constant .

    $default  reduce using rule 154 (id_or_constant)


State 85

  157 constant: constant_int .

    $default  reduce using rule 157 (constant)


State 86

  159 constant: constant_bool .

    $default  reduce using rule 159 (constant)


State 87

  158 constant: constant_enum_value .

    $default  reduce using rule 158 (constant)


State 88

   69 member_op: id . FSTOP id
   70          | id . ARROW id
   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  117 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  118              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  153 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 144
    LEFT_SQUARE_BRACKET  shift, and go to state 119
    FSTOP                shift, and go to state 120
    ARROW                shift, and go to state 123

    $default  reduce using rule 153 (id_or_constant)


State 89

  166 constant_enum_value: type . COLON COLON id

    COLON  shift, and go to state 145


State 90

  131 cond_block: IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 146
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 91

  134 for_loop: FOR LEFT_BRACKET . statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER  shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    IF          shift, and go to state 4
    FOR         shift, and go to state 5
    WHILE       shift, and go to state 6
    TYPEDEF     shift, and go to state 7
    ALIAS       shift, and go to state 8
    ENUM        shift, and go to state 9
    UNION       shift, and go to state 10
    MUT         shift, and go to state 11
    IMPORT      shift, and go to state 12
    EXPORT      shift, and go to state 13
    INCLUDE     shift, and go to state 14
    LINK        shift, and go to state 15
    FUNC_PTR    shift, and go to state 16
    STRUCT      shift, and go to state 17

    statement          go to state 147
    alias_statement    go to state 22
    typedef_statement  go to state 23
    struct_def         go to state 24
    struct_decl        go to state 25
    union_def          go to state 26
    flow_control       go to state 27
    loop               go to state 28
    import             go to state 29
    assign_op          go to state 30
    member_op          go to state 31
    variable_assign    go to state 32
    array_index        go to state 33
    function_def       go to state 34
    function_decl      go to state 35
    variable_decl      go to state 36
    array_decl         go to state 37
    return_statement   go to state 38
    if_statement       go to state 39
    cond_block         go to state 40
    while_loop         go to state 41
    for_loop           go to state 42
    func_ptr           go to state 43
    enum_def           go to state 44
    include_or_link    go to state 45
    id                 go to state 46
    type               go to state 47
    composited_type    go to state 48


State 92

  133 while_loop: WHILE LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 148
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 93

   29 typedef_statement: TYPEDEF TYPE . TYPE

    TYPE  shift, and go to state 149


State 94

   28 alias_statement: ALIAS TYPE . TYPE

    TYPE  shift, and go to state 150


State 95

  147 enum_def: ENUM type . LEFT_BRACE enum_parts RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 151


State 96

   33 union_def: UNION type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 152


State 97

  170 composited_type: MUT composited_type .
  171                | composited_type . ASTERISK
  172                | composited_type . MUT

    ASTERISK  shift, and go to state 124
    MUT       shift, and go to state 125

    ASTERISK  [reduce using rule 170 (composited_type)]
    MUT       [reduce using rule 170 (composited_type)]
    $default  reduce using rule 170 (composited_type)


State 98

   47 import: IMPORT id .

    $default  reduce using rule 47 (import)


State 99

   30 struct_def: STRUCT . type LEFT_BRACE struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    type  go to state 153


State 100

   31 struct_def: EXPORT struct_def .

    $default  reduce using rule 31 (struct_def)


State 101

   34 union_def: EXPORT union_def .

    $default  reduce using rule 34 (union_def)


State 102

  113 function_def: EXPORT function_def .

    $default  reduce using rule 113 (function_def)


State 103

  116 function_decl: EXPORT function_decl .

    $default  reduce using rule 116 (function_decl)


State 104

  123 variable_decl: EXPORT variable_decl .

    $default  reduce using rule 123 (variable_decl)


State 105

  144 func_ptr: EXPORT func_ptr .

    $default  reduce using rule 144 (func_ptr)


State 106

  148 enum_def: EXPORT enum_def .

    $default  reduce using rule 148 (enum_def)


State 107

  111 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id . LEFT_BRACKET RIGHT_BRACKET scope
  120 variable_decl: id . COLON EQUAL assignable_statement

    LEFT_BRACKET  shift, and go to state 118
    COLON         shift, and go to state 121


State 108

  155 include_or_link: INCLUDE STRING .

    $default  reduce using rule 155 (include_or_link)


State 109

  156 include_or_link: LINK STRING .

    $default  reduce using rule 156 (include_or_link)


State 110

  143 func_ptr: FUNC_PTR type . type LEFT_BRACKET type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2

    type  go to state 154


State 111

   30 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE
   32 struct_decl: STRUCT type .

    LEFT_BRACE  shift, and go to state 155

    $default  reduce using rule 32 (struct_decl)


State 112

    0 $accept: module $end .

    $default  accept


State 113

    3 statements: statements node_setup .

    $default  reduce using rule 3 (statements)


State 114

    5 node_setup: statement SEMICOLON .

    $default  reduce using rule 5 (node_setup)


State 115

   73 variable_assign: member_op EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 156
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 116

   72 variable_assign: array_index EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 157
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 117

  130 if_statement: cond_block ELSE . scope
  132 cond_block: cond_block ELSE . IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACE  shift, and go to state 158
    IF          shift, and go to state 159

    scope  go to state 160


State 118

  111 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  112             | id LEFT_BRACKET . RIGHT_BRACKET scope

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 161
    FSTOP          shift, and go to state 162
    MUT            shift, and go to state 11

    arg_list         go to state 163
    arg_pair         go to state 164
    type             go to state 47
    composited_type  go to state 165


State 119

   79 array_index: id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
   80            | id LEFT_SQUARE_BRACKET . id RIGHT_SQUARE_BRACKET

    IDENTIFIER  shift, and go to state 1
    INTEGER     shift, and go to state 50

    constant_int  go to state 166
    id            go to state 167


State 120

   69 member_op: id FSTOP . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 168


State 121

  120 variable_decl: id COLON . EQUAL assignable_statement

    EQUAL  shift, and go to state 169


State 122

   71 variable_assign: id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 170
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 123

   70 member_op: id ARROW . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 171


State 124

  171 composited_type: composited_type ASTERISK .

    $default  reduce using rule 171 (composited_type)


State 125

  172 composited_type: composited_type MUT .

    $default  reduce using rule 172 (composited_type)


State 126

  109 function_def: composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  110             | composited_type id . LEFT_BRACKET RIGHT_BRACKET scope
  114 function_decl: composited_type id . LEFT_BRACKET RIGHT_BRACKET SEMICOLON
  115              | composited_type id . LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON
  119 variable_decl: composited_type id .
  121              | composited_type id . EQUAL assignable_statement
  124 array_decl: composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
  125           | composited_type id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACKET         shift, and go to state 172
    LEFT_SQUARE_BRACKET  shift, and go to state 173
    EQUAL                shift, and go to state 174

    $default  reduce using rule 119 (variable_decl)


State 127

   74 cast: LEFT_BRACKET composited_type . RIGHT_BRACKET id_or_constant
  171 composited_type: composited_type . ASTERISK
  172                | composited_type . MUT

    RIGHT_BRACKET  shift, and go to state 175
    ASTERISK       shift, and go to state 124
    MUT            shift, and go to state 125


State 128

   78 dereference: ASTERISK id .

    $default  reduce using rule 78 (dereference)


State 129

   77 address_of: AND id .

    $default  reduce using rule 77 (address_of)


State 130

   75 increment: id_or_constant PLUS . PLUS
   81 add: id_or_constant PLUS . id_or_constant
   82    | id_or_constant PLUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    PLUS          shift, and go to state 176
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 177
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 178
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 131

   76 decrement: id_or_constant MINUS . MINUS
   83 subtract: id_or_constant MINUS . id_or_constant
   84         | id_or_constant MINUS . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    MINUS         shift, and go to state 180
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 181
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 182
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 132

   85 multiply: id_or_constant ASTERISK . id_or_constant
   86         | id_or_constant ASTERISK . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 183
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 184
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 133

   87 divide: id_or_constant FORWARD_SLASH . id_or_constant
   88       | id_or_constant FORWARD_SLASH . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 185
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 186
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 134

   89 equality: id_or_constant EQUAL_EQUAL . id_or_constant
   90         | id_or_constant EQUAL_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 187
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 188
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 135

   91 inequality: id_or_constant EXCLAMATION_EQUAL . id_or_constant
   92           | id_or_constant EXCLAMATION_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 189
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 190
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 136

   95 greater: id_or_constant GREATER . id_or_constant
   96        | id_or_constant GREATER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 191
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 192
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 137

   99 greater_or_equal: id_or_constant GREATER_EQUAL . id_or_constant
  100                 | id_or_constant GREATER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 193
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 194
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 138

   93 lesser: id_or_constant LESSER . id_or_constant
   94       | id_or_constant LESSER . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 195
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 196
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 139

   97 lesser_or_equal: id_or_constant LESSER_EQUAL . id_or_constant
   98                | id_or_constant LESSER_EQUAL . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 197
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 198
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 140

  101 bitwise_and: id_or_constant AND . id_or_constant
  102            | id_or_constant AND . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 199
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 200
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 141

  103 bitwise_or: id_or_constant OR . id_or_constant
  104           | id_or_constant OR . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 201
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 202
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 142

  105 bitwise_left_shift: id_or_constant LEFT_SHIFT . id_or_constant
  106                   | id_or_constant LEFT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 203
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 204
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 143

  107 bitwise_right_shift: id_or_constant RIGHT_SHIFT . id_or_constant
  108                    | id_or_constant RIGHT_SHIFT . unary_op

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    unary_op             go to state 205
    cast                 go to state 62
    increment            go to state 63
    decrement            go to state 64
    address_of           go to state 65
    dereference          go to state 66
    array_index          go to state 67
    id_or_constant       go to state 206
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 179
    type                 go to state 89


State 144

  117 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  118              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 207
    ASTERISK       shift, and go to state 53
    AND            shift, and go to state 54
    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    NULLPTR        shift, and go to state 57

    assignable_statement  go to state 208
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    statement_list        go to state 209
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 145

  166 constant_enum_value: type COLON . COLON id

    COLON  shift, and go to state 210


State 146

  131 cond_block: IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 211


State 147

  134 for_loop: FOR LEFT_BRACKET statement . SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 212


State 148

  133 while_loop: WHILE LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 213


State 149

   29 typedef_statement: TYPEDEF TYPE TYPE .

    $default  reduce using rule 29 (typedef_statement)


State 150

   28 alias_statement: ALIAS TYPE TYPE .

    $default  reduce using rule 28 (alias_statement)


State 151

  147 enum_def: ENUM type LEFT_BRACE . enum_parts RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1

    enum_parts  go to state 214
    enum_part   go to state 215
    id          go to state 216


State 152

   33 union_def: UNION type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    struct_list  go to state 217
    struct_pair  go to state 218
    type         go to state 219


State 153

   30 struct_def: STRUCT type . LEFT_BRACE struct_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 155


State 154

  143 func_ptr: FUNC_PTR type type . LEFT_BRACKET type_list RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 220


State 155

   30 struct_def: STRUCT type LEFT_BRACE . struct_list RIGHT_BRACE

    TYPE  shift, and go to state 2

    struct_list  go to state 221
    struct_pair  go to state 218
    type         go to state 219


State 156

   73 variable_assign: member_op EQUAL assignable_statement .

    $default  reduce using rule 73 (variable_assign)


State 157

   72 variable_assign: array_index EQUAL assignable_statement .

    $default  reduce using rule 72 (variable_assign)


State 158

   45 scope: LEFT_BRACE . semicoloned_statements RIGHT_BRACE
   46      | LEFT_BRACE . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 222
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 223
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 57
    STRUCT        shift, and go to state 17

    semicoloned_statements  go to state 224
    semicoloned_statement   go to state 225
    statement               go to state 226
    alias_statement         go to state 22
    typedef_statement       go to state 23
    struct_def              go to state 24
    struct_decl             go to state 25
    union_def               go to state 26
    defer_statement         go to state 227
    assignable_statement    go to state 228
    flow_control            go to state 229
    loop                    go to state 28
    import                  go to state 29
    unary_op                go to state 59
    binary_op               go to state 60
    assign_op               go to state 30
    member_op               go to state 230
    variable_assign         go to state 32
    cast                    go to state 62
    increment               go to state 63
    decrement               go to state 64
    address_of              go to state 65
    dereference             go to state 66
    array_index             go to state 231
    add                     go to state 68
    subtract                go to state 69
    multiply                go to state 70
    divide                  go to state 71
    equality                go to state 72
    inequality              go to state 73
    lesser                  go to state 74
    greater                 go to state 75
    lesser_or_equal         go to state 76
    greater_or_equal        go to state 77
    bitwise_and             go to state 78
    bitwise_or              go to state 79
    bitwise_left_shift      go to state 80
    bitwise_right_shift     go to state 81
    function_def            go to state 232
    function_decl           go to state 35
    function_call           go to state 82
    variable_decl           go to state 36
    array_decl              go to state 37
    return_statement        go to state 38
    if_statement            go to state 39
    cond_block              go to state 40
    while_loop              go to state 41
    for_loop                go to state 42
    func_ptr                go to state 43
    enum_def                go to state 44
    id_or_constant          go to state 83
    include_or_link         go to state 45
    constant                go to state 84
    constant_int            go to state 85
    constant_bool           go to state 86
    constant_enum_value     go to state 87
    id                      go to state 233
    type                    go to state 234
    composited_type         go to state 48


State 159

  132 cond_block: cond_block ELSE IF . LEFT_BRACKET assignable_statement RIGHT_BRACKET scope

    LEFT_BRACKET  shift, and go to state 235


State 160

  130 if_statement: cond_block ELSE scope .

    $default  reduce using rule 130 (if_statement)


State 161

  112 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 236


State 162

  146 arg_pair: FSTOP . FSTOP FSTOP

    FSTOP  shift, and go to state 237


State 163

  111 function_def: id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  139 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 238
    COMMA          shift, and go to state 239


State 164

  140 arg_list: arg_pair .

    $default  reduce using rule 140 (arg_list)


State 165

  145 arg_pair: composited_type . id
  171 composited_type: composited_type . ASTERISK
  172                | composited_type . MUT

    IDENTIFIER  shift, and go to state 1
    ASTERISK    shift, and go to state 124
    MUT         shift, and go to state 125

    id  go to state 240


State 166

   79 array_index: id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 241


State 167

   80 array_index: id LEFT_SQUARE_BRACKET id . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 242


State 168

   69 member_op: id FSTOP id .

    $default  reduce using rule 69 (member_op)


State 169

  120 variable_decl: id COLON EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 243
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 170

   71 variable_assign: id EQUAL assignable_statement .

    $default  reduce using rule 71 (variable_assign)


State 171

   70 member_op: id ARROW id .

    $default  reduce using rule 70 (member_op)


State 172

  109 function_def: composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  110             | composited_type id LEFT_BRACKET . RIGHT_BRACKET scope
  114 function_decl: composited_type id LEFT_BRACKET . RIGHT_BRACKET SEMICOLON
  115              | composited_type id LEFT_BRACKET . arg_list RIGHT_BRACKET SEMICOLON

    TYPE           shift, and go to state 2
    RIGHT_BRACKET  shift, and go to state 244
    FSTOP          shift, and go to state 162
    MUT            shift, and go to state 11

    arg_list         go to state 245
    arg_pair         go to state 164
    type             go to state 47
    composited_type  go to state 165


State 173

  124 array_decl: composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET
  125           | composited_type id LEFT_SQUARE_BRACKET . constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    INTEGER  shift, and go to state 50

    constant_int  go to state 246


State 174

  121 variable_decl: composited_type id EQUAL . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 247
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 175

   74 cast: LEFT_BRACKET composited_type RIGHT_BRACKET . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    id_or_constant       go to state 248
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 249
    type                 go to state 89


State 176

   75 increment: id_or_constant PLUS PLUS .

    $default  reduce using rule 75 (increment)


State 177

   82 add: id_or_constant PLUS unary_op .

    $default  reduce using rule 82 (add)


State 178

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   81 add: id_or_constant PLUS id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 81 (add)


State 179

   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  153 id_or_constant: id .

    LEFT_SQUARE_BRACKET  shift, and go to state 119

    $default  reduce using rule 153 (id_or_constant)


State 180

   76 decrement: id_or_constant MINUS MINUS .

    $default  reduce using rule 76 (decrement)


State 181

   84 subtract: id_or_constant MINUS unary_op .

    $default  reduce using rule 84 (subtract)


State 182

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   83 subtract: id_or_constant MINUS id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 83 (subtract)


State 183

   86 multiply: id_or_constant ASTERISK unary_op .

    $default  reduce using rule 86 (multiply)


State 184

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   85 multiply: id_or_constant ASTERISK id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 85 (multiply)


State 185

   88 divide: id_or_constant FORWARD_SLASH unary_op .

    $default  reduce using rule 88 (divide)


State 186

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   87 divide: id_or_constant FORWARD_SLASH id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 87 (divide)


State 187

   90 equality: id_or_constant EQUAL_EQUAL unary_op .

    $default  reduce using rule 90 (equality)


State 188

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   89 equality: id_or_constant EQUAL_EQUAL id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 89 (equality)


State 189

   92 inequality: id_or_constant EXCLAMATION_EQUAL unary_op .

    $default  reduce using rule 92 (inequality)


State 190

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   91 inequality: id_or_constant EXCLAMATION_EQUAL id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 91 (inequality)


State 191

   96 greater: id_or_constant GREATER unary_op .

    $default  reduce using rule 96 (greater)


State 192

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   95 greater: id_or_constant GREATER id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 95 (greater)


State 193

  100 greater_or_equal: id_or_constant GREATER_EQUAL unary_op .

    $default  reduce using rule 100 (greater_or_equal)


State 194

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   99 greater_or_equal: id_or_constant GREATER_EQUAL id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 99 (greater_or_equal)


State 195

   94 lesser: id_or_constant LESSER unary_op .

    $default  reduce using rule 94 (lesser)


State 196

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   93 lesser: id_or_constant LESSER id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 93 (lesser)


State 197

   98 lesser_or_equal: id_or_constant LESSER_EQUAL unary_op .

    $default  reduce using rule 98 (lesser_or_equal)


State 198

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
   97 lesser_or_equal: id_or_constant LESSER_EQUAL id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 97 (lesser_or_equal)


State 199

  102 bitwise_and: id_or_constant AND unary_op .

    $default  reduce using rule 102 (bitwise_and)


State 200

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  101 bitwise_and: id_or_constant AND id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 101 (bitwise_and)


State 201

  104 bitwise_or: id_or_constant OR unary_op .

    $default  reduce using rule 104 (bitwise_or)


State 202

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  103 bitwise_or: id_or_constant OR id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 103 (bitwise_or)


State 203

  106 bitwise_left_shift: id_or_constant LEFT_SHIFT unary_op .

    $default  reduce using rule 106 (bitwise_left_shift)


State 204

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  105 bitwise_left_shift: id_or_constant LEFT_SHIFT id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 105 (bitwise_left_shift)


State 205

  108 bitwise_right_shift: id_or_constant RIGHT_SHIFT unary_op .

    $default  reduce using rule 108 (bitwise_right_shift)


State 206

   75 increment: id_or_constant . PLUS PLUS
   76 decrement: id_or_constant . MINUS MINUS
  107 bitwise_right_shift: id_or_constant RIGHT_SHIFT id_or_constant .

    PLUS   shift, and go to state 250
    MINUS  shift, and go to state 251

    $default  reduce using rule 107 (bitwise_right_shift)


State 207

  117 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 117 (function_call)


State 208

  142 statement_list: assignable_statement .

    $default  reduce using rule 142 (statement_list)


State 209

  118 function_call: id LEFT_BRACKET statement_list . RIGHT_BRACKET
  141 statement_list: statement_list . COMMA assignable_statement

    RIGHT_BRACKET  shift, and go to state 252
    COMMA          shift, and go to state 253


State 210

  166 constant_enum_value: type COLON COLON . id

    IDENTIFIER  shift, and go to state 1

    id  go to state 254


State 211

  131 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 255


State 212

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON . assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 256
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 213

  133 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 257


State 214

  147 enum_def: ENUM type LEFT_BRACE enum_parts . RIGHT_BRACE
  150 enum_parts: enum_parts . COMMA enum_part

    RIGHT_BRACE  shift, and go to state 258
    COMMA        shift, and go to state 259


State 215

  149 enum_parts: enum_part .

    $default  reduce using rule 149 (enum_parts)


State 216

  151 enum_part: id .
  152          | id . EQUAL constant_int

    EQUAL  shift, and go to state 260

    $default  reduce using rule 151 (enum_part)


State 217

   33 union_def: UNION type LEFT_BRACE struct_list . RIGHT_BRACE
  135 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 261

    struct_pair  go to state 262
    type         go to state 219


State 218

  136 struct_list: struct_pair .

    $default  reduce using rule 136 (struct_list)


State 219

  137 struct_pair: type . id SEMICOLON
  138            | type . id EQUAL assignable_statement SEMICOLON

    IDENTIFIER  shift, and go to state 1

    id  go to state 263


State 220

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET . type_list RIGHT_BRACKET

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 264
    type_list        go to state 265


State 221

   30 struct_def: STRUCT type LEFT_BRACE struct_list . RIGHT_BRACE
  135 struct_list: struct_list . struct_pair

    TYPE         shift, and go to state 2
    RIGHT_BRACE  shift, and go to state 266

    struct_pair  go to state 262
    type         go to state 219


State 222

   46 scope: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 46 (scope)


State 223

   35 defer_statement: DEFER . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 267
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 224

    7 semicoloned_statements: semicoloned_statements . semicoloned_statement
   45 scope: LEFT_BRACE semicoloned_statements . RIGHT_BRACE

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    RIGHT_BRACE   shift, and go to state 268
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    RETURN        shift, and go to state 3
    DEFER         shift, and go to state 223
    IF            shift, and go to state 4
    FOR           shift, and go to state 5
    WHILE         shift, and go to state 6
    TYPEDEF       shift, and go to state 7
    ALIAS         shift, and go to state 8
    ENUM          shift, and go to state 9
    UNION         shift, and go to state 10
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    MUT           shift, and go to state 11
    IMPORT        shift, and go to state 12
    EXPORT        shift, and go to state 13
    INCLUDE       shift, and go to state 14
    LINK          shift, and go to state 15
    FUNC_PTR      shift, and go to state 16
    NULLPTR       shift, and go to state 57
    STRUCT        shift, and go to state 17

    semicoloned_statement  go to state 269
    statement              go to state 226
    alias_statement        go to state 22
    typedef_statement      go to state 23
    struct_def             go to state 24
    struct_decl            go to state 25
    union_def              go to state 26
    defer_statement        go to state 227
    assignable_statement   go to state 228
    flow_control           go to state 229
    loop                   go to state 28
    import                 go to state 29
    unary_op               go to state 59
    binary_op              go to state 60
    assign_op              go to state 30
    member_op              go to state 230
    variable_assign        go to state 32
    cast                   go to state 62
    increment              go to state 63
    decrement              go to state 64
    address_of             go to state 65
    dereference            go to state 66
    array_index            go to state 231
    add                    go to state 68
    subtract               go to state 69
    multiply               go to state 70
    divide                 go to state 71
    equality               go to state 72
    inequality             go to state 73
    lesser                 go to state 74
    greater                go to state 75
    lesser_or_equal        go to state 76
    greater_or_equal       go to state 77
    bitwise_and            go to state 78
    bitwise_or             go to state 79
    bitwise_left_shift     go to state 80
    bitwise_right_shift    go to state 81
    function_def           go to state 232
    function_decl          go to state 35
    function_call          go to state 82
    variable_decl          go to state 36
    array_decl             go to state 37
    return_statement       go to state 38
    if_statement           go to state 39
    cond_block             go to state 40
    while_loop             go to state 41
    for_loop               go to state 42
    func_ptr               go to state 43
    enum_def               go to state 44
    id_or_constant         go to state 83
    include_or_link        go to state 45
    constant               go to state 84
    constant_int           go to state 85
    constant_bool          go to state 86
    constant_enum_value    go to state 87
    id                     go to state 233
    type                   go to state 234
    composited_type        go to state 48


State 225

    6 semicoloned_statements: semicoloned_statement .

    $default  reduce using rule 6 (semicoloned_statements)


State 226

    8 semicoloned_statement: statement . SEMICOLON

    SEMICOLON  shift, and go to state 270


State 227

   11 semicoloned_statement: defer_statement . SEMICOLON

    SEMICOLON  shift, and go to state 271


State 228

    9 semicoloned_statement: assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 272


State 229

   10 semicoloned_statement: flow_control .
   25 statement: flow_control .

    SEMICOLON  reduce using rule 25 (statement)
    $default   reduce using rule 10 (semicoloned_statement)


State 230

   39 assignable_statement: member_op .
   73 variable_assign: member_op . EQUAL assignable_statement

    EQUAL  shift, and go to state 115

    $default  reduce using rule 39 (assignable_statement)


State 231

   53 unary_op: array_index .
   72 variable_assign: array_index . EQUAL assignable_statement

    EQUAL  shift, and go to state 116

    $default  reduce using rule 53 (unary_op)


State 232

   12 semicoloned_statement: function_def .
   26 statement: function_def .

    SEMICOLON  reduce using rule 26 (statement)
    $default   reduce using rule 12 (semicoloned_statement)


State 233

   69 member_op: id . FSTOP id
   70          | id . ARROW id
   71 variable_assign: id . EQUAL assignable_statement
   79 array_index: id . LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET
   80            | id . LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET
  111 function_def: id . LEFT_BRACKET arg_list RIGHT_BRACKET scope
  112             | id . LEFT_BRACKET RIGHT_BRACKET scope
  117 function_call: id . LEFT_BRACKET RIGHT_BRACKET
  118              | id . LEFT_BRACKET statement_list RIGHT_BRACKET
  120 variable_decl: id . COLON EQUAL assignable_statement
  153 id_or_constant: id .

    LEFT_BRACKET         shift, and go to state 273
    LEFT_SQUARE_BRACKET  shift, and go to state 119
    FSTOP                shift, and go to state 120
    COLON                shift, and go to state 121
    EQUAL                shift, and go to state 122
    ARROW                shift, and go to state 123

    $default  reduce using rule 153 (id_or_constant)


State 234

  166 constant_enum_value: type . COLON COLON id
  169 composited_type: type .

    COLON  shift, and go to state 145

    $default  reduce using rule 169 (composited_type)


State 235

  132 cond_block: cond_block ELSE IF LEFT_BRACKET . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 274
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 236

  112 function_def: id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 112 (function_def)


State 237

  146 arg_pair: FSTOP FSTOP . FSTOP

    FSTOP  shift, and go to state 275


State 238

  111 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 276


State 239

  139 arg_list: arg_list COMMA . arg_pair

    TYPE   shift, and go to state 2
    FSTOP  shift, and go to state 162
    MUT    shift, and go to state 11

    arg_pair         go to state 277
    type             go to state 47
    composited_type  go to state 165


State 240

  145 arg_pair: composited_type id .

    $default  reduce using rule 145 (arg_pair)


State 241

   79 array_index: id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 79 (array_index)


State 242

   80 array_index: id LEFT_SQUARE_BRACKET id RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 80 (array_index)


State 243

  120 variable_decl: id COLON EQUAL assignable_statement .

    $default  reduce using rule 120 (variable_decl)


State 244

  110 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET . scope
  114 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 158
    SEMICOLON   shift, and go to state 278

    scope  go to state 279


State 245

  109 function_def: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET scope
  115 function_decl: composited_type id LEFT_BRACKET arg_list . RIGHT_BRACKET SEMICOLON
  139 arg_list: arg_list . COMMA arg_pair

    RIGHT_BRACKET  shift, and go to state 280
    COMMA          shift, and go to state 239


State 246

  124 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET
  125           | composited_type id LEFT_SQUARE_BRACKET constant_int . RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE

    RIGHT_SQUARE_BRACKET  shift, and go to state 281


State 247

  121 variable_decl: composited_type id EQUAL assignable_statement .

    $default  reduce using rule 121 (variable_decl)


State 248

   74 cast: LEFT_BRACKET composited_type RIGHT_BRACKET id_or_constant .

    $default  reduce using rule 74 (cast)


State 249

  153 id_or_constant: id .

    $default  reduce using rule 153 (id_or_constant)


State 250

   75 increment: id_or_constant PLUS . PLUS

    PLUS  shift, and go to state 176


State 251

   76 decrement: id_or_constant MINUS . MINUS

    MINUS  shift, and go to state 180


State 252

  118 function_call: id LEFT_BRACKET statement_list RIGHT_BRACKET .

    $default  reduce using rule 118 (function_call)


State 253

  141 statement_list: statement_list COMMA . assignable_statement

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 282
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 254

  166 constant_enum_value: type COLON COLON id .

    $default  reduce using rule 166 (constant_enum_value)


State 255

  131 cond_block: IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 131 (cond_block)


State 256

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement . SEMICOLON assignable_statement RIGHT_BRACKET scope

    SEMICOLON  shift, and go to state 283


State 257

  133 while_loop: WHILE LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 133 (while_loop)


State 258

  147 enum_def: ENUM type LEFT_BRACE enum_parts RIGHT_BRACE .

    $default  reduce using rule 147 (enum_def)


State 259

  150 enum_parts: enum_parts COMMA . enum_part

    IDENTIFIER  shift, and go to state 1

    enum_part  go to state 284
    id         go to state 216


State 260

  152 enum_part: id EQUAL . constant_int

    INTEGER  shift, and go to state 50

    constant_int  go to state 285


State 261

   33 union_def: UNION type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 33 (union_def)


State 262

  135 struct_list: struct_list struct_pair .

    $default  reduce using rule 135 (struct_list)


State 263

  137 struct_pair: type id . SEMICOLON
  138            | type id . EQUAL assignable_statement SEMICOLON

    SEMICOLON  shift, and go to state 286
    EQUAL      shift, and go to state 287


State 264

  171 composited_type: composited_type . ASTERISK
  172                | composited_type . MUT
  173 type_list: composited_type .

    ASTERISK  shift, and go to state 124
    MUT       shift, and go to state 125

    $default  reduce using rule 173 (type_list)


State 265

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list . RIGHT_BRACKET
  174 type_list: type_list . COMMA composited_type

    RIGHT_BRACKET  shift, and go to state 288
    COMMA          shift, and go to state 289


State 266

   30 struct_def: STRUCT type LEFT_BRACE struct_list RIGHT_BRACE .

    $default  reduce using rule 30 (struct_def)


State 267

   35 defer_statement: DEFER assignable_statement .

    $default  reduce using rule 35 (defer_statement)


State 268

   45 scope: LEFT_BRACE semicoloned_statements RIGHT_BRACE .

    $default  reduce using rule 45 (scope)


State 269

    7 semicoloned_statements: semicoloned_statements semicoloned_statement .

    $default  reduce using rule 7 (semicoloned_statements)


State 270

    8 semicoloned_statement: statement SEMICOLON .

    $default  reduce using rule 8 (semicoloned_statement)


State 271

   11 semicoloned_statement: defer_statement SEMICOLON .

    $default  reduce using rule 11 (semicoloned_statement)


State 272

    9 semicoloned_statement: assignable_statement SEMICOLON .

    $default  reduce using rule 9 (semicoloned_statement)


State 273

  111 function_def: id LEFT_BRACKET . arg_list RIGHT_BRACKET scope
  112             | id LEFT_BRACKET . RIGHT_BRACKET scope
  117 function_call: id LEFT_BRACKET . RIGHT_BRACKET
  118              | id LEFT_BRACKET . statement_list RIGHT_BRACKET

    IDENTIFIER     shift, and go to state 1
    STRING         shift, and go to state 49
    INTEGER        shift, and go to state 50
    FLOAT          shift, and go to state 51
    TYPE           shift, and go to state 2
    LEFT_BRACKET   shift, and go to state 52
    RIGHT_BRACKET  shift, and go to state 290
    FSTOP          shift, and go to state 162
    ASTERISK       shift, and go to state 53
    AND            shift, and go to state 54
    TRUE           shift, and go to state 55
    FALSE          shift, and go to state 56
    MUT            shift, and go to state 11
    NULLPTR        shift, and go to state 57

    assignable_statement  go to state 208
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    arg_list              go to state 163
    statement_list        go to state 209
    arg_pair              go to state 164
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 234
    composited_type       go to state 165


State 274

  132 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 291


State 275

  146 arg_pair: FSTOP FSTOP FSTOP .

    $default  reduce using rule 146 (arg_pair)


State 276

  111 function_def: id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 111 (function_def)


State 277

  139 arg_list: arg_list COMMA arg_pair .

    $default  reduce using rule 139 (arg_list)


State 278

  114 function_decl: composited_type id LEFT_BRACKET RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 114 (function_decl)


State 279

  110 function_def: composited_type id LEFT_BRACKET RIGHT_BRACKET scope .

    $default  reduce using rule 110 (function_def)


State 280

  109 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . scope
  115 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET . SEMICOLON

    LEFT_BRACE  shift, and go to state 158
    SEMICOLON   shift, and go to state 292

    scope  go to state 293


State 281

  124 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET .
  125           | composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET . EQUAL LEFT_BRACE init_list RIGHT_BRACE

    EQUAL  shift, and go to state 294

    $default  reduce using rule 124 (array_decl)


State 282

  141 statement_list: statement_list COMMA assignable_statement .

    $default  reduce using rule 141 (statement_list)


State 283

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON . assignable_statement RIGHT_BRACKET scope

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 295
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 284

  150 enum_parts: enum_parts COMMA enum_part .

    $default  reduce using rule 150 (enum_parts)


State 285

  152 enum_part: id EQUAL constant_int .

    $default  reduce using rule 152 (enum_part)


State 286

  137 struct_pair: type id SEMICOLON .

    $default  reduce using rule 137 (struct_pair)


State 287

  138 struct_pair: type id EQUAL . assignable_statement SEMICOLON

    IDENTIFIER    shift, and go to state 1
    STRING        shift, and go to state 49
    INTEGER       shift, and go to state 50
    FLOAT         shift, and go to state 51
    TYPE          shift, and go to state 2
    LEFT_BRACKET  shift, and go to state 52
    ASTERISK      shift, and go to state 53
    AND           shift, and go to state 54
    TRUE          shift, and go to state 55
    FALSE         shift, and go to state 56
    NULLPTR       shift, and go to state 57

    assignable_statement  go to state 296
    unary_op              go to state 59
    binary_op             go to state 60
    member_op             go to state 61
    cast                  go to state 62
    increment             go to state 63
    decrement             go to state 64
    address_of            go to state 65
    dereference           go to state 66
    array_index           go to state 67
    add                   go to state 68
    subtract              go to state 69
    multiply              go to state 70
    divide                go to state 71
    equality              go to state 72
    inequality            go to state 73
    lesser                go to state 74
    greater               go to state 75
    lesser_or_equal       go to state 76
    greater_or_equal      go to state 77
    bitwise_and           go to state 78
    bitwise_or            go to state 79
    bitwise_left_shift    go to state 80
    bitwise_right_shift   go to state 81
    function_call         go to state 82
    id_or_constant        go to state 83
    constant              go to state 84
    constant_int          go to state 85
    constant_bool         go to state 86
    constant_enum_value   go to state 87
    id                    go to state 88
    type                  go to state 89


State 288

  143 func_ptr: FUNC_PTR type type LEFT_BRACKET type_list RIGHT_BRACKET .

    $default  reduce using rule 143 (func_ptr)


State 289

  174 type_list: type_list COMMA . composited_type

    TYPE  shift, and go to state 2
    MUT   shift, and go to state 11

    type             go to state 47
    composited_type  go to state 297


State 290

  112 function_def: id LEFT_BRACKET RIGHT_BRACKET . scope
  117 function_call: id LEFT_BRACKET RIGHT_BRACKET .

    LEFT_BRACE  shift, and go to state 158

    $default  reduce using rule 117 (function_call)

    scope  go to state 236


State 291

  132 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 298


State 292

  115 function_decl: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET SEMICOLON .

    $default  reduce using rule 115 (function_decl)


State 293

  109 function_def: composited_type id LEFT_BRACKET arg_list RIGHT_BRACKET scope .

    $default  reduce using rule 109 (function_def)


State 294

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL . LEFT_BRACE init_list RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 299


State 295

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement . RIGHT_BRACKET scope

    RIGHT_BRACKET  shift, and go to state 300


State 296

  138 struct_pair: type id EQUAL assignable_statement . SEMICOLON

    SEMICOLON  shift, and go to state 301


State 297

  171 composited_type: composited_type . ASTERISK
  172                | composited_type . MUT
  174 type_list: type_list COMMA composited_type .

    ASTERISK  shift, and go to state 124
    MUT       shift, and go to state 125

    $default  reduce using rule 174 (type_list)


State 298

  132 cond_block: cond_block ELSE IF LEFT_BRACKET assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 132 (cond_block)


State 299

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE . init_list RIGHT_BRACE

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    init_list            go to state 302
    id_or_constant       go to state 303
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 249
    type                 go to state 89


State 300

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET . scope

    LEFT_BRACE  shift, and go to state 158

    scope  go to state 304


State 301

  138 struct_pair: type id EQUAL assignable_statement SEMICOLON .

    $default  reduce using rule 138 (struct_pair)


State 302

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list . RIGHT_BRACE
  127 init_list: init_list . COMMA id_or_constant

    RIGHT_BRACE  shift, and go to state 305
    COMMA        shift, and go to state 306


State 303

  126 init_list: id_or_constant .

    $default  reduce using rule 126 (init_list)


State 304

  134 for_loop: FOR LEFT_BRACKET statement SEMICOLON assignable_statement SEMICOLON assignable_statement RIGHT_BRACKET scope .

    $default  reduce using rule 134 (for_loop)


State 305

  125 array_decl: composited_type id LEFT_SQUARE_BRACKET constant_int RIGHT_SQUARE_BRACKET EQUAL LEFT_BRACE init_list RIGHT_BRACE .

    $default  reduce using rule 125 (array_decl)


State 306

  127 init_list: init_list COMMA . id_or_constant

    IDENTIFIER  shift, and go to state 1
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    TYPE        shift, and go to state 2
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    NULLPTR     shift, and go to state 57

    id_or_constant       go to state 307
    constant             go to state 84
    constant_int         go to state 85
    constant_bool        go to state 86
    constant_enum_value  go to state 87
    id                   go to state 249
    type                 go to state 89


State 307

  127 init_list: init_list COMMA id_or_constant .

    $default  reduce using rule 127 (init_list)
