import io;

sort(mut i32 mut *items, mut i32 size) 
{
    quickSort(i32 first, i32 last) 
	{
	    swap(i32 p, i32 q)
		{
            tmp := items[p];
			tmp2 := items[q];
			items[p] = tmp2;
			items[q] = tmp;
        }
		        
        partition() 
		{
            pivot := items[first];
			index := first;
            swap(index, last);

			for (i := first; i < last; i++)
			{
			    if (items[i] < pivot)
				{
					swap(index, i);
					index++;
				}
			}

            swap(index, last);

            return index;
        }

		if (first < last) 
		{
            pivotIndex := partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }
    }
    quickSort(0, size - 1);
}

main()
{
	i32 mut arr mut[5] = { 25, 4, 5, 7, 1 };

	printf("Original array values: \n");
	for (l := 0; l < 5; l++)
	{
		k := arr[l];
		printf("%d\n", k);
	}
	printf("\n");

	printf("Sorting array using quicksort...\n\n");
	sort(arr, 5);

	printf("Sorted array values: \n");
	for (i := 0; i < 5; i++)
	{
		n := arr[i];
		printf("%d\n", n);
	}
	printf("\n");

	return 0;
}