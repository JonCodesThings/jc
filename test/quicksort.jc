import io;

void sort(mut i32 mut *items, mut i32 size) 
{
    void quickSort(i32 first, i32 last) 
	{
	    void swap(i32 p, i32 q) 
		{
            i32 tmp = items[p];
			i32 tmp2 = items[q];
			items[p] = tmp2;
			items[q] = tmp;
			i32 r = items[p];
			i32 k = items[q];
			printf("p: %d q: %d tmp: %d tmp2: %d items[p]: %d items[q]: %d\n", p, q, tmp, tmp2, r, k);
        }

		        
        i32 partition() 
		{
            i32 pivot = items[first];
			mut i32 index = first;
            swap(index, last);

			for (mut i32 i = first; i < last; i++)
			{
			    if (pivot > items[i])
				{
					swap(index++, i);
				}
			}

            swap(index, last);

            return index;
        }

		if (first < last) 
		{
            i32 pivotIndex = partition();
            quickSort(first, pivotIndex - 1);
            quickSort(pivotIndex + 1, last);
        }
    }
    quickSort(0, size - 1);
}

main()
{
	i32 mut arr mut[5] = { 25, 4, 5, 7, 1 };

	sort(arr, 5);


	for (mut i32 l = 0; l < 5; l++)
	{
		i32 n = arr[l];
		printf("%d\n", n);
	}


	return 0;
}